
Assignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b70  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e0  08006d70  08006d70  00016d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007150  08007150  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007150  08007150  00017150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007158  08007158  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007158  08007158  00017158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800715c  0800715c  0001715c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007160  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000018c  20000074  080071d4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000200  080071d4  00020200  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001235a  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d4c  00000000  00000000  000323fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f98  00000000  00000000  00035148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e78  00000000  00000000  000360e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002982f  00000000  00000000  00036f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000140bf  00000000  00000000  00060787  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fe8fb  00000000  00000000  00074846  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00173141  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043b0  00000000  00000000  00173194  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000074 	.word	0x20000074
 800021c:	00000000 	.word	0x00000000
 8000220:	08006d58 	.word	0x08006d58

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000078 	.word	0x20000078
 800023c:	08006d58 	.word	0x08006d58

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <ILI9341_Draw_Hollow_Rectangle_Coord>:
		//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}

/*Draw a hollow rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Hollow_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t Colour)
{
 80005e4:	b590      	push	{r4, r7, lr}
 80005e6:	b087      	sub	sp, #28
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	4604      	mov	r4, r0
 80005ec:	4608      	mov	r0, r1
 80005ee:	4611      	mov	r1, r2
 80005f0:	461a      	mov	r2, r3
 80005f2:	4623      	mov	r3, r4
 80005f4:	80fb      	strh	r3, [r7, #6]
 80005f6:	4603      	mov	r3, r0
 80005f8:	80bb      	strh	r3, [r7, #4]
 80005fa:	460b      	mov	r3, r1
 80005fc:	807b      	strh	r3, [r7, #2]
 80005fe:	4613      	mov	r3, r2
 8000600:	803b      	strh	r3, [r7, #0]
	uint16_t 	X_length = 0;
 8000602:	2300      	movs	r3, #0
 8000604:	82fb      	strh	r3, [r7, #22]
	uint16_t 	Y_length = 0;
 8000606:	2300      	movs	r3, #0
 8000608:	82bb      	strh	r3, [r7, #20]
	uint8_t		Negative_X = 0;
 800060a:	2300      	movs	r3, #0
 800060c:	74fb      	strb	r3, [r7, #19]
	uint8_t 	Negative_Y = 0;
 800060e:	2300      	movs	r3, #0
 8000610:	74bb      	strb	r3, [r7, #18]
	float 		Calc_Negative = 0;
 8000612:	f04f 0300 	mov.w	r3, #0
 8000616:	60fb      	str	r3, [r7, #12]
	
	Calc_Negative = X1 - X0;
 8000618:	887a      	ldrh	r2, [r7, #2]
 800061a:	88fb      	ldrh	r3, [r7, #6]
 800061c:	1ad3      	subs	r3, r2, r3
 800061e:	ee07 3a90 	vmov	s15, r3
 8000622:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000626:	edc7 7a03 	vstr	s15, [r7, #12]
	if(Calc_Negative < 0) Negative_X = 1;
 800062a:	edd7 7a03 	vldr	s15, [r7, #12]
 800062e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000636:	d501      	bpl.n	800063c <ILI9341_Draw_Hollow_Rectangle_Coord+0x58>
 8000638:	2301      	movs	r3, #1
 800063a:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 800063c:	f04f 0300 	mov.w	r3, #0
 8000640:	60fb      	str	r3, [r7, #12]
	
	Calc_Negative = Y1 - Y0;
 8000642:	883a      	ldrh	r2, [r7, #0]
 8000644:	88bb      	ldrh	r3, [r7, #4]
 8000646:	1ad3      	subs	r3, r2, r3
 8000648:	ee07 3a90 	vmov	s15, r3
 800064c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000650:	edc7 7a03 	vstr	s15, [r7, #12]
	if(Calc_Negative < 0) Negative_Y = 1;
 8000654:	edd7 7a03 	vldr	s15, [r7, #12]
 8000658:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800065c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000660:	d501      	bpl.n	8000666 <ILI9341_Draw_Hollow_Rectangle_Coord+0x82>
 8000662:	2301      	movs	r3, #1
 8000664:	74bb      	strb	r3, [r7, #18]
	
	
	//DRAW HORIZONTAL!
	if(!Negative_X)
 8000666:	7cfb      	ldrb	r3, [r7, #19]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d104      	bne.n	8000676 <ILI9341_Draw_Hollow_Rectangle_Coord+0x92>
	{
		X_length = X1 - X0;		
 800066c:	887a      	ldrh	r2, [r7, #2]
 800066e:	88fb      	ldrh	r3, [r7, #6]
 8000670:	1ad3      	subs	r3, r2, r3
 8000672:	82fb      	strh	r3, [r7, #22]
 8000674:	e003      	b.n	800067e <ILI9341_Draw_Hollow_Rectangle_Coord+0x9a>
	}
	else
	{
		X_length = X0 - X1;		
 8000676:	88fa      	ldrh	r2, [r7, #6]
 8000678:	887b      	ldrh	r3, [r7, #2]
 800067a:	1ad3      	subs	r3, r2, r3
 800067c:	82fb      	strh	r3, [r7, #22]
	}
	ILI9341_Draw_Horizontal_Line(X0, Y0, X_length, Colour);
 800067e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000680:	8afa      	ldrh	r2, [r7, #22]
 8000682:	88b9      	ldrh	r1, [r7, #4]
 8000684:	88f8      	ldrh	r0, [r7, #6]
 8000686:	f000 fd8d 	bl	80011a4 <ILI9341_Draw_Horizontal_Line>
	ILI9341_Draw_Horizontal_Line(X0, Y1, X_length, Colour);
 800068a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800068c:	8afa      	ldrh	r2, [r7, #22]
 800068e:	8839      	ldrh	r1, [r7, #0]
 8000690:	88f8      	ldrh	r0, [r7, #6]
 8000692:	f000 fd87 	bl	80011a4 <ILI9341_Draw_Horizontal_Line>
	
	
	
	//DRAW VERTICAL!
	if(!Negative_Y)
 8000696:	7cbb      	ldrb	r3, [r7, #18]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d104      	bne.n	80006a6 <ILI9341_Draw_Hollow_Rectangle_Coord+0xc2>
	{
		Y_length = Y1 - Y0;		
 800069c:	883a      	ldrh	r2, [r7, #0]
 800069e:	88bb      	ldrh	r3, [r7, #4]
 80006a0:	1ad3      	subs	r3, r2, r3
 80006a2:	82bb      	strh	r3, [r7, #20]
 80006a4:	e003      	b.n	80006ae <ILI9341_Draw_Hollow_Rectangle_Coord+0xca>
	}
	else
	{
		Y_length = Y0 - Y1;		
 80006a6:	88ba      	ldrh	r2, [r7, #4]
 80006a8:	883b      	ldrh	r3, [r7, #0]
 80006aa:	1ad3      	subs	r3, r2, r3
 80006ac:	82bb      	strh	r3, [r7, #20]
	}
	ILI9341_Draw_Vertical_Line(X0, Y0, Y_length, Colour);
 80006ae:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80006b0:	8aba      	ldrh	r2, [r7, #20]
 80006b2:	88b9      	ldrh	r1, [r7, #4]
 80006b4:	88f8      	ldrh	r0, [r7, #6]
 80006b6:	f000 fdb9 	bl	800122c <ILI9341_Draw_Vertical_Line>
	ILI9341_Draw_Vertical_Line(X1, Y0, Y_length, Colour);
 80006ba:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80006bc:	8aba      	ldrh	r2, [r7, #20]
 80006be:	88b9      	ldrh	r1, [r7, #4]
 80006c0:	8878      	ldrh	r0, [r7, #2]
 80006c2:	f000 fdb3 	bl	800122c <ILI9341_Draw_Vertical_Line>
	
	if((X_length > 0)||(Y_length > 0)) 
 80006c6:	8afb      	ldrh	r3, [r7, #22]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d102      	bne.n	80006d2 <ILI9341_Draw_Hollow_Rectangle_Coord+0xee>
 80006cc:	8abb      	ldrh	r3, [r7, #20]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d005      	beq.n	80006de <ILI9341_Draw_Hollow_Rectangle_Coord+0xfa>
	{
		ILI9341_Draw_Pixel(X1, Y1, Colour);
 80006d2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80006d4:	8839      	ldrh	r1, [r7, #0]
 80006d6:	887b      	ldrh	r3, [r7, #2]
 80006d8:	4618      	mov	r0, r3
 80006da:	f000 fc2d 	bl	8000f38 <ILI9341_Draw_Pixel>
	}
	
}
 80006de:	bf00      	nop
 80006e0:	371c      	adds	r7, #28
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd90      	pop	{r4, r7, pc}

080006e6 <ILI9341_Draw_Filled_Rectangle_Coord>:

/*Draw a filled rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Filled_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t Colour)
{
 80006e6:	b590      	push	{r4, r7, lr}
 80006e8:	b089      	sub	sp, #36	; 0x24
 80006ea:	af02      	add	r7, sp, #8
 80006ec:	4604      	mov	r4, r0
 80006ee:	4608      	mov	r0, r1
 80006f0:	4611      	mov	r1, r2
 80006f2:	461a      	mov	r2, r3
 80006f4:	4623      	mov	r3, r4
 80006f6:	80fb      	strh	r3, [r7, #6]
 80006f8:	4603      	mov	r3, r0
 80006fa:	80bb      	strh	r3, [r7, #4]
 80006fc:	460b      	mov	r3, r1
 80006fe:	807b      	strh	r3, [r7, #2]
 8000700:	4613      	mov	r3, r2
 8000702:	803b      	strh	r3, [r7, #0]
	uint16_t 	X_length = 0;
 8000704:	2300      	movs	r3, #0
 8000706:	82fb      	strh	r3, [r7, #22]
	uint16_t 	Y_length = 0;
 8000708:	2300      	movs	r3, #0
 800070a:	82bb      	strh	r3, [r7, #20]
	uint8_t		Negative_X = 0;
 800070c:	2300      	movs	r3, #0
 800070e:	74fb      	strb	r3, [r7, #19]
	uint8_t 	Negative_Y = 0;
 8000710:	2300      	movs	r3, #0
 8000712:	74bb      	strb	r3, [r7, #18]
	int32_t 	Calc_Negative = 0;
 8000714:	2300      	movs	r3, #0
 8000716:	60bb      	str	r3, [r7, #8]
	
	uint16_t X0_true = 0;
 8000718:	2300      	movs	r3, #0
 800071a:	823b      	strh	r3, [r7, #16]
	uint16_t Y0_true = 0;
 800071c:	2300      	movs	r3, #0
 800071e:	81fb      	strh	r3, [r7, #14]
	
	Calc_Negative = X1 - X0;
 8000720:	887a      	ldrh	r2, [r7, #2]
 8000722:	88fb      	ldrh	r3, [r7, #6]
 8000724:	1ad3      	subs	r3, r2, r3
 8000726:	60bb      	str	r3, [r7, #8]
	if(Calc_Negative < 0) Negative_X = 1;
 8000728:	68bb      	ldr	r3, [r7, #8]
 800072a:	2b00      	cmp	r3, #0
 800072c:	da01      	bge.n	8000732 <ILI9341_Draw_Filled_Rectangle_Coord+0x4c>
 800072e:	2301      	movs	r3, #1
 8000730:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 8000732:	2300      	movs	r3, #0
 8000734:	60bb      	str	r3, [r7, #8]
	
	Calc_Negative = Y1 - Y0;
 8000736:	883a      	ldrh	r2, [r7, #0]
 8000738:	88bb      	ldrh	r3, [r7, #4]
 800073a:	1ad3      	subs	r3, r2, r3
 800073c:	60bb      	str	r3, [r7, #8]
	if(Calc_Negative < 0) Negative_Y = 1;
 800073e:	68bb      	ldr	r3, [r7, #8]
 8000740:	2b00      	cmp	r3, #0
 8000742:	da01      	bge.n	8000748 <ILI9341_Draw_Filled_Rectangle_Coord+0x62>
 8000744:	2301      	movs	r3, #1
 8000746:	74bb      	strb	r3, [r7, #18]
	
	
	//DRAW HORIZONTAL!
	if(!Negative_X)
 8000748:	7cfb      	ldrb	r3, [r7, #19]
 800074a:	2b00      	cmp	r3, #0
 800074c:	d106      	bne.n	800075c <ILI9341_Draw_Filled_Rectangle_Coord+0x76>
	{
		X_length = X1 - X0;
 800074e:	887a      	ldrh	r2, [r7, #2]
 8000750:	88fb      	ldrh	r3, [r7, #6]
 8000752:	1ad3      	subs	r3, r2, r3
 8000754:	82fb      	strh	r3, [r7, #22]
		X0_true = X0;
 8000756:	88fb      	ldrh	r3, [r7, #6]
 8000758:	823b      	strh	r3, [r7, #16]
 800075a:	e005      	b.n	8000768 <ILI9341_Draw_Filled_Rectangle_Coord+0x82>
	}
	else
	{
		X_length = X0 - X1;
 800075c:	88fa      	ldrh	r2, [r7, #6]
 800075e:	887b      	ldrh	r3, [r7, #2]
 8000760:	1ad3      	subs	r3, r2, r3
 8000762:	82fb      	strh	r3, [r7, #22]
		X0_true = X1;
 8000764:	887b      	ldrh	r3, [r7, #2]
 8000766:	823b      	strh	r3, [r7, #16]
	}
	
	//DRAW VERTICAL!
	if(!Negative_Y)
 8000768:	7cbb      	ldrb	r3, [r7, #18]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d106      	bne.n	800077c <ILI9341_Draw_Filled_Rectangle_Coord+0x96>
	{
		Y_length = Y1 - Y0;
 800076e:	883a      	ldrh	r2, [r7, #0]
 8000770:	88bb      	ldrh	r3, [r7, #4]
 8000772:	1ad3      	subs	r3, r2, r3
 8000774:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y0;		
 8000776:	88bb      	ldrh	r3, [r7, #4]
 8000778:	81fb      	strh	r3, [r7, #14]
 800077a:	e005      	b.n	8000788 <ILI9341_Draw_Filled_Rectangle_Coord+0xa2>
	}
	else
	{
		Y_length = Y0 - Y1;
 800077c:	88ba      	ldrh	r2, [r7, #4]
 800077e:	883b      	ldrh	r3, [r7, #0]
 8000780:	1ad3      	subs	r3, r2, r3
 8000782:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y1;	
 8000784:	883b      	ldrh	r3, [r7, #0]
 8000786:	81fb      	strh	r3, [r7, #14]
	}
	
	ILI9341_Draw_Rectangle(X0_true, Y0_true, X_length, Y_length, Colour);	
 8000788:	8abc      	ldrh	r4, [r7, #20]
 800078a:	8afa      	ldrh	r2, [r7, #22]
 800078c:	89f9      	ldrh	r1, [r7, #14]
 800078e:	8a38      	ldrh	r0, [r7, #16]
 8000790:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000792:	9300      	str	r3, [sp, #0]
 8000794:	4623      	mov	r3, r4
 8000796:	f000 fca9 	bl	80010ec <ILI9341_Draw_Rectangle>
}
 800079a:	bf00      	nop
 800079c:	371c      	adds	r7, #28
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd90      	pop	{r4, r7, pc}
	...

080007a4 <ILI9341_Draw_Char>:

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour) 
{
 80007a4:	b590      	push	{r4, r7, lr}
 80007a6:	b089      	sub	sp, #36	; 0x24
 80007a8:	af02      	add	r7, sp, #8
 80007aa:	4604      	mov	r4, r0
 80007ac:	4608      	mov	r0, r1
 80007ae:	4611      	mov	r1, r2
 80007b0:	461a      	mov	r2, r3
 80007b2:	4623      	mov	r3, r4
 80007b4:	71fb      	strb	r3, [r7, #7]
 80007b6:	4603      	mov	r3, r0
 80007b8:	71bb      	strb	r3, [r7, #6]
 80007ba:	460b      	mov	r3, r1
 80007bc:	717b      	strb	r3, [r7, #5]
 80007be:	4613      	mov	r3, r2
 80007c0:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 80007c2:	79fb      	ldrb	r3, [r7, #7]
 80007c4:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 80007c6:	7dfb      	ldrb	r3, [r7, #23]
 80007c8:	2b1f      	cmp	r3, #31
 80007ca:	d802      	bhi.n	80007d2 <ILI9341_Draw_Char+0x2e>
        Character = 0;
 80007cc:	2300      	movs	r3, #0
 80007ce:	71fb      	strb	r3, [r7, #7]
 80007d0:	e002      	b.n	80007d8 <ILI9341_Draw_Char+0x34>
    } else {
        function_char -= 32;
 80007d2:	7dfb      	ldrb	r3, [r7, #23]
 80007d4:	3b20      	subs	r3, #32
 80007d6:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 80007d8:	2300      	movs	r3, #0
 80007da:	753b      	strb	r3, [r7, #20]
 80007dc:	e012      	b.n	8000804 <ILI9341_Draw_Char+0x60>
		{
		temp[k] = font[function_char][k];
 80007de:	7dfa      	ldrb	r2, [r7, #23]
 80007e0:	7d38      	ldrb	r0, [r7, #20]
 80007e2:	7d39      	ldrb	r1, [r7, #20]
 80007e4:	4c3b      	ldr	r4, [pc, #236]	; (80008d4 <ILI9341_Draw_Char+0x130>)
 80007e6:	4613      	mov	r3, r2
 80007e8:	005b      	lsls	r3, r3, #1
 80007ea:	4413      	add	r3, r2
 80007ec:	005b      	lsls	r3, r3, #1
 80007ee:	4423      	add	r3, r4
 80007f0:	4403      	add	r3, r0
 80007f2:	781a      	ldrb	r2, [r3, #0]
 80007f4:	f101 0318 	add.w	r3, r1, #24
 80007f8:	443b      	add	r3, r7
 80007fa:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 80007fe:	7d3b      	ldrb	r3, [r7, #20]
 8000800:	3301      	adds	r3, #1
 8000802:	753b      	strb	r3, [r7, #20]
 8000804:	7d3b      	ldrb	r3, [r7, #20]
 8000806:	2b05      	cmp	r3, #5
 8000808:	d9e9      	bls.n	80007de <ILI9341_Draw_Char+0x3a>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 800080a:	79bb      	ldrb	r3, [r7, #6]
 800080c:	b298      	uxth	r0, r3
 800080e:	797b      	ldrb	r3, [r7, #5]
 8000810:	b299      	uxth	r1, r3
 8000812:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000814:	461a      	mov	r2, r3
 8000816:	0052      	lsls	r2, r2, #1
 8000818:	4413      	add	r3, r2
 800081a:	005b      	lsls	r3, r3, #1
 800081c:	b29a      	uxth	r2, r3
 800081e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000820:	00db      	lsls	r3, r3, #3
 8000822:	b29c      	uxth	r4, r3
 8000824:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000826:	9300      	str	r3, [sp, #0]
 8000828:	4623      	mov	r3, r4
 800082a:	f000 fc5f 	bl	80010ec <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 800082e:	2300      	movs	r3, #0
 8000830:	757b      	strb	r3, [r7, #21]
 8000832:	e047      	b.n	80008c4 <ILI9341_Draw_Char+0x120>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8000834:	2300      	movs	r3, #0
 8000836:	75bb      	strb	r3, [r7, #22]
 8000838:	e03e      	b.n	80008b8 <ILI9341_Draw_Char+0x114>
            if (temp[j] & (1<<i)) {			
 800083a:	7d7b      	ldrb	r3, [r7, #21]
 800083c:	3318      	adds	r3, #24
 800083e:	443b      	add	r3, r7
 8000840:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000844:	461a      	mov	r2, r3
 8000846:	7dbb      	ldrb	r3, [r7, #22]
 8000848:	fa42 f303 	asr.w	r3, r2, r3
 800084c:	f003 0301 	and.w	r3, r3, #1
 8000850:	2b00      	cmp	r3, #0
 8000852:	d02e      	beq.n	80008b2 <ILI9341_Draw_Char+0x10e>
							if(Size == 1)
 8000854:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000856:	2b01      	cmp	r3, #1
 8000858:	d110      	bne.n	800087c <ILI9341_Draw_Char+0xd8>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 800085a:	79bb      	ldrb	r3, [r7, #6]
 800085c:	b29a      	uxth	r2, r3
 800085e:	7d7b      	ldrb	r3, [r7, #21]
 8000860:	b29b      	uxth	r3, r3
 8000862:	4413      	add	r3, r2
 8000864:	b298      	uxth	r0, r3
 8000866:	797b      	ldrb	r3, [r7, #5]
 8000868:	b29a      	uxth	r2, r3
 800086a:	7dbb      	ldrb	r3, [r7, #22]
 800086c:	b29b      	uxth	r3, r3
 800086e:	4413      	add	r3, r2
 8000870:	b29b      	uxth	r3, r3
 8000872:	887a      	ldrh	r2, [r7, #2]
 8000874:	4619      	mov	r1, r3
 8000876:	f000 fb5f 	bl	8000f38 <ILI9341_Draw_Pixel>
 800087a:	e01a      	b.n	80008b2 <ILI9341_Draw_Char+0x10e>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 800087c:	79bb      	ldrb	r3, [r7, #6]
 800087e:	b29a      	uxth	r2, r3
 8000880:	7d7b      	ldrb	r3, [r7, #21]
 8000882:	b29b      	uxth	r3, r3
 8000884:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8000886:	fb11 f303 	smulbb	r3, r1, r3
 800088a:	b29b      	uxth	r3, r3
 800088c:	4413      	add	r3, r2
 800088e:	b298      	uxth	r0, r3
 8000890:	797b      	ldrb	r3, [r7, #5]
 8000892:	b29a      	uxth	r2, r3
 8000894:	7dbb      	ldrb	r3, [r7, #22]
 8000896:	b29b      	uxth	r3, r3
 8000898:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 800089a:	fb11 f303 	smulbb	r3, r1, r3
 800089e:	b29b      	uxth	r3, r3
 80008a0:	4413      	add	r3, r2
 80008a2:	b299      	uxth	r1, r3
 80008a4:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 80008a6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80008a8:	887b      	ldrh	r3, [r7, #2]
 80008aa:	9300      	str	r3, [sp, #0]
 80008ac:	4623      	mov	r3, r4
 80008ae:	f000 fc1d 	bl	80010ec <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 80008b2:	7dbb      	ldrb	r3, [r7, #22]
 80008b4:	3301      	adds	r3, #1
 80008b6:	75bb      	strb	r3, [r7, #22]
 80008b8:	7dbb      	ldrb	r3, [r7, #22]
 80008ba:	2b07      	cmp	r3, #7
 80008bc:	d9bd      	bls.n	800083a <ILI9341_Draw_Char+0x96>
    for (j=0; j<CHAR_WIDTH; j++) {
 80008be:	7d7b      	ldrb	r3, [r7, #21]
 80008c0:	3301      	adds	r3, #1
 80008c2:	757b      	strb	r3, [r7, #21]
 80008c4:	7d7b      	ldrb	r3, [r7, #21]
 80008c6:	2b05      	cmp	r3, #5
 80008c8:	d9b4      	bls.n	8000834 <ILI9341_Draw_Char+0x90>
							}
            }						
        }
    }
}
 80008ca:	bf00      	nop
 80008cc:	bf00      	nop
 80008ce:	371c      	adds	r7, #28
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd90      	pop	{r4, r7, pc}
 80008d4:	08006ecc 	.word	0x08006ecc

080008d8 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 80008d8:	b590      	push	{r4, r7, lr}
 80008da:	b085      	sub	sp, #20
 80008dc:	af02      	add	r7, sp, #8
 80008de:	6078      	str	r0, [r7, #4]
 80008e0:	4608      	mov	r0, r1
 80008e2:	4611      	mov	r1, r2
 80008e4:	461a      	mov	r2, r3
 80008e6:	4603      	mov	r3, r0
 80008e8:	70fb      	strb	r3, [r7, #3]
 80008ea:	460b      	mov	r3, r1
 80008ec:	70bb      	strb	r3, [r7, #2]
 80008ee:	4613      	mov	r3, r2
 80008f0:	803b      	strh	r3, [r7, #0]
    while (*Text) {
 80008f2:	e017      	b.n	8000924 <ILI9341_Draw_Text+0x4c>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	1c5a      	adds	r2, r3, #1
 80008f8:	607a      	str	r2, [r7, #4]
 80008fa:	7818      	ldrb	r0, [r3, #0]
 80008fc:	883c      	ldrh	r4, [r7, #0]
 80008fe:	78ba      	ldrb	r2, [r7, #2]
 8000900:	78f9      	ldrb	r1, [r7, #3]
 8000902:	8bbb      	ldrh	r3, [r7, #28]
 8000904:	9301      	str	r3, [sp, #4]
 8000906:	8b3b      	ldrh	r3, [r7, #24]
 8000908:	9300      	str	r3, [sp, #0]
 800090a:	4623      	mov	r3, r4
 800090c:	f7ff ff4a 	bl	80007a4 <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 8000910:	8b3b      	ldrh	r3, [r7, #24]
 8000912:	b2db      	uxtb	r3, r3
 8000914:	461a      	mov	r2, r3
 8000916:	0052      	lsls	r2, r2, #1
 8000918:	4413      	add	r3, r2
 800091a:	005b      	lsls	r3, r3, #1
 800091c:	b2da      	uxtb	r2, r3
 800091e:	78fb      	ldrb	r3, [r7, #3]
 8000920:	4413      	add	r3, r2
 8000922:	70fb      	strb	r3, [r7, #3]
    while (*Text) {
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d1e3      	bne.n	80008f4 <ILI9341_Draw_Text+0x1c>
    }
}
 800092c:	bf00      	nop
 800092e:	bf00      	nop
 8000930:	370c      	adds	r7, #12
 8000932:	46bd      	mov	sp, r7
 8000934:	bd90      	pop	{r4, r7, pc}
	...

08000938 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
MX_SPI5_Init();																							//SPI INIT
 800093c:	f002 f95c 	bl	8002bf8 <MX_SPI5_Init>
MX_GPIO_Init();																							//GPIO INIT
 8000940:	f000 fe86 	bl	8001650 <MX_GPIO_Init>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8000944:	2200      	movs	r2, #0
 8000946:	f44f 7180 	mov.w	r1, #256	; 0x100
 800094a:	4802      	ldr	r0, [pc, #8]	; (8000954 <ILI9341_SPI_Init+0x1c>)
 800094c:	f003 fc6c 	bl	8004228 <HAL_GPIO_WritePin>
}
 8000950:	bf00      	nop
 8000952:	bd80      	pop	{r7, pc}
 8000954:	40020800 	.word	0x40020800

08000958 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	4603      	mov	r3, r0
 8000960:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 8000962:	1df9      	adds	r1, r7, #7
 8000964:	2301      	movs	r3, #1
 8000966:	2201      	movs	r2, #1
 8000968:	4803      	ldr	r0, [pc, #12]	; (8000978 <ILI9341_SPI_Send+0x20>)
 800096a:	f004 fa10 	bl	8004d8e <HAL_SPI_Transmit>
}
 800096e:	bf00      	nop
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	200000ec 	.word	0x200000ec

0800097c <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	4603      	mov	r3, r0
 8000984:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000986:	2200      	movs	r2, #0
 8000988:	f44f 7180 	mov.w	r1, #256	; 0x100
 800098c:	480b      	ldr	r0, [pc, #44]	; (80009bc <ILI9341_Write_Command+0x40>)
 800098e:	f003 fc4b 	bl	8004228 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8000992:	2200      	movs	r2, #0
 8000994:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000998:	4808      	ldr	r0, [pc, #32]	; (80009bc <ILI9341_Write_Command+0x40>)
 800099a:	f003 fc45 	bl	8004228 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 800099e:	79fb      	ldrb	r3, [r7, #7]
 80009a0:	4618      	mov	r0, r3
 80009a2:	f7ff ffd9 	bl	8000958 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 80009a6:	2201      	movs	r2, #1
 80009a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009ac:	4803      	ldr	r0, [pc, #12]	; (80009bc <ILI9341_Write_Command+0x40>)
 80009ae:	f003 fc3b 	bl	8004228 <HAL_GPIO_WritePin>
}
 80009b2:	bf00      	nop
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40020800 	.word	0x40020800

080009c0 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	4603      	mov	r3, r0
 80009c8:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 80009ca:	2201      	movs	r2, #1
 80009cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009d0:	480b      	ldr	r0, [pc, #44]	; (8000a00 <ILI9341_Write_Data+0x40>)
 80009d2:	f003 fc29 	bl	8004228 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80009d6:	2200      	movs	r2, #0
 80009d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009dc:	4808      	ldr	r0, [pc, #32]	; (8000a00 <ILI9341_Write_Data+0x40>)
 80009de:	f003 fc23 	bl	8004228 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 80009e2:	79fb      	ldrb	r3, [r7, #7]
 80009e4:	4618      	mov	r0, r3
 80009e6:	f7ff ffb7 	bl	8000958 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80009ea:	2201      	movs	r2, #1
 80009ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009f0:	4803      	ldr	r0, [pc, #12]	; (8000a00 <ILI9341_Write_Data+0x40>)
 80009f2:	f003 fc19 	bl	8004228 <HAL_GPIO_WritePin>
}
 80009f6:	bf00      	nop
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	40020800 	.word	0x40020800

08000a04 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8000a04:	b590      	push	{r4, r7, lr}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4604      	mov	r4, r0
 8000a0c:	4608      	mov	r0, r1
 8000a0e:	4611      	mov	r1, r2
 8000a10:	461a      	mov	r2, r3
 8000a12:	4623      	mov	r3, r4
 8000a14:	80fb      	strh	r3, [r7, #6]
 8000a16:	4603      	mov	r3, r0
 8000a18:	80bb      	strh	r3, [r7, #4]
 8000a1a:	460b      	mov	r3, r1
 8000a1c:	807b      	strh	r3, [r7, #2]
 8000a1e:	4613      	mov	r3, r2
 8000a20:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 8000a22:	202a      	movs	r0, #42	; 0x2a
 8000a24:	f7ff ffaa 	bl	800097c <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 8000a28:	88fb      	ldrh	r3, [r7, #6]
 8000a2a:	0a1b      	lsrs	r3, r3, #8
 8000a2c:	b29b      	uxth	r3, r3
 8000a2e:	b2db      	uxtb	r3, r3
 8000a30:	4618      	mov	r0, r3
 8000a32:	f7ff ffc5 	bl	80009c0 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 8000a36:	88fb      	ldrh	r3, [r7, #6]
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f7ff ffc0 	bl	80009c0 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8000a40:	887b      	ldrh	r3, [r7, #2]
 8000a42:	0a1b      	lsrs	r3, r3, #8
 8000a44:	b29b      	uxth	r3, r3
 8000a46:	b2db      	uxtb	r3, r3
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f7ff ffb9 	bl	80009c0 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 8000a4e:	887b      	ldrh	r3, [r7, #2]
 8000a50:	b2db      	uxtb	r3, r3
 8000a52:	4618      	mov	r0, r3
 8000a54:	f7ff ffb4 	bl	80009c0 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8000a58:	202b      	movs	r0, #43	; 0x2b
 8000a5a:	f7ff ff8f 	bl	800097c <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 8000a5e:	88bb      	ldrh	r3, [r7, #4]
 8000a60:	0a1b      	lsrs	r3, r3, #8
 8000a62:	b29b      	uxth	r3, r3
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	4618      	mov	r0, r3
 8000a68:	f7ff ffaa 	bl	80009c0 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8000a6c:	88bb      	ldrh	r3, [r7, #4]
 8000a6e:	b2db      	uxtb	r3, r3
 8000a70:	4618      	mov	r0, r3
 8000a72:	f7ff ffa5 	bl	80009c0 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 8000a76:	883b      	ldrh	r3, [r7, #0]
 8000a78:	0a1b      	lsrs	r3, r3, #8
 8000a7a:	b29b      	uxth	r3, r3
 8000a7c:	b2db      	uxtb	r3, r3
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f7ff ff9e 	bl	80009c0 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 8000a84:	883b      	ldrh	r3, [r7, #0]
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f7ff ff99 	bl	80009c0 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 8000a8e:	202c      	movs	r0, #44	; 0x2c
 8000a90:	f7ff ff74 	bl	800097c <ILI9341_Write_Command>
}
 8000a94:	bf00      	nop
 8000a96:	370c      	adds	r7, #12
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd90      	pop	{r4, r7, pc}

08000a9c <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000aa6:	480b      	ldr	r0, [pc, #44]	; (8000ad4 <ILI9341_Reset+0x38>)
 8000aa8:	f003 fbbe 	bl	8004228 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8000aac:	20c8      	movs	r0, #200	; 0xc8
 8000aae:	f002 fc19 	bl	80032e4 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ab8:	4806      	ldr	r0, [pc, #24]	; (8000ad4 <ILI9341_Reset+0x38>)
 8000aba:	f003 fbb5 	bl	8004228 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8000abe:	20c8      	movs	r0, #200	; 0xc8
 8000ac0:	f002 fc10 	bl	80032e4 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000aca:	4802      	ldr	r0, [pc, #8]	; (8000ad4 <ILI9341_Reset+0x38>)
 8000acc:	f003 fbac 	bl	8004228 <HAL_GPIO_WritePin>
}
 8000ad0:	bf00      	nop
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	40020800 	.word	0x40020800

08000ad8 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4603      	mov	r3, r0
 8000ae0:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 8000ae2:	79fb      	ldrb	r3, [r7, #7]
 8000ae4:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 8000ae6:	2036      	movs	r0, #54	; 0x36
 8000ae8:	f7ff ff48 	bl	800097c <ILI9341_Write_Command>
HAL_Delay(1);
 8000aec:	2001      	movs	r0, #1
 8000aee:	f002 fbf9 	bl	80032e4 <HAL_Delay>
	
switch(screen_rotation) 
 8000af2:	7bfb      	ldrb	r3, [r7, #15]
 8000af4:	2b03      	cmp	r3, #3
 8000af6:	d837      	bhi.n	8000b68 <ILI9341_Set_Rotation+0x90>
 8000af8:	a201      	add	r2, pc, #4	; (adr r2, 8000b00 <ILI9341_Set_Rotation+0x28>)
 8000afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000afe:	bf00      	nop
 8000b00:	08000b11 	.word	0x08000b11
 8000b04:	08000b27 	.word	0x08000b27
 8000b08:	08000b3d 	.word	0x08000b3d
 8000b0c:	08000b53 	.word	0x08000b53
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8000b10:	2048      	movs	r0, #72	; 0x48
 8000b12:	f7ff ff55 	bl	80009c0 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 8000b16:	4b17      	ldr	r3, [pc, #92]	; (8000b74 <ILI9341_Set_Rotation+0x9c>)
 8000b18:	22f0      	movs	r2, #240	; 0xf0
 8000b1a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8000b1c:	4b16      	ldr	r3, [pc, #88]	; (8000b78 <ILI9341_Set_Rotation+0xa0>)
 8000b1e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000b22:	801a      	strh	r2, [r3, #0]
			break;
 8000b24:	e021      	b.n	8000b6a <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 8000b26:	2028      	movs	r0, #40	; 0x28
 8000b28:	f7ff ff4a 	bl	80009c0 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8000b2c:	4b11      	ldr	r3, [pc, #68]	; (8000b74 <ILI9341_Set_Rotation+0x9c>)
 8000b2e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000b32:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8000b34:	4b10      	ldr	r3, [pc, #64]	; (8000b78 <ILI9341_Set_Rotation+0xa0>)
 8000b36:	22f0      	movs	r2, #240	; 0xf0
 8000b38:	801a      	strh	r2, [r3, #0]
			break;
 8000b3a:	e016      	b.n	8000b6a <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8000b3c:	2088      	movs	r0, #136	; 0x88
 8000b3e:	f7ff ff3f 	bl	80009c0 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8000b42:	4b0c      	ldr	r3, [pc, #48]	; (8000b74 <ILI9341_Set_Rotation+0x9c>)
 8000b44:	22f0      	movs	r2, #240	; 0xf0
 8000b46:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8000b48:	4b0b      	ldr	r3, [pc, #44]	; (8000b78 <ILI9341_Set_Rotation+0xa0>)
 8000b4a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000b4e:	801a      	strh	r2, [r3, #0]
			break;
 8000b50:	e00b      	b.n	8000b6a <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8000b52:	20e8      	movs	r0, #232	; 0xe8
 8000b54:	f7ff ff34 	bl	80009c0 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8000b58:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <ILI9341_Set_Rotation+0x9c>)
 8000b5a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000b5e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8000b60:	4b05      	ldr	r3, [pc, #20]	; (8000b78 <ILI9341_Set_Rotation+0xa0>)
 8000b62:	22f0      	movs	r2, #240	; 0xf0
 8000b64:	801a      	strh	r2, [r3, #0]
			break;
 8000b66:	e000      	b.n	8000b6a <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8000b68:	bf00      	nop
	}
}
 8000b6a:	bf00      	nop
 8000b6c:	3710      	adds	r7, #16
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	20000002 	.word	0x20000002
 8000b78:	20000000 	.word	0x20000000

08000b7c <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8000b80:	2201      	movs	r2, #1
 8000b82:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b86:	4802      	ldr	r0, [pc, #8]	; (8000b90 <ILI9341_Enable+0x14>)
 8000b88:	f003 fb4e 	bl	8004228 <HAL_GPIO_WritePin>
}
 8000b8c:	bf00      	nop
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	40020800 	.word	0x40020800

08000b94 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0

ILI9341_Enable();
 8000b98:	f7ff fff0 	bl	8000b7c <ILI9341_Enable>
ILI9341_SPI_Init();
 8000b9c:	f7ff fecc 	bl	8000938 <ILI9341_SPI_Init>
ILI9341_Reset();
 8000ba0:	f7ff ff7c 	bl	8000a9c <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 8000ba4:	2001      	movs	r0, #1
 8000ba6:	f7ff fee9 	bl	800097c <ILI9341_Write_Command>
HAL_Delay(1000);
 8000baa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bae:	f002 fb99 	bl	80032e4 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 8000bb2:	20cb      	movs	r0, #203	; 0xcb
 8000bb4:	f7ff fee2 	bl	800097c <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 8000bb8:	2039      	movs	r0, #57	; 0x39
 8000bba:	f7ff ff01 	bl	80009c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 8000bbe:	202c      	movs	r0, #44	; 0x2c
 8000bc0:	f7ff fefe 	bl	80009c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000bc4:	2000      	movs	r0, #0
 8000bc6:	f7ff fefb 	bl	80009c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 8000bca:	2034      	movs	r0, #52	; 0x34
 8000bcc:	f7ff fef8 	bl	80009c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 8000bd0:	2002      	movs	r0, #2
 8000bd2:	f7ff fef5 	bl	80009c0 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 8000bd6:	20cf      	movs	r0, #207	; 0xcf
 8000bd8:	f7ff fed0 	bl	800097c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000bdc:	2000      	movs	r0, #0
 8000bde:	f7ff feef 	bl	80009c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8000be2:	20c1      	movs	r0, #193	; 0xc1
 8000be4:	f7ff feec 	bl	80009c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 8000be8:	2030      	movs	r0, #48	; 0x30
 8000bea:	f7ff fee9 	bl	80009c0 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 8000bee:	20e8      	movs	r0, #232	; 0xe8
 8000bf0:	f7ff fec4 	bl	800097c <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 8000bf4:	2085      	movs	r0, #133	; 0x85
 8000bf6:	f7ff fee3 	bl	80009c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000bfa:	2000      	movs	r0, #0
 8000bfc:	f7ff fee0 	bl	80009c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 8000c00:	2078      	movs	r0, #120	; 0x78
 8000c02:	f7ff fedd 	bl	80009c0 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 8000c06:	20ea      	movs	r0, #234	; 0xea
 8000c08:	f7ff feb8 	bl	800097c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000c0c:	2000      	movs	r0, #0
 8000c0e:	f7ff fed7 	bl	80009c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000c12:	2000      	movs	r0, #0
 8000c14:	f7ff fed4 	bl	80009c0 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 8000c18:	20ed      	movs	r0, #237	; 0xed
 8000c1a:	f7ff feaf 	bl	800097c <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 8000c1e:	2064      	movs	r0, #100	; 0x64
 8000c20:	f7ff fece 	bl	80009c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8000c24:	2003      	movs	r0, #3
 8000c26:	f7ff fecb 	bl	80009c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 8000c2a:	2012      	movs	r0, #18
 8000c2c:	f7ff fec8 	bl	80009c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8000c30:	2081      	movs	r0, #129	; 0x81
 8000c32:	f7ff fec5 	bl	80009c0 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 8000c36:	20f7      	movs	r0, #247	; 0xf7
 8000c38:	f7ff fea0 	bl	800097c <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8000c3c:	2020      	movs	r0, #32
 8000c3e:	f7ff febf 	bl	80009c0 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 8000c42:	20c0      	movs	r0, #192	; 0xc0
 8000c44:	f7ff fe9a 	bl	800097c <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8000c48:	2023      	movs	r0, #35	; 0x23
 8000c4a:	f7ff feb9 	bl	80009c0 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 8000c4e:	20c1      	movs	r0, #193	; 0xc1
 8000c50:	f7ff fe94 	bl	800097c <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8000c54:	2010      	movs	r0, #16
 8000c56:	f7ff feb3 	bl	80009c0 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 8000c5a:	20c5      	movs	r0, #197	; 0xc5
 8000c5c:	f7ff fe8e 	bl	800097c <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8000c60:	203e      	movs	r0, #62	; 0x3e
 8000c62:	f7ff fead 	bl	80009c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 8000c66:	2028      	movs	r0, #40	; 0x28
 8000c68:	f7ff feaa 	bl	80009c0 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8000c6c:	20c7      	movs	r0, #199	; 0xc7
 8000c6e:	f7ff fe85 	bl	800097c <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 8000c72:	2086      	movs	r0, #134	; 0x86
 8000c74:	f7ff fea4 	bl	80009c0 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 8000c78:	2036      	movs	r0, #54	; 0x36
 8000c7a:	f7ff fe7f 	bl	800097c <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 8000c7e:	2048      	movs	r0, #72	; 0x48
 8000c80:	f7ff fe9e 	bl	80009c0 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8000c84:	203a      	movs	r0, #58	; 0x3a
 8000c86:	f7ff fe79 	bl	800097c <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 8000c8a:	2055      	movs	r0, #85	; 0x55
 8000c8c:	f7ff fe98 	bl	80009c0 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 8000c90:	20b1      	movs	r0, #177	; 0xb1
 8000c92:	f7ff fe73 	bl	800097c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000c96:	2000      	movs	r0, #0
 8000c98:	f7ff fe92 	bl	80009c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8000c9c:	2018      	movs	r0, #24
 8000c9e:	f7ff fe8f 	bl	80009c0 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 8000ca2:	20b6      	movs	r0, #182	; 0xb6
 8000ca4:	f7ff fe6a 	bl	800097c <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 8000ca8:	2008      	movs	r0, #8
 8000caa:	f7ff fe89 	bl	80009c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 8000cae:	2082      	movs	r0, #130	; 0x82
 8000cb0:	f7ff fe86 	bl	80009c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 8000cb4:	2027      	movs	r0, #39	; 0x27
 8000cb6:	f7ff fe83 	bl	80009c0 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 8000cba:	20f2      	movs	r0, #242	; 0xf2
 8000cbc:	f7ff fe5e 	bl	800097c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	f7ff fe7d 	bl	80009c0 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 8000cc6:	2026      	movs	r0, #38	; 0x26
 8000cc8:	f7ff fe58 	bl	800097c <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 8000ccc:	2001      	movs	r0, #1
 8000cce:	f7ff fe77 	bl	80009c0 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 8000cd2:	20e0      	movs	r0, #224	; 0xe0
 8000cd4:	f7ff fe52 	bl	800097c <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 8000cd8:	200f      	movs	r0, #15
 8000cda:	f7ff fe71 	bl	80009c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8000cde:	2031      	movs	r0, #49	; 0x31
 8000ce0:	f7ff fe6e 	bl	80009c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 8000ce4:	202b      	movs	r0, #43	; 0x2b
 8000ce6:	f7ff fe6b 	bl	80009c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8000cea:	200c      	movs	r0, #12
 8000cec:	f7ff fe68 	bl	80009c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8000cf0:	200e      	movs	r0, #14
 8000cf2:	f7ff fe65 	bl	80009c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8000cf6:	2008      	movs	r0, #8
 8000cf8:	f7ff fe62 	bl	80009c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 8000cfc:	204e      	movs	r0, #78	; 0x4e
 8000cfe:	f7ff fe5f 	bl	80009c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 8000d02:	20f1      	movs	r0, #241	; 0xf1
 8000d04:	f7ff fe5c 	bl	80009c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 8000d08:	2037      	movs	r0, #55	; 0x37
 8000d0a:	f7ff fe59 	bl	80009c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8000d0e:	2007      	movs	r0, #7
 8000d10:	f7ff fe56 	bl	80009c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8000d14:	2010      	movs	r0, #16
 8000d16:	f7ff fe53 	bl	80009c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8000d1a:	2003      	movs	r0, #3
 8000d1c:	f7ff fe50 	bl	80009c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8000d20:	200e      	movs	r0, #14
 8000d22:	f7ff fe4d 	bl	80009c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 8000d26:	2009      	movs	r0, #9
 8000d28:	f7ff fe4a 	bl	80009c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000d2c:	2000      	movs	r0, #0
 8000d2e:	f7ff fe47 	bl	80009c0 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 8000d32:	20e1      	movs	r0, #225	; 0xe1
 8000d34:	f7ff fe22 	bl	800097c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000d38:	2000      	movs	r0, #0
 8000d3a:	f7ff fe41 	bl	80009c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8000d3e:	200e      	movs	r0, #14
 8000d40:	f7ff fe3e 	bl	80009c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8000d44:	2014      	movs	r0, #20
 8000d46:	f7ff fe3b 	bl	80009c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8000d4a:	2003      	movs	r0, #3
 8000d4c:	f7ff fe38 	bl	80009c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8000d50:	2011      	movs	r0, #17
 8000d52:	f7ff fe35 	bl	80009c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8000d56:	2007      	movs	r0, #7
 8000d58:	f7ff fe32 	bl	80009c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8000d5c:	2031      	movs	r0, #49	; 0x31
 8000d5e:	f7ff fe2f 	bl	80009c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8000d62:	20c1      	movs	r0, #193	; 0xc1
 8000d64:	f7ff fe2c 	bl	80009c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8000d68:	2048      	movs	r0, #72	; 0x48
 8000d6a:	f7ff fe29 	bl	80009c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8000d6e:	2008      	movs	r0, #8
 8000d70:	f7ff fe26 	bl	80009c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8000d74:	200f      	movs	r0, #15
 8000d76:	f7ff fe23 	bl	80009c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8000d7a:	200c      	movs	r0, #12
 8000d7c:	f7ff fe20 	bl	80009c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8000d80:	2031      	movs	r0, #49	; 0x31
 8000d82:	f7ff fe1d 	bl	80009c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 8000d86:	2036      	movs	r0, #54	; 0x36
 8000d88:	f7ff fe1a 	bl	80009c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8000d8c:	200f      	movs	r0, #15
 8000d8e:	f7ff fe17 	bl	80009c0 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 8000d92:	2011      	movs	r0, #17
 8000d94:	f7ff fdf2 	bl	800097c <ILI9341_Write_Command>
HAL_Delay(120);
 8000d98:	2078      	movs	r0, #120	; 0x78
 8000d9a:	f002 faa3 	bl	80032e4 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 8000d9e:	2029      	movs	r0, #41	; 0x29
 8000da0:	f7ff fdec 	bl	800097c <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8000da4:	2000      	movs	r0, #0
 8000da6:	f7ff fe97 	bl	8000ad8 <ILI9341_Set_Rotation>
}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
	...

08000db0 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8000db0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000db4:	b08d      	sub	sp, #52	; 0x34
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	4603      	mov	r3, r0
 8000dba:	6039      	str	r1, [r7, #0]
 8000dbc:	80fb      	strh	r3, [r7, #6]
 8000dbe:	466b      	mov	r3, sp
 8000dc0:	461e      	mov	r6, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	627b      	str	r3, [r7, #36]	; 0x24
if((Size*2) < BURST_MAX_SIZE)
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000dce:	d202      	bcs.n	8000dd6 <ILI9341_Draw_Colour_Burst+0x26>
{
	Buffer_Size = Size;
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	627b      	str	r3, [r7, #36]	; 0x24
 8000dd4:	e002      	b.n	8000ddc <ILI9341_Draw_Colour_Burst+0x2c>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 8000dd6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000dda:	627b      	str	r3, [r7, #36]	; 0x24
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8000ddc:	2201      	movs	r2, #1
 8000dde:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000de2:	4840      	ldr	r0, [pc, #256]	; (8000ee4 <ILI9341_Draw_Colour_Burst+0x134>)
 8000de4:	f003 fa20 	bl	8004228 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000de8:	2200      	movs	r2, #0
 8000dea:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dee:	483d      	ldr	r0, [pc, #244]	; (8000ee4 <ILI9341_Draw_Colour_Burst+0x134>)
 8000df0:	f003 fa1a 	bl	8004228 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 8000df4:	88fb      	ldrh	r3, [r7, #6]
 8000df6:	0a1b      	lsrs	r3, r3, #8
 8000df8:	b29b      	uxth	r3, r3
 8000dfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 8000dfe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000e00:	460b      	mov	r3, r1
 8000e02:	3b01      	subs	r3, #1
 8000e04:	61fb      	str	r3, [r7, #28]
 8000e06:	2300      	movs	r3, #0
 8000e08:	4688      	mov	r8, r1
 8000e0a:	4699      	mov	r9, r3
 8000e0c:	f04f 0200 	mov.w	r2, #0
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000e18:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000e1c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000e20:	2300      	movs	r3, #0
 8000e22:	460c      	mov	r4, r1
 8000e24:	461d      	mov	r5, r3
 8000e26:	f04f 0200 	mov.w	r2, #0
 8000e2a:	f04f 0300 	mov.w	r3, #0
 8000e2e:	00eb      	lsls	r3, r5, #3
 8000e30:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000e34:	00e2      	lsls	r2, r4, #3
 8000e36:	1dcb      	adds	r3, r1, #7
 8000e38:	08db      	lsrs	r3, r3, #3
 8000e3a:	00db      	lsls	r3, r3, #3
 8000e3c:	ebad 0d03 	sub.w	sp, sp, r3
 8000e40:	466b      	mov	r3, sp
 8000e42:	3300      	adds	r3, #0
 8000e44:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8000e46:	2300      	movs	r3, #0
 8000e48:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e4a:	e00e      	b.n	8000e6a <ILI9341_Draw_Colour_Burst+0xba>
	{
		burst_buffer[j] = 	chifted;
 8000e4c:	69ba      	ldr	r2, [r7, #24]
 8000e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e50:	4413      	add	r3, r2
 8000e52:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000e56:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 8000e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	88fa      	ldrh	r2, [r7, #6]
 8000e5e:	b2d1      	uxtb	r1, r2
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8000e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e66:	3302      	adds	r3, #2
 8000e68:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d3ec      	bcc.n	8000e4c <ILI9341_Draw_Colour_Burst+0x9c>
	}

uint32_t Sending_Size = Size*2;
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	005b      	lsls	r3, r3, #1
 8000e76:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 8000e78:	697a      	ldr	r2, [r7, #20]
 8000e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e80:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e86:	fbb3 f2f2 	udiv	r2, r3, r2
 8000e8a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000e8c:	fb01 f202 	mul.w	r2, r1, r2
 8000e90:	1a9b      	subs	r3, r3, r2
 8000e92:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 8000e94:	693b      	ldr	r3, [r7, #16]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d010      	beq.n	8000ebc <ILI9341_Draw_Colour_Burst+0x10c>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e9e:	e009      	b.n	8000eb4 <ILI9341_Draw_Colour_Burst+0x104>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 8000ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea2:	b29a      	uxth	r2, r3
 8000ea4:	230a      	movs	r3, #10
 8000ea6:	69b9      	ldr	r1, [r7, #24]
 8000ea8:	480f      	ldr	r0, [pc, #60]	; (8000ee8 <ILI9341_Draw_Colour_Burst+0x138>)
 8000eaa:	f003 ff70 	bl	8004d8e <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8000eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000eb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d3f1      	bcc.n	8000ea0 <ILI9341_Draw_Colour_Burst+0xf0>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	b29a      	uxth	r2, r3
 8000ec0:	230a      	movs	r3, #10
 8000ec2:	69b9      	ldr	r1, [r7, #24]
 8000ec4:	4808      	ldr	r0, [pc, #32]	; (8000ee8 <ILI9341_Draw_Colour_Burst+0x138>)
 8000ec6:	f003 ff62 	bl	8004d8e <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000eca:	2201      	movs	r2, #1
 8000ecc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ed0:	4804      	ldr	r0, [pc, #16]	; (8000ee4 <ILI9341_Draw_Colour_Burst+0x134>)
 8000ed2:	f003 f9a9 	bl	8004228 <HAL_GPIO_WritePin>
 8000ed6:	46b5      	mov	sp, r6
}
 8000ed8:	bf00      	nop
 8000eda:	3734      	adds	r7, #52	; 0x34
 8000edc:	46bd      	mov	sp, r7
 8000ede:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40020800 	.word	0x40020800
 8000ee8:	200000ec 	.word	0x200000ec

08000eec <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 8000ef6:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <ILI9341_Fill_Screen+0x44>)
 8000ef8:	881b      	ldrh	r3, [r3, #0]
 8000efa:	b29a      	uxth	r2, r3
 8000efc:	4b0d      	ldr	r3, [pc, #52]	; (8000f34 <ILI9341_Fill_Screen+0x48>)
 8000efe:	881b      	ldrh	r3, [r3, #0]
 8000f00:	b29b      	uxth	r3, r3
 8000f02:	2100      	movs	r1, #0
 8000f04:	2000      	movs	r0, #0
 8000f06:	f7ff fd7d 	bl	8000a04 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 8000f0a:	4b09      	ldr	r3, [pc, #36]	; (8000f30 <ILI9341_Fill_Screen+0x44>)
 8000f0c:	881b      	ldrh	r3, [r3, #0]
 8000f0e:	b29b      	uxth	r3, r3
 8000f10:	461a      	mov	r2, r3
 8000f12:	4b08      	ldr	r3, [pc, #32]	; (8000f34 <ILI9341_Fill_Screen+0x48>)
 8000f14:	881b      	ldrh	r3, [r3, #0]
 8000f16:	b29b      	uxth	r3, r3
 8000f18:	fb02 f303 	mul.w	r3, r2, r3
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	88fb      	ldrh	r3, [r7, #6]
 8000f20:	4611      	mov	r1, r2
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff ff44 	bl	8000db0 <ILI9341_Draw_Colour_Burst>
}
 8000f28:	bf00      	nop
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	20000002 	.word	0x20000002
 8000f34:	20000000 	.word	0x20000000

08000f38 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	80fb      	strh	r3, [r7, #6]
 8000f42:	460b      	mov	r3, r1
 8000f44:	80bb      	strh	r3, [r7, #4]
 8000f46:	4613      	mov	r3, r2
 8000f48:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8000f4a:	4b64      	ldr	r3, [pc, #400]	; (80010dc <ILI9341_Draw_Pixel+0x1a4>)
 8000f4c:	881b      	ldrh	r3, [r3, #0]
 8000f4e:	b29b      	uxth	r3, r3
 8000f50:	88fa      	ldrh	r2, [r7, #6]
 8000f52:	429a      	cmp	r2, r3
 8000f54:	f080 80be 	bcs.w	80010d4 <ILI9341_Draw_Pixel+0x19c>
 8000f58:	4b61      	ldr	r3, [pc, #388]	; (80010e0 <ILI9341_Draw_Pixel+0x1a8>)
 8000f5a:	881b      	ldrh	r3, [r3, #0]
 8000f5c:	b29b      	uxth	r3, r3
 8000f5e:	88ba      	ldrh	r2, [r7, #4]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	f080 80b7 	bcs.w	80010d4 <ILI9341_Draw_Pixel+0x19c>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8000f66:	2200      	movs	r2, #0
 8000f68:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f6c:	485d      	ldr	r0, [pc, #372]	; (80010e4 <ILI9341_Draw_Pixel+0x1ac>)
 8000f6e:	f003 f95b 	bl	8004228 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000f72:	2200      	movs	r2, #0
 8000f74:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f78:	485a      	ldr	r0, [pc, #360]	; (80010e4 <ILI9341_Draw_Pixel+0x1ac>)
 8000f7a:	f003 f955 	bl	8004228 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 8000f7e:	202a      	movs	r0, #42	; 0x2a
 8000f80:	f7ff fcea 	bl	8000958 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8000f84:	2201      	movs	r2, #1
 8000f86:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f8a:	4856      	ldr	r0, [pc, #344]	; (80010e4 <ILI9341_Draw_Pixel+0x1ac>)
 8000f8c:	f003 f94c 	bl	8004228 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8000f90:	2201      	movs	r2, #1
 8000f92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f96:	4853      	ldr	r0, [pc, #332]	; (80010e4 <ILI9341_Draw_Pixel+0x1ac>)
 8000f98:	f003 f946 	bl	8004228 <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fa2:	4850      	ldr	r0, [pc, #320]	; (80010e4 <ILI9341_Draw_Pixel+0x1ac>)
 8000fa4:	f003 f940 	bl	8004228 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8000fa8:	88fb      	ldrh	r3, [r7, #6]
 8000faa:	0a1b      	lsrs	r3, r3, #8
 8000fac:	b29b      	uxth	r3, r3
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	753b      	strb	r3, [r7, #20]
 8000fb2:	88fb      	ldrh	r3, [r7, #6]
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	757b      	strb	r3, [r7, #21]
 8000fb8:	88fb      	ldrh	r3, [r7, #6]
 8000fba:	3301      	adds	r3, #1
 8000fbc:	121b      	asrs	r3, r3, #8
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	75bb      	strb	r3, [r7, #22]
 8000fc2:	88fb      	ldrh	r3, [r7, #6]
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8000fcc:	f107 0114 	add.w	r1, r7, #20
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	2204      	movs	r2, #4
 8000fd4:	4844      	ldr	r0, [pc, #272]	; (80010e8 <ILI9341_Draw_Pixel+0x1b0>)
 8000fd6:	f003 feda 	bl	8004d8e <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000fda:	2201      	movs	r2, #1
 8000fdc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fe0:	4840      	ldr	r0, [pc, #256]	; (80010e4 <ILI9341_Draw_Pixel+0x1ac>)
 8000fe2:	f003 f921 	bl	8004228 <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fec:	483d      	ldr	r0, [pc, #244]	; (80010e4 <ILI9341_Draw_Pixel+0x1ac>)
 8000fee:	f003 f91b 	bl	8004228 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ff8:	483a      	ldr	r0, [pc, #232]	; (80010e4 <ILI9341_Draw_Pixel+0x1ac>)
 8000ffa:	f003 f915 	bl	8004228 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 8000ffe:	202b      	movs	r0, #43	; 0x2b
 8001000:	f7ff fcaa 	bl	8000958 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8001004:	2201      	movs	r2, #1
 8001006:	f44f 7100 	mov.w	r1, #512	; 0x200
 800100a:	4836      	ldr	r0, [pc, #216]	; (80010e4 <ILI9341_Draw_Pixel+0x1ac>)
 800100c:	f003 f90c 	bl	8004228 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8001010:	2201      	movs	r2, #1
 8001012:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001016:	4833      	ldr	r0, [pc, #204]	; (80010e4 <ILI9341_Draw_Pixel+0x1ac>)
 8001018:	f003 f906 	bl	8004228 <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800101c:	2200      	movs	r2, #0
 800101e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001022:	4830      	ldr	r0, [pc, #192]	; (80010e4 <ILI9341_Draw_Pixel+0x1ac>)
 8001024:	f003 f900 	bl	8004228 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8001028:	88bb      	ldrh	r3, [r7, #4]
 800102a:	0a1b      	lsrs	r3, r3, #8
 800102c:	b29b      	uxth	r3, r3
 800102e:	b2db      	uxtb	r3, r3
 8001030:	743b      	strb	r3, [r7, #16]
 8001032:	88bb      	ldrh	r3, [r7, #4]
 8001034:	b2db      	uxtb	r3, r3
 8001036:	747b      	strb	r3, [r7, #17]
 8001038:	88bb      	ldrh	r3, [r7, #4]
 800103a:	3301      	adds	r3, #1
 800103c:	121b      	asrs	r3, r3, #8
 800103e:	b2db      	uxtb	r3, r3
 8001040:	74bb      	strb	r3, [r7, #18]
 8001042:	88bb      	ldrh	r3, [r7, #4]
 8001044:	b2db      	uxtb	r3, r3
 8001046:	3301      	adds	r3, #1
 8001048:	b2db      	uxtb	r3, r3
 800104a:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 800104c:	f107 0110 	add.w	r1, r7, #16
 8001050:	2301      	movs	r3, #1
 8001052:	2204      	movs	r2, #4
 8001054:	4824      	ldr	r0, [pc, #144]	; (80010e8 <ILI9341_Draw_Pixel+0x1b0>)
 8001056:	f003 fe9a 	bl	8004d8e <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800105a:	2201      	movs	r2, #1
 800105c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001060:	4820      	ldr	r0, [pc, #128]	; (80010e4 <ILI9341_Draw_Pixel+0x1ac>)
 8001062:	f003 f8e1 	bl	8004228 <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8001066:	2200      	movs	r2, #0
 8001068:	f44f 7100 	mov.w	r1, #512	; 0x200
 800106c:	481d      	ldr	r0, [pc, #116]	; (80010e4 <ILI9341_Draw_Pixel+0x1ac>)
 800106e:	f003 f8db 	bl	8004228 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8001072:	2200      	movs	r2, #0
 8001074:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001078:	481a      	ldr	r0, [pc, #104]	; (80010e4 <ILI9341_Draw_Pixel+0x1ac>)
 800107a:	f003 f8d5 	bl	8004228 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 800107e:	202c      	movs	r0, #44	; 0x2c
 8001080:	f7ff fc6a 	bl	8000958 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8001084:	2201      	movs	r2, #1
 8001086:	f44f 7100 	mov.w	r1, #512	; 0x200
 800108a:	4816      	ldr	r0, [pc, #88]	; (80010e4 <ILI9341_Draw_Pixel+0x1ac>)
 800108c:	f003 f8cc 	bl	8004228 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8001090:	2201      	movs	r2, #1
 8001092:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001096:	4813      	ldr	r0, [pc, #76]	; (80010e4 <ILI9341_Draw_Pixel+0x1ac>)
 8001098:	f003 f8c6 	bl	8004228 <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800109c:	2200      	movs	r2, #0
 800109e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010a2:	4810      	ldr	r0, [pc, #64]	; (80010e4 <ILI9341_Draw_Pixel+0x1ac>)
 80010a4:	f003 f8c0 	bl	8004228 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 80010a8:	887b      	ldrh	r3, [r7, #2]
 80010aa:	0a1b      	lsrs	r3, r3, #8
 80010ac:	b29b      	uxth	r3, r3
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	733b      	strb	r3, [r7, #12]
 80010b2:	887b      	ldrh	r3, [r7, #2]
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 80010b8:	f107 010c 	add.w	r1, r7, #12
 80010bc:	2301      	movs	r3, #1
 80010be:	2202      	movs	r2, #2
 80010c0:	4809      	ldr	r0, [pc, #36]	; (80010e8 <ILI9341_Draw_Pixel+0x1b0>)
 80010c2:	f003 fe64 	bl	8004d8e <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80010c6:	2201      	movs	r2, #1
 80010c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010cc:	4805      	ldr	r0, [pc, #20]	; (80010e4 <ILI9341_Draw_Pixel+0x1ac>)
 80010ce:	f003 f8ab 	bl	8004228 <HAL_GPIO_WritePin>
 80010d2:	e000      	b.n	80010d6 <ILI9341_Draw_Pixel+0x19e>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 80010d4:	bf00      	nop
	
}
 80010d6:	3718      	adds	r7, #24
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	20000002 	.word	0x20000002
 80010e0:	20000000 	.word	0x20000000
 80010e4:	40020800 	.word	0x40020800
 80010e8:	200000ec 	.word	0x200000ec

080010ec <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 80010ec:	b590      	push	{r4, r7, lr}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4604      	mov	r4, r0
 80010f4:	4608      	mov	r0, r1
 80010f6:	4611      	mov	r1, r2
 80010f8:	461a      	mov	r2, r3
 80010fa:	4623      	mov	r3, r4
 80010fc:	80fb      	strh	r3, [r7, #6]
 80010fe:	4603      	mov	r3, r0
 8001100:	80bb      	strh	r3, [r7, #4]
 8001102:	460b      	mov	r3, r1
 8001104:	807b      	strh	r3, [r7, #2]
 8001106:	4613      	mov	r3, r2
 8001108:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 800110a:	4b24      	ldr	r3, [pc, #144]	; (800119c <ILI9341_Draw_Rectangle+0xb0>)
 800110c:	881b      	ldrh	r3, [r3, #0]
 800110e:	b29b      	uxth	r3, r3
 8001110:	88fa      	ldrh	r2, [r7, #6]
 8001112:	429a      	cmp	r2, r3
 8001114:	d23d      	bcs.n	8001192 <ILI9341_Draw_Rectangle+0xa6>
 8001116:	4b22      	ldr	r3, [pc, #136]	; (80011a0 <ILI9341_Draw_Rectangle+0xb4>)
 8001118:	881b      	ldrh	r3, [r3, #0]
 800111a:	b29b      	uxth	r3, r3
 800111c:	88ba      	ldrh	r2, [r7, #4]
 800111e:	429a      	cmp	r2, r3
 8001120:	d237      	bcs.n	8001192 <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 8001122:	88fa      	ldrh	r2, [r7, #6]
 8001124:	887b      	ldrh	r3, [r7, #2]
 8001126:	4413      	add	r3, r2
 8001128:	4a1c      	ldr	r2, [pc, #112]	; (800119c <ILI9341_Draw_Rectangle+0xb0>)
 800112a:	8812      	ldrh	r2, [r2, #0]
 800112c:	b292      	uxth	r2, r2
 800112e:	4293      	cmp	r3, r2
 8001130:	dd05      	ble.n	800113e <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 8001132:	4b1a      	ldr	r3, [pc, #104]	; (800119c <ILI9341_Draw_Rectangle+0xb0>)
 8001134:	881b      	ldrh	r3, [r3, #0]
 8001136:	b29a      	uxth	r2, r3
 8001138:	88fb      	ldrh	r3, [r7, #6]
 800113a:	1ad3      	subs	r3, r2, r3
 800113c:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 800113e:	88ba      	ldrh	r2, [r7, #4]
 8001140:	883b      	ldrh	r3, [r7, #0]
 8001142:	4413      	add	r3, r2
 8001144:	4a16      	ldr	r2, [pc, #88]	; (80011a0 <ILI9341_Draw_Rectangle+0xb4>)
 8001146:	8812      	ldrh	r2, [r2, #0]
 8001148:	b292      	uxth	r2, r2
 800114a:	4293      	cmp	r3, r2
 800114c:	dd05      	ble.n	800115a <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 800114e:	4b14      	ldr	r3, [pc, #80]	; (80011a0 <ILI9341_Draw_Rectangle+0xb4>)
 8001150:	881b      	ldrh	r3, [r3, #0]
 8001152:	b29a      	uxth	r2, r3
 8001154:	88bb      	ldrh	r3, [r7, #4]
 8001156:	1ad3      	subs	r3, r2, r3
 8001158:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 800115a:	88fa      	ldrh	r2, [r7, #6]
 800115c:	887b      	ldrh	r3, [r7, #2]
 800115e:	4413      	add	r3, r2
 8001160:	b29b      	uxth	r3, r3
 8001162:	3b01      	subs	r3, #1
 8001164:	b29c      	uxth	r4, r3
 8001166:	88ba      	ldrh	r2, [r7, #4]
 8001168:	883b      	ldrh	r3, [r7, #0]
 800116a:	4413      	add	r3, r2
 800116c:	b29b      	uxth	r3, r3
 800116e:	3b01      	subs	r3, #1
 8001170:	b29b      	uxth	r3, r3
 8001172:	88b9      	ldrh	r1, [r7, #4]
 8001174:	88f8      	ldrh	r0, [r7, #6]
 8001176:	4622      	mov	r2, r4
 8001178:	f7ff fc44 	bl	8000a04 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 800117c:	883b      	ldrh	r3, [r7, #0]
 800117e:	887a      	ldrh	r2, [r7, #2]
 8001180:	fb02 f303 	mul.w	r3, r2, r3
 8001184:	461a      	mov	r2, r3
 8001186:	8b3b      	ldrh	r3, [r7, #24]
 8001188:	4611      	mov	r1, r2
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff fe10 	bl	8000db0 <ILI9341_Draw_Colour_Burst>
 8001190:	e000      	b.n	8001194 <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8001192:	bf00      	nop
}
 8001194:	370c      	adds	r7, #12
 8001196:	46bd      	mov	sp, r7
 8001198:	bd90      	pop	{r4, r7, pc}
 800119a:	bf00      	nop
 800119c:	20000002 	.word	0x20000002
 80011a0:	20000000 	.word	0x20000000

080011a4 <ILI9341_Draw_Horizontal_Line>:

//DRAW LINE FROM X,Y LOCATION to X+Width,Y LOCATION
void ILI9341_Draw_Horizontal_Line(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Colour)
{
 80011a4:	b590      	push	{r4, r7, lr}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4604      	mov	r4, r0
 80011ac:	4608      	mov	r0, r1
 80011ae:	4611      	mov	r1, r2
 80011b0:	461a      	mov	r2, r3
 80011b2:	4623      	mov	r3, r4
 80011b4:	80fb      	strh	r3, [r7, #6]
 80011b6:	4603      	mov	r3, r0
 80011b8:	80bb      	strh	r3, [r7, #4]
 80011ba:	460b      	mov	r3, r1
 80011bc:	807b      	strh	r3, [r7, #2]
 80011be:	4613      	mov	r3, r2
 80011c0:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80011c2:	4b18      	ldr	r3, [pc, #96]	; (8001224 <ILI9341_Draw_Horizontal_Line+0x80>)
 80011c4:	881b      	ldrh	r3, [r3, #0]
 80011c6:	b29b      	uxth	r3, r3
 80011c8:	88fa      	ldrh	r2, [r7, #6]
 80011ca:	429a      	cmp	r2, r3
 80011cc:	d225      	bcs.n	800121a <ILI9341_Draw_Horizontal_Line+0x76>
 80011ce:	4b16      	ldr	r3, [pc, #88]	; (8001228 <ILI9341_Draw_Horizontal_Line+0x84>)
 80011d0:	881b      	ldrh	r3, [r3, #0]
 80011d2:	b29b      	uxth	r3, r3
 80011d4:	88ba      	ldrh	r2, [r7, #4]
 80011d6:	429a      	cmp	r2, r3
 80011d8:	d21f      	bcs.n	800121a <ILI9341_Draw_Horizontal_Line+0x76>
if((X+Width-1)>=LCD_WIDTH)
 80011da:	88fa      	ldrh	r2, [r7, #6]
 80011dc:	887b      	ldrh	r3, [r7, #2]
 80011de:	4413      	add	r3, r2
 80011e0:	4a10      	ldr	r2, [pc, #64]	; (8001224 <ILI9341_Draw_Horizontal_Line+0x80>)
 80011e2:	8812      	ldrh	r2, [r2, #0]
 80011e4:	b292      	uxth	r2, r2
 80011e6:	4293      	cmp	r3, r2
 80011e8:	dd05      	ble.n	80011f6 <ILI9341_Draw_Horizontal_Line+0x52>
	{
		Width=LCD_WIDTH-X;
 80011ea:	4b0e      	ldr	r3, [pc, #56]	; (8001224 <ILI9341_Draw_Horizontal_Line+0x80>)
 80011ec:	881b      	ldrh	r3, [r3, #0]
 80011ee:	b29a      	uxth	r2, r3
 80011f0:	88fb      	ldrh	r3, [r7, #6]
 80011f2:	1ad3      	subs	r3, r2, r3
 80011f4:	807b      	strh	r3, [r7, #2]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y);
 80011f6:	88fa      	ldrh	r2, [r7, #6]
 80011f8:	887b      	ldrh	r3, [r7, #2]
 80011fa:	4413      	add	r3, r2
 80011fc:	b29b      	uxth	r3, r3
 80011fe:	3b01      	subs	r3, #1
 8001200:	b29a      	uxth	r2, r3
 8001202:	88bb      	ldrh	r3, [r7, #4]
 8001204:	88b9      	ldrh	r1, [r7, #4]
 8001206:	88f8      	ldrh	r0, [r7, #6]
 8001208:	f7ff fbfc 	bl	8000a04 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Width);
 800120c:	887a      	ldrh	r2, [r7, #2]
 800120e:	883b      	ldrh	r3, [r7, #0]
 8001210:	4611      	mov	r1, r2
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff fdcc 	bl	8000db0 <ILI9341_Draw_Colour_Burst>
 8001218:	e000      	b.n	800121c <ILI9341_Draw_Horizontal_Line+0x78>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 800121a:	bf00      	nop
}
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	bd90      	pop	{r4, r7, pc}
 8001222:	bf00      	nop
 8001224:	20000002 	.word	0x20000002
 8001228:	20000000 	.word	0x20000000

0800122c <ILI9341_Draw_Vertical_Line>:

//DRAW LINE FROM X,Y LOCATION to X,Y+Height LOCATION
void ILI9341_Draw_Vertical_Line(uint16_t X, uint16_t Y, uint16_t Height, uint16_t Colour)
{
 800122c:	b590      	push	{r4, r7, lr}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	4604      	mov	r4, r0
 8001234:	4608      	mov	r0, r1
 8001236:	4611      	mov	r1, r2
 8001238:	461a      	mov	r2, r3
 800123a:	4623      	mov	r3, r4
 800123c:	80fb      	strh	r3, [r7, #6]
 800123e:	4603      	mov	r3, r0
 8001240:	80bb      	strh	r3, [r7, #4]
 8001242:	460b      	mov	r3, r1
 8001244:	807b      	strh	r3, [r7, #2]
 8001246:	4613      	mov	r3, r2
 8001248:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 800124a:	4b18      	ldr	r3, [pc, #96]	; (80012ac <ILI9341_Draw_Vertical_Line+0x80>)
 800124c:	881b      	ldrh	r3, [r3, #0]
 800124e:	b29b      	uxth	r3, r3
 8001250:	88fa      	ldrh	r2, [r7, #6]
 8001252:	429a      	cmp	r2, r3
 8001254:	d225      	bcs.n	80012a2 <ILI9341_Draw_Vertical_Line+0x76>
 8001256:	4b16      	ldr	r3, [pc, #88]	; (80012b0 <ILI9341_Draw_Vertical_Line+0x84>)
 8001258:	881b      	ldrh	r3, [r3, #0]
 800125a:	b29b      	uxth	r3, r3
 800125c:	88ba      	ldrh	r2, [r7, #4]
 800125e:	429a      	cmp	r2, r3
 8001260:	d21f      	bcs.n	80012a2 <ILI9341_Draw_Vertical_Line+0x76>
if((Y+Height-1)>=LCD_HEIGHT)
 8001262:	88ba      	ldrh	r2, [r7, #4]
 8001264:	887b      	ldrh	r3, [r7, #2]
 8001266:	4413      	add	r3, r2
 8001268:	4a11      	ldr	r2, [pc, #68]	; (80012b0 <ILI9341_Draw_Vertical_Line+0x84>)
 800126a:	8812      	ldrh	r2, [r2, #0]
 800126c:	b292      	uxth	r2, r2
 800126e:	4293      	cmp	r3, r2
 8001270:	dd05      	ble.n	800127e <ILI9341_Draw_Vertical_Line+0x52>
	{
		Height=LCD_HEIGHT-Y;
 8001272:	4b0f      	ldr	r3, [pc, #60]	; (80012b0 <ILI9341_Draw_Vertical_Line+0x84>)
 8001274:	881b      	ldrh	r3, [r3, #0]
 8001276:	b29a      	uxth	r2, r3
 8001278:	88bb      	ldrh	r3, [r7, #4]
 800127a:	1ad3      	subs	r3, r2, r3
 800127c:	807b      	strh	r3, [r7, #2]
	}
ILI9341_Set_Address(X, Y, X, Y+Height-1);
 800127e:	88ba      	ldrh	r2, [r7, #4]
 8001280:	887b      	ldrh	r3, [r7, #2]
 8001282:	4413      	add	r3, r2
 8001284:	b29b      	uxth	r3, r3
 8001286:	3b01      	subs	r3, #1
 8001288:	b29b      	uxth	r3, r3
 800128a:	88fa      	ldrh	r2, [r7, #6]
 800128c:	88b9      	ldrh	r1, [r7, #4]
 800128e:	88f8      	ldrh	r0, [r7, #6]
 8001290:	f7ff fbb8 	bl	8000a04 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height);
 8001294:	887a      	ldrh	r2, [r7, #2]
 8001296:	883b      	ldrh	r3, [r7, #0]
 8001298:	4611      	mov	r1, r2
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff fd88 	bl	8000db0 <ILI9341_Draw_Colour_Burst>
 80012a0:	e000      	b.n	80012a4 <ILI9341_Draw_Vertical_Line+0x78>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80012a2:	bf00      	nop
}
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd90      	pop	{r4, r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20000002 	.word	0x20000002
 80012b0:	20000000 	.word	0x20000000

080012b4 <TP_Read>:
#include "ILI9341_Touchscreen.h"
#include "stm32f7xx_hal.h"

//Internal Touchpad command, do not call directly
uint16_t TP_Read(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
    uint8_t i = 16;
 80012ba:	2310      	movs	r3, #16
 80012bc:	71fb      	strb	r3, [r7, #7]
    uint16_t value = 0;
 80012be:	2300      	movs	r3, #0
 80012c0:	80bb      	strh	r3, [r7, #4]

    while(i > 0x00)
 80012c2:	e019      	b.n	80012f8 <TP_Read+0x44>
    {
        value <<= 1;
 80012c4:	88bb      	ldrh	r3, [r7, #4]
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	80bb      	strh	r3, [r7, #4]

				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 80012ca:	2201      	movs	r2, #1
 80012cc:	2108      	movs	r1, #8
 80012ce:	480e      	ldr	r0, [pc, #56]	; (8001308 <TP_Read+0x54>)
 80012d0:	f002 ffaa 	bl	8004228 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);
 80012d4:	2200      	movs	r2, #0
 80012d6:	2108      	movs	r1, #8
 80012d8:	480b      	ldr	r0, [pc, #44]	; (8001308 <TP_Read+0x54>)
 80012da:	f002 ffa5 	bl	8004228 <HAL_GPIO_WritePin>
			
        if(HAL_GPIO_ReadPin(TP_MISO_PORT, TP_MISO_PIN) != 0)
 80012de:	2110      	movs	r1, #16
 80012e0:	4809      	ldr	r0, [pc, #36]	; (8001308 <TP_Read+0x54>)
 80012e2:	f002 ff89 	bl	80041f8 <HAL_GPIO_ReadPin>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d002      	beq.n	80012f2 <TP_Read+0x3e>
        {
            value++;
 80012ec:	88bb      	ldrh	r3, [r7, #4]
 80012ee:	3301      	adds	r3, #1
 80012f0:	80bb      	strh	r3, [r7, #4]
        }

        i--;
 80012f2:	79fb      	ldrb	r3, [r7, #7]
 80012f4:	3b01      	subs	r3, #1
 80012f6:	71fb      	strb	r3, [r7, #7]
    while(i > 0x00)
 80012f8:	79fb      	ldrb	r3, [r7, #7]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d1e2      	bne.n	80012c4 <TP_Read+0x10>
    };

    return value;
 80012fe:	88bb      	ldrh	r3, [r7, #4]
}
 8001300:	4618      	mov	r0, r3
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	40021000 	.word	0x40021000

0800130c <TP_Write>:

//Internal Touchpad command, do not call directly
void TP_Write(uint8_t value)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	71fb      	strb	r3, [r7, #7]
    uint8_t i = 0x08;
 8001316:	2308      	movs	r3, #8
 8001318:	73fb      	strb	r3, [r7, #15]

		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);	
 800131a:	2200      	movs	r2, #0
 800131c:	2108      	movs	r1, #8
 800131e:	4815      	ldr	r0, [pc, #84]	; (8001374 <TP_Write+0x68>)
 8001320:	f002 ff82 	bl	8004228 <HAL_GPIO_WritePin>
	
    while(i > 0)
 8001324:	e01e      	b.n	8001364 <TP_Write+0x58>
    {
        if((value & 0x80) != 0x00)
 8001326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132a:	2b00      	cmp	r3, #0
 800132c:	da05      	bge.n	800133a <TP_Write+0x2e>
        {
						HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_SET);
 800132e:	2201      	movs	r2, #1
 8001330:	2120      	movs	r1, #32
 8001332:	4810      	ldr	r0, [pc, #64]	; (8001374 <TP_Write+0x68>)
 8001334:	f002 ff78 	bl	8004228 <HAL_GPIO_WritePin>
 8001338:	e004      	b.n	8001344 <TP_Write+0x38>
        }
        else
        {
						HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_RESET);
 800133a:	2200      	movs	r2, #0
 800133c:	2120      	movs	r1, #32
 800133e:	480d      	ldr	r0, [pc, #52]	; (8001374 <TP_Write+0x68>)
 8001340:	f002 ff72 	bl	8004228 <HAL_GPIO_WritePin>
        }

        value <<= 1;
 8001344:	79fb      	ldrb	r3, [r7, #7]
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	71fb      	strb	r3, [r7, #7]
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 800134a:	2201      	movs	r2, #1
 800134c:	2108      	movs	r1, #8
 800134e:	4809      	ldr	r0, [pc, #36]	; (8001374 <TP_Write+0x68>)
 8001350:	f002 ff6a 	bl	8004228 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);        
 8001354:	2200      	movs	r2, #0
 8001356:	2108      	movs	r1, #8
 8001358:	4806      	ldr	r0, [pc, #24]	; (8001374 <TP_Write+0x68>)
 800135a:	f002 ff65 	bl	8004228 <HAL_GPIO_WritePin>
        i--;
 800135e:	7bfb      	ldrb	r3, [r7, #15]
 8001360:	3b01      	subs	r3, #1
 8001362:	73fb      	strb	r3, [r7, #15]
    while(i > 0)
 8001364:	7bfb      	ldrb	r3, [r7, #15]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d1dd      	bne.n	8001326 <TP_Write+0x1a>
    };
}
 800136a:	bf00      	nop
 800136c:	bf00      	nop
 800136e:	3710      	adds	r7, #16
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	40021000 	.word	0x40021000

08001378 <TP_Read_Coordinates>:



//Read coordinates of touchscreen press. Position[0] = X, Position[1] = Y
uint8_t TP_Read_Coordinates(uint16_t Coordinates[2])
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b08a      	sub	sp, #40	; 0x28
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);		
 8001380:	2201      	movs	r2, #1
 8001382:	2108      	movs	r1, #8
 8001384:	485a      	ldr	r0, [pc, #360]	; (80014f0 <TP_Read_Coordinates+0x178>)
 8001386:	f002 ff4f 	bl	8004228 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_SET);		
 800138a:	2201      	movs	r2, #1
 800138c:	2120      	movs	r1, #32
 800138e:	4858      	ldr	r0, [pc, #352]	; (80014f0 <TP_Read_Coordinates+0x178>)
 8001390:	f002 ff4a 	bl	8004228 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);		
 8001394:	2201      	movs	r2, #1
 8001396:	2140      	movs	r1, #64	; 0x40
 8001398:	4855      	ldr	r0, [pc, #340]	; (80014f0 <TP_Read_Coordinates+0x178>)
 800139a:	f002 ff45 	bl	8004228 <HAL_GPIO_WritePin>

	
	
    uint32_t avg_x, avg_y = 0;		
 800139e:	2300      	movs	r3, #0
 80013a0:	623b      	str	r3, [r7, #32]
		uint16_t rawx, rawy = 0;	
 80013a2:	2300      	movs	r3, #0
 80013a4:	81fb      	strh	r3, [r7, #14]
		uint32_t calculating_x, calculating_y = 0;
 80013a6:	2300      	movs	r3, #0
 80013a8:	61bb      	str	r3, [r7, #24]
	
    uint32_t samples = NO_OF_POSITION_SAMPLES;
 80013aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ae:	617b      	str	r3, [r7, #20]
    uint32_t counted_samples = 0;
 80013b0:	2300      	movs	r3, #0
 80013b2:	613b      	str	r3, [r7, #16]

		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_RESET);
 80013b4:	2200      	movs	r2, #0
 80013b6:	2140      	movs	r1, #64	; 0x40
 80013b8:	484d      	ldr	r0, [pc, #308]	; (80014f0 <TP_Read_Coordinates+0x178>)
 80013ba:	f002 ff35 	bl	8004228 <HAL_GPIO_WritePin>

	
    while((samples > 0)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 80013be:	e023      	b.n	8001408 <TP_Read_Coordinates+0x90>
    {			
        TP_Write(CMD_RDY);
 80013c0:	2090      	movs	r0, #144	; 0x90
 80013c2:	f7ff ffa3 	bl	800130c <TP_Write>

				rawy = TP_Read();	
 80013c6:	f7ff ff75 	bl	80012b4 <TP_Read>
 80013ca:	4603      	mov	r3, r0
 80013cc:	81fb      	strh	r3, [r7, #14]
				avg_y += rawy;
 80013ce:	89fb      	ldrh	r3, [r7, #14]
 80013d0:	6a3a      	ldr	r2, [r7, #32]
 80013d2:	4413      	add	r3, r2
 80013d4:	623b      	str	r3, [r7, #32]
				calculating_y += rawy;
 80013d6:	89fb      	ldrh	r3, [r7, #14]
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	4413      	add	r3, r2
 80013dc:	61bb      	str	r3, [r7, #24]

				
        TP_Write(CMD_RDX);
 80013de:	20d0      	movs	r0, #208	; 0xd0
 80013e0:	f7ff ff94 	bl	800130c <TP_Write>
        rawx = TP_Read();
 80013e4:	f7ff ff66 	bl	80012b4 <TP_Read>
 80013e8:	4603      	mov	r3, r0
 80013ea:	81bb      	strh	r3, [r7, #12]
				avg_x += rawx;
 80013ec:	89bb      	ldrh	r3, [r7, #12]
 80013ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013f0:	4413      	add	r3, r2
 80013f2:	627b      	str	r3, [r7, #36]	; 0x24
				calculating_x += rawx;
 80013f4:	89bb      	ldrh	r3, [r7, #12]
 80013f6:	69fa      	ldr	r2, [r7, #28]
 80013f8:	4413      	add	r3, r2
 80013fa:	61fb      	str	r3, [r7, #28]
        samples--;
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	3b01      	subs	r3, #1
 8001400:	617b      	str	r3, [r7, #20]
				counted_samples++;
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	3301      	adds	r3, #1
 8001406:	613b      	str	r3, [r7, #16]
    while((samples > 0)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d006      	beq.n	800141c <TP_Read_Coordinates+0xa4>
 800140e:	2104      	movs	r1, #4
 8001410:	4837      	ldr	r0, [pc, #220]	; (80014f0 <TP_Read_Coordinates+0x178>)
 8001412:	f002 fef1 	bl	80041f8 <HAL_GPIO_ReadPin>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d0d1      	beq.n	80013c0 <TP_Read_Coordinates+0x48>
    };
		
		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);
 800141c:	2201      	movs	r2, #1
 800141e:	2140      	movs	r1, #64	; 0x40
 8001420:	4833      	ldr	r0, [pc, #204]	; (80014f0 <TP_Read_Coordinates+0x178>)
 8001422:	f002 ff01 	bl	8004228 <HAL_GPIO_WritePin>

		
		if((counted_samples == NO_OF_POSITION_SAMPLES)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800142c:	d14d      	bne.n	80014ca <TP_Read_Coordinates+0x152>
 800142e:	2104      	movs	r1, #4
 8001430:	482f      	ldr	r0, [pc, #188]	; (80014f0 <TP_Read_Coordinates+0x178>)
 8001432:	f002 fee1 	bl	80041f8 <HAL_GPIO_ReadPin>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d146      	bne.n	80014ca <TP_Read_Coordinates+0x152>
		{
		
		calculating_x /= counted_samples;
 800143c:	69fa      	ldr	r2, [r7, #28]
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	fbb2 f3f3 	udiv	r3, r2, r3
 8001444:	61fb      	str	r3, [r7, #28]
		calculating_y /= counted_samples;
 8001446:	69ba      	ldr	r2, [r7, #24]
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	fbb2 f3f3 	udiv	r3, r2, r3
 800144e:	61bb      	str	r3, [r7, #24]
		
		rawx = calculating_x;
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	81bb      	strh	r3, [r7, #12]
		rawy = calculating_y;		
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	81fb      	strh	r3, [r7, #14]
		
		rawx *= -1;
 8001458:	89bb      	ldrh	r3, [r7, #12]
 800145a:	425b      	negs	r3, r3
 800145c:	81bb      	strh	r3, [r7, #12]
		rawy *= -1;
 800145e:	89fb      	ldrh	r3, [r7, #14]
 8001460:	425b      	negs	r3, r3
 8001462:	81fb      	strh	r3, [r7, #14]
		
		//CONVERTING 16bit Value to Screen coordinates
    // 65535/273 = 240!
		// 65535/204 = 320!
    Coordinates[0] = ((240 - (rawx/X_TRANSLATION)) - X_OFFSET)*X_MAGNITUDE;
 8001464:	89ba      	ldrh	r2, [r7, #12]
 8001466:	4b23      	ldr	r3, [pc, #140]	; (80014f4 <TP_Read_Coordinates+0x17c>)
 8001468:	fba3 1302 	umull	r1, r3, r3, r2
 800146c:	1ad2      	subs	r2, r2, r3
 800146e:	0852      	lsrs	r2, r2, #1
 8001470:	4413      	add	r3, r2
 8001472:	0a1b      	lsrs	r3, r3, #8
 8001474:	b29b      	uxth	r3, r3
 8001476:	f1c3 03e3 	rsb	r3, r3, #227	; 0xe3
 800147a:	ee07 3a90 	vmov	s15, r3
 800147e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001482:	ed9f 6b19 	vldr	d6, [pc, #100]	; 80014e8 <TP_Read_Coordinates+0x170>
 8001486:	ee27 7b06 	vmul.f64	d7, d7, d6
 800148a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800148e:	ee17 3a90 	vmov	r3, s15
 8001492:	b29a      	uxth	r2, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	801a      	strh	r2, [r3, #0]
		Coordinates[1] = ((rawy/Y_TRANSLATION)- Y_OFFSET)*Y_MAGNITUDE;
 8001498:	89fb      	ldrh	r3, [r7, #14]
 800149a:	4a17      	ldr	r2, [pc, #92]	; (80014f8 <TP_Read_Coordinates+0x180>)
 800149c:	fba2 2303 	umull	r2, r3, r2, r3
 80014a0:	09db      	lsrs	r3, r3, #7
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	3b0f      	subs	r3, #15
 80014a6:	ee07 3a90 	vmov	s15, r3
 80014aa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80014ae:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 80014e8 <TP_Read_Coordinates+0x170>
 80014b2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	3302      	adds	r3, #2
 80014ba:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80014be:	ee17 2a90 	vmov	r2, s15
 80014c2:	b292      	uxth	r2, r2
 80014c4:	801a      	strh	r2, [r3, #0]
		
		return TOUCHPAD_DATA_OK;			
 80014c6:	2301      	movs	r3, #1
 80014c8:	e007      	b.n	80014da <TP_Read_Coordinates+0x162>
		}
		else
		{
			Coordinates[0] = 0;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2200      	movs	r2, #0
 80014ce:	801a      	strh	r2, [r3, #0]
			Coordinates[1] = 0;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	3302      	adds	r3, #2
 80014d4:	2200      	movs	r2, #0
 80014d6:	801a      	strh	r2, [r3, #0]
			return TOUCHPAD_DATA_NOISY;
 80014d8:	2300      	movs	r3, #0
		}
		return 0;
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3728      	adds	r7, #40	; 0x28
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	f3af 8000 	nop.w
 80014e8:	28f5c28f 	.word	0x28f5c28f
 80014ec:	3ff28f5c 	.word	0x3ff28f5c
 80014f0:	40021000 	.word	0x40021000
 80014f4:	e01e01e1 	.word	0xe01e01e1
 80014f8:	a0a0a0a1 	.word	0xa0a0a0a1

080014fc <TP_Touchpad_Pressed>:

//Check if Touchpad was pressed. Returns TOUCHPAD_PRESSED (1) or TOUCHPAD_NOT_PRESSED (0)
uint8_t TP_Touchpad_Pressed(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0)
 8001500:	2104      	movs	r1, #4
 8001502:	4805      	ldr	r0, [pc, #20]	; (8001518 <TP_Touchpad_Pressed+0x1c>)
 8001504:	f002 fe78 	bl	80041f8 <HAL_GPIO_ReadPin>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d101      	bne.n	8001512 <TP_Touchpad_Pressed+0x16>
	{
		return TOUCHPAD_PRESSED;
 800150e:	2301      	movs	r3, #1
 8001510:	e000      	b.n	8001514 <TP_Touchpad_Pressed+0x18>
	}
	else
	{
		return TOUCHPAD_NOT_PRESSED;
 8001512:	2300      	movs	r3, #0
	}
	return 0;
}
 8001514:	4618      	mov	r0, r3
 8001516:	bd80      	pop	{r7, pc}
 8001518:	40021000 	.word	0x40021000

0800151c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001522:	463b      	mov	r3, r7
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	605a      	str	r2, [r3, #4]
 800152a:	609a      	str	r2, [r3, #8]
 800152c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800152e:	4b21      	ldr	r3, [pc, #132]	; (80015b4 <MX_ADC1_Init+0x98>)
 8001530:	4a21      	ldr	r2, [pc, #132]	; (80015b8 <MX_ADC1_Init+0x9c>)
 8001532:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001534:	4b1f      	ldr	r3, [pc, #124]	; (80015b4 <MX_ADC1_Init+0x98>)
 8001536:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800153a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800153c:	4b1d      	ldr	r3, [pc, #116]	; (80015b4 <MX_ADC1_Init+0x98>)
 800153e:	2200      	movs	r2, #0
 8001540:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001542:	4b1c      	ldr	r3, [pc, #112]	; (80015b4 <MX_ADC1_Init+0x98>)
 8001544:	2200      	movs	r2, #0
 8001546:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001548:	4b1a      	ldr	r3, [pc, #104]	; (80015b4 <MX_ADC1_Init+0x98>)
 800154a:	2201      	movs	r2, #1
 800154c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800154e:	4b19      	ldr	r3, [pc, #100]	; (80015b4 <MX_ADC1_Init+0x98>)
 8001550:	2200      	movs	r2, #0
 8001552:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001556:	4b17      	ldr	r3, [pc, #92]	; (80015b4 <MX_ADC1_Init+0x98>)
 8001558:	2200      	movs	r2, #0
 800155a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800155c:	4b15      	ldr	r3, [pc, #84]	; (80015b4 <MX_ADC1_Init+0x98>)
 800155e:	4a17      	ldr	r2, [pc, #92]	; (80015bc <MX_ADC1_Init+0xa0>)
 8001560:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001562:	4b14      	ldr	r3, [pc, #80]	; (80015b4 <MX_ADC1_Init+0x98>)
 8001564:	2200      	movs	r2, #0
 8001566:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001568:	4b12      	ldr	r3, [pc, #72]	; (80015b4 <MX_ADC1_Init+0x98>)
 800156a:	2201      	movs	r2, #1
 800156c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800156e:	4b11      	ldr	r3, [pc, #68]	; (80015b4 <MX_ADC1_Init+0x98>)
 8001570:	2200      	movs	r2, #0
 8001572:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001576:	4b0f      	ldr	r3, [pc, #60]	; (80015b4 <MX_ADC1_Init+0x98>)
 8001578:	2201      	movs	r2, #1
 800157a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800157c:	480d      	ldr	r0, [pc, #52]	; (80015b4 <MX_ADC1_Init+0x98>)
 800157e:	f001 fed5 	bl	800332c <HAL_ADC_Init>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001588:	f001 fb30 	bl	8002bec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800158c:	230a      	movs	r3, #10
 800158e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001590:	2301      	movs	r3, #1
 8001592:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001594:	2307      	movs	r3, #7
 8001596:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001598:	463b      	mov	r3, r7
 800159a:	4619      	mov	r1, r3
 800159c:	4805      	ldr	r0, [pc, #20]	; (80015b4 <MX_ADC1_Init+0x98>)
 800159e:	f002 f913 	bl	80037c8 <HAL_ADC_ConfigChannel>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80015a8:	f001 fb20 	bl	8002bec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80015ac:	bf00      	nop
 80015ae:	3710      	adds	r7, #16
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	20000090 	.word	0x20000090
 80015b8:	40012000 	.word	0x40012000
 80015bc:	0f000001 	.word	0x0f000001

080015c0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b08a      	sub	sp, #40	; 0x28
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c8:	f107 0314 	add.w	r3, r7, #20
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	605a      	str	r2, [r3, #4]
 80015d2:	609a      	str	r2, [r3, #8]
 80015d4:	60da      	str	r2, [r3, #12]
 80015d6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a19      	ldr	r2, [pc, #100]	; (8001644 <HAL_ADC_MspInit+0x84>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d12b      	bne.n	800163a <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80015e2:	4b19      	ldr	r3, [pc, #100]	; (8001648 <HAL_ADC_MspInit+0x88>)
 80015e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e6:	4a18      	ldr	r2, [pc, #96]	; (8001648 <HAL_ADC_MspInit+0x88>)
 80015e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015ec:	6453      	str	r3, [r2, #68]	; 0x44
 80015ee:	4b16      	ldr	r3, [pc, #88]	; (8001648 <HAL_ADC_MspInit+0x88>)
 80015f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015f6:	613b      	str	r3, [r7, #16]
 80015f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015fa:	4b13      	ldr	r3, [pc, #76]	; (8001648 <HAL_ADC_MspInit+0x88>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	4a12      	ldr	r2, [pc, #72]	; (8001648 <HAL_ADC_MspInit+0x88>)
 8001600:	f043 0304 	orr.w	r3, r3, #4
 8001604:	6313      	str	r3, [r2, #48]	; 0x30
 8001606:	4b10      	ldr	r3, [pc, #64]	; (8001648 <HAL_ADC_MspInit+0x88>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	f003 0304 	and.w	r3, r3, #4
 800160e:	60fb      	str	r3, [r7, #12]
 8001610:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001612:	2301      	movs	r3, #1
 8001614:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001616:	2303      	movs	r3, #3
 8001618:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161a:	2300      	movs	r3, #0
 800161c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800161e:	f107 0314 	add.w	r3, r7, #20
 8001622:	4619      	mov	r1, r3
 8001624:	4809      	ldr	r0, [pc, #36]	; (800164c <HAL_ADC_MspInit+0x8c>)
 8001626:	f002 fc3b 	bl	8003ea0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800162a:	2200      	movs	r2, #0
 800162c:	2100      	movs	r1, #0
 800162e:	2012      	movs	r0, #18
 8001630:	f002 fbff 	bl	8003e32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001634:	2012      	movs	r0, #18
 8001636:	f002 fc18 	bl	8003e6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800163a:	bf00      	nop
 800163c:	3728      	adds	r7, #40	; 0x28
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	40012000 	.word	0x40012000
 8001648:	40023800 	.word	0x40023800
 800164c:	40020800 	.word	0x40020800

08001650 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b08c      	sub	sp, #48	; 0x30
 8001654:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001656:	f107 031c 	add.w	r3, r7, #28
 800165a:	2200      	movs	r2, #0
 800165c:	601a      	str	r2, [r3, #0]
 800165e:	605a      	str	r2, [r3, #4]
 8001660:	609a      	str	r2, [r3, #8]
 8001662:	60da      	str	r2, [r3, #12]
 8001664:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001666:	4b72      	ldr	r3, [pc, #456]	; (8001830 <MX_GPIO_Init+0x1e0>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	4a71      	ldr	r2, [pc, #452]	; (8001830 <MX_GPIO_Init+0x1e0>)
 800166c:	f043 0310 	orr.w	r3, r3, #16
 8001670:	6313      	str	r3, [r2, #48]	; 0x30
 8001672:	4b6f      	ldr	r3, [pc, #444]	; (8001830 <MX_GPIO_Init+0x1e0>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	f003 0310 	and.w	r3, r3, #16
 800167a:	61bb      	str	r3, [r7, #24]
 800167c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800167e:	4b6c      	ldr	r3, [pc, #432]	; (8001830 <MX_GPIO_Init+0x1e0>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	4a6b      	ldr	r2, [pc, #428]	; (8001830 <MX_GPIO_Init+0x1e0>)
 8001684:	f043 0320 	orr.w	r3, r3, #32
 8001688:	6313      	str	r3, [r2, #48]	; 0x30
 800168a:	4b69      	ldr	r3, [pc, #420]	; (8001830 <MX_GPIO_Init+0x1e0>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	f003 0320 	and.w	r3, r3, #32
 8001692:	617b      	str	r3, [r7, #20]
 8001694:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001696:	4b66      	ldr	r3, [pc, #408]	; (8001830 <MX_GPIO_Init+0x1e0>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	4a65      	ldr	r2, [pc, #404]	; (8001830 <MX_GPIO_Init+0x1e0>)
 800169c:	f043 0304 	orr.w	r3, r3, #4
 80016a0:	6313      	str	r3, [r2, #48]	; 0x30
 80016a2:	4b63      	ldr	r3, [pc, #396]	; (8001830 <MX_GPIO_Init+0x1e0>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	f003 0304 	and.w	r3, r3, #4
 80016aa:	613b      	str	r3, [r7, #16]
 80016ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ae:	4b60      	ldr	r3, [pc, #384]	; (8001830 <MX_GPIO_Init+0x1e0>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	4a5f      	ldr	r2, [pc, #380]	; (8001830 <MX_GPIO_Init+0x1e0>)
 80016b4:	f043 0301 	orr.w	r3, r3, #1
 80016b8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ba:	4b5d      	ldr	r3, [pc, #372]	; (8001830 <MX_GPIO_Init+0x1e0>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	60fb      	str	r3, [r7, #12]
 80016c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016c6:	4b5a      	ldr	r3, [pc, #360]	; (8001830 <MX_GPIO_Init+0x1e0>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	4a59      	ldr	r2, [pc, #356]	; (8001830 <MX_GPIO_Init+0x1e0>)
 80016cc:	f043 0302 	orr.w	r3, r3, #2
 80016d0:	6313      	str	r3, [r2, #48]	; 0x30
 80016d2:	4b57      	ldr	r3, [pc, #348]	; (8001830 <MX_GPIO_Init+0x1e0>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	f003 0302 	and.w	r3, r3, #2
 80016da:	60bb      	str	r3, [r7, #8]
 80016dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80016de:	4b54      	ldr	r3, [pc, #336]	; (8001830 <MX_GPIO_Init+0x1e0>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	4a53      	ldr	r2, [pc, #332]	; (8001830 <MX_GPIO_Init+0x1e0>)
 80016e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016e8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ea:	4b51      	ldr	r3, [pc, #324]	; (8001830 <MX_GPIO_Init+0x1e0>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016f2:	607b      	str	r3, [r7, #4]
 80016f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016f6:	4b4e      	ldr	r3, [pc, #312]	; (8001830 <MX_GPIO_Init+0x1e0>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	4a4d      	ldr	r2, [pc, #308]	; (8001830 <MX_GPIO_Init+0x1e0>)
 80016fc:	f043 0308 	orr.w	r3, r3, #8
 8001700:	6313      	str	r3, [r2, #48]	; 0x30
 8001702:	4b4b      	ldr	r3, [pc, #300]	; (8001830 <MX_GPIO_Init+0x1e0>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	f003 0308 	and.w	r3, r3, #8
 800170a:	603b      	str	r3, [r7, #0]
 800170c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_CLK_Pin|T_MOSI_Pin|T_CS_Pin, GPIO_PIN_RESET);
 800170e:	2200      	movs	r2, #0
 8001710:	2168      	movs	r1, #104	; 0x68
 8001712:	4848      	ldr	r0, [pc, #288]	; (8001834 <MX_GPIO_Init+0x1e4>)
 8001714:	f002 fd88 	bl	8004228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, DST2_Pin|STEP2_Pin, GPIO_PIN_RESET);
 8001718:	2200      	movs	r2, #0
 800171a:	2103      	movs	r1, #3
 800171c:	4846      	ldr	r0, [pc, #280]	; (8001838 <MX_GPIO_Init+0x1e8>)
 800171e:	f002 fd83 	bl	8004228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001722:	2200      	movs	r2, #0
 8001724:	f244 0181 	movw	r1, #16513	; 0x4081
 8001728:	4844      	ldr	r0, [pc, #272]	; (800183c <MX_GPIO_Init+0x1ec>)
 800172a:	f002 fd7d 	bl	8004228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Pin|DC_Pin|RST_Pin, GPIO_PIN_RESET);
 800172e:	2200      	movs	r2, #0
 8001730:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8001734:	4842      	ldr	r0, [pc, #264]	; (8001840 <MX_GPIO_Init+0x1f0>)
 8001736:	f002 fd77 	bl	8004228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, STEP1_Pin|DST1_Pin, GPIO_PIN_RESET);
 800173a:	2200      	movs	r2, #0
 800173c:	2103      	movs	r1, #3
 800173e:	4841      	ldr	r0, [pc, #260]	; (8001844 <MX_GPIO_Init+0x1f4>)
 8001740:	f002 fd72 	bl	8004228 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = T_IRQ_Pin|T_MISO_Pin;
 8001744:	2314      	movs	r3, #20
 8001746:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001748:	2300      	movs	r3, #0
 800174a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	2300      	movs	r3, #0
 800174e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001750:	f107 031c 	add.w	r3, r7, #28
 8001754:	4619      	mov	r1, r3
 8001756:	4837      	ldr	r0, [pc, #220]	; (8001834 <MX_GPIO_Init+0x1e4>)
 8001758:	f002 fba2 	bl	8003ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_MOSI_Pin|T_CS_Pin;
 800175c:	2368      	movs	r3, #104	; 0x68
 800175e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001760:	2301      	movs	r3, #1
 8001762:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001764:	2300      	movs	r3, #0
 8001766:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001768:	2303      	movs	r3, #3
 800176a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800176c:	f107 031c 	add.w	r3, r7, #28
 8001770:	4619      	mov	r1, r3
 8001772:	4830      	ldr	r0, [pc, #192]	; (8001834 <MX_GPIO_Init+0x1e4>)
 8001774:	f002 fb94 	bl	8003ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = DST2_Pin|STEP2_Pin;
 8001778:	2303      	movs	r3, #3
 800177a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800177c:	2301      	movs	r3, #1
 800177e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001780:	2300      	movs	r3, #0
 8001782:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001784:	2300      	movs	r3, #0
 8001786:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001788:	f107 031c 	add.w	r3, r7, #28
 800178c:	4619      	mov	r1, r3
 800178e:	482a      	ldr	r0, [pc, #168]	; (8001838 <MX_GPIO_Init+0x1e8>)
 8001790:	f002 fb86 	bl	8003ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001794:	f244 0381 	movw	r3, #16513	; 0x4081
 8001798:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800179a:	2301      	movs	r3, #1
 800179c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179e:	2300      	movs	r3, #0
 80017a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a2:	2300      	movs	r3, #0
 80017a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a6:	f107 031c 	add.w	r3, r7, #28
 80017aa:	4619      	mov	r1, r3
 80017ac:	4823      	ldr	r0, [pc, #140]	; (800183c <MX_GPIO_Init+0x1ec>)
 80017ae:	f002 fb77 	bl	8003ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = BTN_PAUSE_Pin|BTN_CANCEL_Pin;
 80017b2:	230c      	movs	r3, #12
 80017b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017b6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80017ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017bc:	2300      	movs	r3, #0
 80017be:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017c0:	f107 031c 	add.w	r3, r7, #28
 80017c4:	4619      	mov	r1, r3
 80017c6:	4820      	ldr	r0, [pc, #128]	; (8001848 <MX_GPIO_Init+0x1f8>)
 80017c8:	f002 fb6a 	bl	8003ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = CS_Pin|DC_Pin|RST_Pin;
 80017cc:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80017d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d2:	2301      	movs	r3, #1
 80017d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d6:	2300      	movs	r3, #0
 80017d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017da:	2303      	movs	r3, #3
 80017dc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017de:	f107 031c 	add.w	r3, r7, #28
 80017e2:	4619      	mov	r1, r3
 80017e4:	4816      	ldr	r0, [pc, #88]	; (8001840 <MX_GPIO_Init+0x1f0>)
 80017e6:	f002 fb5b 	bl	8003ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = STEP1_Pin|DST1_Pin;
 80017ea:	2303      	movs	r3, #3
 80017ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ee:	2301      	movs	r3, #1
 80017f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f2:	2300      	movs	r3, #0
 80017f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f6:	2300      	movs	r3, #0
 80017f8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017fa:	f107 031c 	add.w	r3, r7, #28
 80017fe:	4619      	mov	r1, r3
 8001800:	4810      	ldr	r0, [pc, #64]	; (8001844 <MX_GPIO_Init+0x1f4>)
 8001802:	f002 fb4d 	bl	8003ea0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001806:	2200      	movs	r2, #0
 8001808:	2100      	movs	r1, #0
 800180a:	2008      	movs	r0, #8
 800180c:	f002 fb11 	bl	8003e32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001810:	2008      	movs	r0, #8
 8001812:	f002 fb2a 	bl	8003e6a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001816:	2200      	movs	r2, #0
 8001818:	2100      	movs	r1, #0
 800181a:	2009      	movs	r0, #9
 800181c:	f002 fb09 	bl	8003e32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001820:	2009      	movs	r0, #9
 8001822:	f002 fb22 	bl	8003e6a <HAL_NVIC_EnableIRQ>

}
 8001826:	bf00      	nop
 8001828:	3730      	adds	r7, #48	; 0x30
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	40023800 	.word	0x40023800
 8001834:	40021000 	.word	0x40021000
 8001838:	40021400 	.word	0x40021400
 800183c:	40020400 	.word	0x40020400
 8001840:	40020800 	.word	0x40020800
 8001844:	40020c00 	.word	0x40020c00
 8001848:	40021800 	.word	0x40021800

0800184c <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001850:	f3bf 8f4f 	dsb	sy
}
 8001854:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001856:	f3bf 8f6f 	isb	sy
}
 800185a:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800185c:	4b0d      	ldr	r3, [pc, #52]	; (8001894 <SCB_EnableICache+0x48>)
 800185e:	2200      	movs	r2, #0
 8001860:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001864:	f3bf 8f4f 	dsb	sy
}
 8001868:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800186a:	f3bf 8f6f 	isb	sy
}
 800186e:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001870:	4b08      	ldr	r3, [pc, #32]	; (8001894 <SCB_EnableICache+0x48>)
 8001872:	695b      	ldr	r3, [r3, #20]
 8001874:	4a07      	ldr	r2, [pc, #28]	; (8001894 <SCB_EnableICache+0x48>)
 8001876:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800187a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800187c:	f3bf 8f4f 	dsb	sy
}
 8001880:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001882:	f3bf 8f6f 	isb	sy
}
 8001886:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8001888:	bf00      	nop
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	e000ed00 	.word	0xe000ed00

08001898 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8001898:	b480      	push	{r7}
 800189a:	b085      	sub	sp, #20
 800189c:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800189e:	4b1f      	ldr	r3, [pc, #124]	; (800191c <SCB_EnableDCache+0x84>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80018a6:	f3bf 8f4f 	dsb	sy
}
 80018aa:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80018ac:	4b1b      	ldr	r3, [pc, #108]	; (800191c <SCB_EnableDCache+0x84>)
 80018ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80018b2:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	0b5b      	lsrs	r3, r3, #13
 80018b8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80018bc:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	08db      	lsrs	r3, r3, #3
 80018c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80018c6:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	015a      	lsls	r2, r3, #5
 80018cc:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80018d0:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80018d2:	68ba      	ldr	r2, [r7, #8]
 80018d4:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80018d6:	4911      	ldr	r1, [pc, #68]	; (800191c <SCB_EnableDCache+0x84>)
 80018d8:	4313      	orrs	r3, r2
 80018da:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	1e5a      	subs	r2, r3, #1
 80018e2:	60ba      	str	r2, [r7, #8]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d1ef      	bne.n	80018c8 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	1e5a      	subs	r2, r3, #1
 80018ec:	60fa      	str	r2, [r7, #12]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d1e5      	bne.n	80018be <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80018f2:	f3bf 8f4f 	dsb	sy
}
 80018f6:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80018f8:	4b08      	ldr	r3, [pc, #32]	; (800191c <SCB_EnableDCache+0x84>)
 80018fa:	695b      	ldr	r3, [r3, #20]
 80018fc:	4a07      	ldr	r2, [pc, #28]	; (800191c <SCB_EnableDCache+0x84>)
 80018fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001902:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001904:	f3bf 8f4f 	dsb	sy
}
 8001908:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800190a:	f3bf 8f6f 	isb	sy
}
 800190e:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8001910:	bf00      	nop
 8001912:	3714      	adds	r7, #20
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr
 800191c:	e000ed00 	.word	0xe000ed00

08001920 <map>:
void textStatus(char*);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int map(int val, int in_min, int in_max, int out_min, int out_max) {
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	60b9      	str	r1, [r7, #8]
 800192a:	607a      	str	r2, [r7, #4]
 800192c:	603b      	str	r3, [r7, #0]
    return (val - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800192e:	68fa      	ldr	r2, [r7, #12]
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	69b9      	ldr	r1, [r7, #24]
 8001936:	683a      	ldr	r2, [r7, #0]
 8001938:	1a8a      	subs	r2, r1, r2
 800193a:	fb03 f202 	mul.w	r2, r3, r2
 800193e:	6879      	ldr	r1, [r7, #4]
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	1acb      	subs	r3, r1, r3
 8001944:	fb92 f2f3 	sdiv	r2, r2, r3
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	4413      	add	r3, r2
}
 800194c:	4618      	mov	r0, r3
 800194e:	3714      	adds	r7, #20
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <delayMicro>:
void delayMicro(uint16_t us)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 8001962:	4b09      	ldr	r3, [pc, #36]	; (8001988 <delayMicro+0x30>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	2200      	movs	r2, #0
 8001968:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
 800196a:	bf00      	nop
 800196c:	4b06      	ldr	r3, [pc, #24]	; (8001988 <delayMicro+0x30>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001972:	88fb      	ldrh	r3, [r7, #6]
 8001974:	429a      	cmp	r2, r3
 8001976:	d3f9      	bcc.n	800196c <delayMicro+0x14>
}
 8001978:	bf00      	nop
 800197a:	bf00      	nop
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	20000154 	.word	0x20000154
 800198c:	00000000 	.word	0x00000000

08001990 <step1>:
void step1(int steps, uint8_t direction)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	460b      	mov	r3, r1
 800199a:	70fb      	strb	r3, [r7, #3]
	int stepsToTake = steps/mmPerStep;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	ee07 3a90 	vmov	s15, r3
 80019a2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80019a6:	ed9f 5b24 	vldr	d5, [pc, #144]	; 8001a38 <step1+0xa8>
 80019aa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80019ae:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80019b2:	ee17 3a90 	vmov	r3, s15
 80019b6:	60bb      	str	r3, [r7, #8]

	if (direction == 0) HAL_GPIO_WritePin(DIR1_PORT, DIR1_PIN, GPIO_PIN_SET);
 80019b8:	78fb      	ldrb	r3, [r7, #3]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d105      	bne.n	80019ca <step1+0x3a>
 80019be:	2201      	movs	r2, #1
 80019c0:	2102      	movs	r1, #2
 80019c2:	481f      	ldr	r0, [pc, #124]	; (8001a40 <step1+0xb0>)
 80019c4:	f002 fc30 	bl	8004228 <HAL_GPIO_WritePin>
 80019c8:	e004      	b.n	80019d4 <step1+0x44>
	else HAL_GPIO_WritePin(DIR1_PORT, DIR1_PIN, GPIO_PIN_RESET);
 80019ca:	2200      	movs	r2, #0
 80019cc:	2102      	movs	r1, #2
 80019ce:	481c      	ldr	r0, [pc, #112]	; (8001a40 <step1+0xb0>)
 80019d0:	f002 fc2a 	bl	8004228 <HAL_GPIO_WritePin>
	for(int i = 0; i < stepsToTake; i+=1)
 80019d4:	2300      	movs	r3, #0
 80019d6:	60fb      	str	r3, [r7, #12]
 80019d8:	e021      	b.n	8001a1e <step1+0x8e>
	{
		if(cancel == 1) break;
 80019da:	4b1a      	ldr	r3, [pc, #104]	; (8001a44 <step1+0xb4>)
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d022      	beq.n	8001a28 <step1+0x98>
		while(pause == 1);
 80019e2:	bf00      	nop
 80019e4:	4b18      	ldr	r3, [pc, #96]	; (8001a48 <step1+0xb8>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d0fb      	beq.n	80019e4 <step1+0x54>
		HAL_GPIO_WritePin(STEP1_PORT, STEP1_PIN, GPIO_PIN_SET);
 80019ec:	2201      	movs	r2, #1
 80019ee:	2101      	movs	r1, #1
 80019f0:	4813      	ldr	r0, [pc, #76]	; (8001a40 <step1+0xb0>)
 80019f2:	f002 fc19 	bl	8004228 <HAL_GPIO_WritePin>
		delayMicro(adc_val);
 80019f6:	4b15      	ldr	r3, [pc, #84]	; (8001a4c <step1+0xbc>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7ff ffab 	bl	8001958 <delayMicro>
		HAL_GPIO_WritePin(STEP1_PORT, STEP1_PIN, GPIO_PIN_RESET);
 8001a02:	2200      	movs	r2, #0
 8001a04:	2101      	movs	r1, #1
 8001a06:	480e      	ldr	r0, [pc, #56]	; (8001a40 <step1+0xb0>)
 8001a08:	f002 fc0e 	bl	8004228 <HAL_GPIO_WritePin>
		delayMicro(adc_val);
 8001a0c:	4b0f      	ldr	r3, [pc, #60]	; (8001a4c <step1+0xbc>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7ff ffa0 	bl	8001958 <delayMicro>
	for(int i = 0; i < stepsToTake; i+=1)
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	60fb      	str	r3, [r7, #12]
 8001a1e:	68fa      	ldr	r2, [r7, #12]
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	dbd9      	blt.n	80019da <step1+0x4a>
	}
}
 8001a26:	e000      	b.n	8001a2a <step1+0x9a>
		if(cancel == 1) break;
 8001a28:	bf00      	nop
}
 8001a2a:	bf00      	nop
 8001a2c:	3710      	adds	r7, #16
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	f3af 8000 	nop.w
 8001a38:	43808851 	.word	0x43808851
 8001a3c:	3fc352a8 	.word	0x3fc352a8
 8001a40:	40020c00 	.word	0x40020c00
 8001a44:	200000e2 	.word	0x200000e2
 8001a48:	200000e3 	.word	0x200000e3
 8001a4c:	200000e8 	.word	0x200000e8

08001a50 <step2>:
void step2(int steps, uint8_t direction)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	460b      	mov	r3, r1
 8001a5a:	70fb      	strb	r3, [r7, #3]
	int stepsToTake = steps;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	60bb      	str	r3, [r7, #8]

	if (direction == 0) HAL_GPIO_WritePin(DIR2_PORT, DIR2_PIN, GPIO_PIN_SET);
 8001a60:	78fb      	ldrb	r3, [r7, #3]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d105      	bne.n	8001a72 <step2+0x22>
 8001a66:	2201      	movs	r2, #1
 8001a68:	2101      	movs	r1, #1
 8001a6a:	481c      	ldr	r0, [pc, #112]	; (8001adc <step2+0x8c>)
 8001a6c:	f002 fbdc 	bl	8004228 <HAL_GPIO_WritePin>
 8001a70:	e004      	b.n	8001a7c <step2+0x2c>
	else HAL_GPIO_WritePin(DIR2_PORT, DIR2_PIN, GPIO_PIN_RESET);
 8001a72:	2200      	movs	r2, #0
 8001a74:	2101      	movs	r1, #1
 8001a76:	4819      	ldr	r0, [pc, #100]	; (8001adc <step2+0x8c>)
 8001a78:	f002 fbd6 	bl	8004228 <HAL_GPIO_WritePin>
	for(int i = 0; i < stepsToTake; i+=1)
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	e021      	b.n	8001ac6 <step2+0x76>
	{
		if(cancel == 1) break;
 8001a82:	4b17      	ldr	r3, [pc, #92]	; (8001ae0 <step2+0x90>)
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d022      	beq.n	8001ad0 <step2+0x80>
		while(pause == 1);
 8001a8a:	bf00      	nop
 8001a8c:	4b15      	ldr	r3, [pc, #84]	; (8001ae4 <step2+0x94>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d0fb      	beq.n	8001a8c <step2+0x3c>
		HAL_GPIO_WritePin(STEP2_PORT, STEP2_PIN, GPIO_PIN_SET);
 8001a94:	2201      	movs	r2, #1
 8001a96:	2102      	movs	r1, #2
 8001a98:	4810      	ldr	r0, [pc, #64]	; (8001adc <step2+0x8c>)
 8001a9a:	f002 fbc5 	bl	8004228 <HAL_GPIO_WritePin>
		delayMicro(adc_val);
 8001a9e:	4b12      	ldr	r3, [pc, #72]	; (8001ae8 <step2+0x98>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff ff57 	bl	8001958 <delayMicro>
		HAL_GPIO_WritePin(STEP2_PORT, STEP2_PIN, GPIO_PIN_RESET);
 8001aaa:	2200      	movs	r2, #0
 8001aac:	2102      	movs	r1, #2
 8001aae:	480b      	ldr	r0, [pc, #44]	; (8001adc <step2+0x8c>)
 8001ab0:	f002 fbba 	bl	8004228 <HAL_GPIO_WritePin>
		delayMicro(adc_val);
 8001ab4:	4b0c      	ldr	r3, [pc, #48]	; (8001ae8 <step2+0x98>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7ff ff4c 	bl	8001958 <delayMicro>
	for(int i = 0; i < stepsToTake; i+=1)
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	60fb      	str	r3, [r7, #12]
 8001ac6:	68fa      	ldr	r2, [r7, #12]
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	429a      	cmp	r2, r3
 8001acc:	dbd9      	blt.n	8001a82 <step2+0x32>
	}
}
 8001ace:	e000      	b.n	8001ad2 <step2+0x82>
		if(cancel == 1) break;
 8001ad0:	bf00      	nop
}
 8001ad2:	bf00      	nop
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	40021400 	.word	0x40021400
 8001ae0:	200000e2 	.word	0x200000e2
 8001ae4:	200000e3 	.word	0x200000e3
 8001ae8:	200000e8 	.word	0x200000e8

08001aec <numpad>:
int numpad(int val, char* title)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b08a      	sub	sp, #40	; 0x28
 8001af0:	af02      	add	r7, sp, #8
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	6039      	str	r1, [r7, #0]
	int num = val;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	61fb      	str	r3, [r7, #28]
	// WireLength1
	//					  ILI9341_Draw_Filled_Rectangle_Coord(15, 75, 60, 100, BLACK);
	// Container
	ILI9341_Draw_Filled_Rectangle_Coord(35, 15, 235, 230, 0xA514);
 8001afa:	f24a 5314 	movw	r3, #42260	; 0xa514
 8001afe:	9300      	str	r3, [sp, #0]
 8001b00:	23e6      	movs	r3, #230	; 0xe6
 8001b02:	22eb      	movs	r2, #235	; 0xeb
 8001b04:	210f      	movs	r1, #15
 8001b06:	2023      	movs	r0, #35	; 0x23
 8001b08:	f7fe fded 	bl	80006e6 <ILI9341_Draw_Filled_Rectangle_Coord>
	// Title
	ILI9341_Draw_Text(title, 45, 20, BLACK, 2, 0xA514);
 8001b0c:	f24a 5314 	movw	r3, #42260	; 0xa514
 8001b10:	9301      	str	r3, [sp, #4]
 8001b12:	2302      	movs	r3, #2
 8001b14:	9300      	str	r3, [sp, #0]
 8001b16:	2300      	movs	r3, #0
 8001b18:	2214      	movs	r2, #20
 8001b1a:	212d      	movs	r1, #45	; 0x2d
 8001b1c:	6838      	ldr	r0, [r7, #0]
 8001b1e:	f7fe fedb 	bl	80008d8 <ILI9341_Draw_Text>
	// NumPad 1 2 3
	ILI9341_Draw_Hollow_Rectangle_Coord(45, 75, 103, 100, BLACK);
 8001b22:	2300      	movs	r3, #0
 8001b24:	9300      	str	r3, [sp, #0]
 8001b26:	2364      	movs	r3, #100	; 0x64
 8001b28:	2267      	movs	r2, #103	; 0x67
 8001b2a:	214b      	movs	r1, #75	; 0x4b
 8001b2c:	202d      	movs	r0, #45	; 0x2d
 8001b2e:	f7fe fd59 	bl	80005e4 <ILI9341_Draw_Hollow_Rectangle_Coord>
	ILI9341_Draw_Text("1", 71, 80, BLACK, 2, 0xA514);
 8001b32:	f24a 5314 	movw	r3, #42260	; 0xa514
 8001b36:	9301      	str	r3, [sp, #4]
 8001b38:	2302      	movs	r3, #2
 8001b3a:	9300      	str	r3, [sp, #0]
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	2250      	movs	r2, #80	; 0x50
 8001b40:	2147      	movs	r1, #71	; 0x47
 8001b42:	48bc      	ldr	r0, [pc, #752]	; (8001e34 <numpad+0x348>)
 8001b44:	f7fe fec8 	bl	80008d8 <ILI9341_Draw_Text>
	ILI9341_Draw_Hollow_Rectangle_Coord(108, 75, 166, 100, BLACK);
 8001b48:	2300      	movs	r3, #0
 8001b4a:	9300      	str	r3, [sp, #0]
 8001b4c:	2364      	movs	r3, #100	; 0x64
 8001b4e:	22a6      	movs	r2, #166	; 0xa6
 8001b50:	214b      	movs	r1, #75	; 0x4b
 8001b52:	206c      	movs	r0, #108	; 0x6c
 8001b54:	f7fe fd46 	bl	80005e4 <ILI9341_Draw_Hollow_Rectangle_Coord>
	ILI9341_Draw_Text("2", 133, 80, BLACK, 2, 0xA514);
 8001b58:	f24a 5314 	movw	r3, #42260	; 0xa514
 8001b5c:	9301      	str	r3, [sp, #4]
 8001b5e:	2302      	movs	r3, #2
 8001b60:	9300      	str	r3, [sp, #0]
 8001b62:	2300      	movs	r3, #0
 8001b64:	2250      	movs	r2, #80	; 0x50
 8001b66:	2185      	movs	r1, #133	; 0x85
 8001b68:	48b3      	ldr	r0, [pc, #716]	; (8001e38 <numpad+0x34c>)
 8001b6a:	f7fe feb5 	bl	80008d8 <ILI9341_Draw_Text>
	ILI9341_Draw_Hollow_Rectangle_Coord(171, 75, 224, 100, BLACK);
 8001b6e:	2300      	movs	r3, #0
 8001b70:	9300      	str	r3, [sp, #0]
 8001b72:	2364      	movs	r3, #100	; 0x64
 8001b74:	22e0      	movs	r2, #224	; 0xe0
 8001b76:	214b      	movs	r1, #75	; 0x4b
 8001b78:	20ab      	movs	r0, #171	; 0xab
 8001b7a:	f7fe fd33 	bl	80005e4 <ILI9341_Draw_Hollow_Rectangle_Coord>
	ILI9341_Draw_Text("3", 194, 80, BLACK, 2, 0xA514);
 8001b7e:	f24a 5314 	movw	r3, #42260	; 0xa514
 8001b82:	9301      	str	r3, [sp, #4]
 8001b84:	2302      	movs	r3, #2
 8001b86:	9300      	str	r3, [sp, #0]
 8001b88:	2300      	movs	r3, #0
 8001b8a:	2250      	movs	r2, #80	; 0x50
 8001b8c:	21c2      	movs	r1, #194	; 0xc2
 8001b8e:	48ab      	ldr	r0, [pc, #684]	; (8001e3c <numpad+0x350>)
 8001b90:	f7fe fea2 	bl	80008d8 <ILI9341_Draw_Text>
	// NumPad 4 5 6
	ILI9341_Draw_Hollow_Rectangle_Coord(45, 105, 103, 130, BLACK);
 8001b94:	2300      	movs	r3, #0
 8001b96:	9300      	str	r3, [sp, #0]
 8001b98:	2382      	movs	r3, #130	; 0x82
 8001b9a:	2267      	movs	r2, #103	; 0x67
 8001b9c:	2169      	movs	r1, #105	; 0x69
 8001b9e:	202d      	movs	r0, #45	; 0x2d
 8001ba0:	f7fe fd20 	bl	80005e4 <ILI9341_Draw_Hollow_Rectangle_Coord>
	ILI9341_Draw_Text("4", 69, 110, BLACK, 2, 0xA514);
 8001ba4:	f24a 5314 	movw	r3, #42260	; 0xa514
 8001ba8:	9301      	str	r3, [sp, #4]
 8001baa:	2302      	movs	r3, #2
 8001bac:	9300      	str	r3, [sp, #0]
 8001bae:	2300      	movs	r3, #0
 8001bb0:	226e      	movs	r2, #110	; 0x6e
 8001bb2:	2145      	movs	r1, #69	; 0x45
 8001bb4:	48a2      	ldr	r0, [pc, #648]	; (8001e40 <numpad+0x354>)
 8001bb6:	f7fe fe8f 	bl	80008d8 <ILI9341_Draw_Text>
	ILI9341_Draw_Hollow_Rectangle_Coord(108, 105, 166, 130, BLACK);
 8001bba:	2300      	movs	r3, #0
 8001bbc:	9300      	str	r3, [sp, #0]
 8001bbe:	2382      	movs	r3, #130	; 0x82
 8001bc0:	22a6      	movs	r2, #166	; 0xa6
 8001bc2:	2169      	movs	r1, #105	; 0x69
 8001bc4:	206c      	movs	r0, #108	; 0x6c
 8001bc6:	f7fe fd0d 	bl	80005e4 <ILI9341_Draw_Hollow_Rectangle_Coord>
	ILI9341_Draw_Text("5", 133, 110, BLACK, 2, 0xA514);
 8001bca:	f24a 5314 	movw	r3, #42260	; 0xa514
 8001bce:	9301      	str	r3, [sp, #4]
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	9300      	str	r3, [sp, #0]
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	226e      	movs	r2, #110	; 0x6e
 8001bd8:	2185      	movs	r1, #133	; 0x85
 8001bda:	489a      	ldr	r0, [pc, #616]	; (8001e44 <numpad+0x358>)
 8001bdc:	f7fe fe7c 	bl	80008d8 <ILI9341_Draw_Text>
	ILI9341_Draw_Hollow_Rectangle_Coord(171, 105, 224, 130, BLACK);
 8001be0:	2300      	movs	r3, #0
 8001be2:	9300      	str	r3, [sp, #0]
 8001be4:	2382      	movs	r3, #130	; 0x82
 8001be6:	22e0      	movs	r2, #224	; 0xe0
 8001be8:	2169      	movs	r1, #105	; 0x69
 8001bea:	20ab      	movs	r0, #171	; 0xab
 8001bec:	f7fe fcfa 	bl	80005e4 <ILI9341_Draw_Hollow_Rectangle_Coord>
	ILI9341_Draw_Text("6", 194, 110, BLACK, 2, 0xA514);
 8001bf0:	f24a 5314 	movw	r3, #42260	; 0xa514
 8001bf4:	9301      	str	r3, [sp, #4]
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	9300      	str	r3, [sp, #0]
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	226e      	movs	r2, #110	; 0x6e
 8001bfe:	21c2      	movs	r1, #194	; 0xc2
 8001c00:	4891      	ldr	r0, [pc, #580]	; (8001e48 <numpad+0x35c>)
 8001c02:	f7fe fe69 	bl	80008d8 <ILI9341_Draw_Text>
	// NumPad 7 8 9
	ILI9341_Draw_Hollow_Rectangle_Coord(45, 135, 103, 160, BLACK);
 8001c06:	2300      	movs	r3, #0
 8001c08:	9300      	str	r3, [sp, #0]
 8001c0a:	23a0      	movs	r3, #160	; 0xa0
 8001c0c:	2267      	movs	r2, #103	; 0x67
 8001c0e:	2187      	movs	r1, #135	; 0x87
 8001c10:	202d      	movs	r0, #45	; 0x2d
 8001c12:	f7fe fce7 	bl	80005e4 <ILI9341_Draw_Hollow_Rectangle_Coord>
	ILI9341_Draw_Text("7", 69, 140, BLACK, 2, 0xA514);
 8001c16:	f24a 5314 	movw	r3, #42260	; 0xa514
 8001c1a:	9301      	str	r3, [sp, #4]
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	9300      	str	r3, [sp, #0]
 8001c20:	2300      	movs	r3, #0
 8001c22:	228c      	movs	r2, #140	; 0x8c
 8001c24:	2145      	movs	r1, #69	; 0x45
 8001c26:	4889      	ldr	r0, [pc, #548]	; (8001e4c <numpad+0x360>)
 8001c28:	f7fe fe56 	bl	80008d8 <ILI9341_Draw_Text>
	ILI9341_Draw_Hollow_Rectangle_Coord(108, 135, 166, 160, BLACK);
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	9300      	str	r3, [sp, #0]
 8001c30:	23a0      	movs	r3, #160	; 0xa0
 8001c32:	22a6      	movs	r2, #166	; 0xa6
 8001c34:	2187      	movs	r1, #135	; 0x87
 8001c36:	206c      	movs	r0, #108	; 0x6c
 8001c38:	f7fe fcd4 	bl	80005e4 <ILI9341_Draw_Hollow_Rectangle_Coord>
	ILI9341_Draw_Text("8", 133, 140, BLACK, 2, 0xA514);
 8001c3c:	f24a 5314 	movw	r3, #42260	; 0xa514
 8001c40:	9301      	str	r3, [sp, #4]
 8001c42:	2302      	movs	r3, #2
 8001c44:	9300      	str	r3, [sp, #0]
 8001c46:	2300      	movs	r3, #0
 8001c48:	228c      	movs	r2, #140	; 0x8c
 8001c4a:	2185      	movs	r1, #133	; 0x85
 8001c4c:	4880      	ldr	r0, [pc, #512]	; (8001e50 <numpad+0x364>)
 8001c4e:	f7fe fe43 	bl	80008d8 <ILI9341_Draw_Text>
	ILI9341_Draw_Hollow_Rectangle_Coord(171, 135, 224, 160, BLACK);
 8001c52:	2300      	movs	r3, #0
 8001c54:	9300      	str	r3, [sp, #0]
 8001c56:	23a0      	movs	r3, #160	; 0xa0
 8001c58:	22e0      	movs	r2, #224	; 0xe0
 8001c5a:	2187      	movs	r1, #135	; 0x87
 8001c5c:	20ab      	movs	r0, #171	; 0xab
 8001c5e:	f7fe fcc1 	bl	80005e4 <ILI9341_Draw_Hollow_Rectangle_Coord>
	ILI9341_Draw_Text("9", 194, 140, BLACK, 2, 0xA514);
 8001c62:	f24a 5314 	movw	r3, #42260	; 0xa514
 8001c66:	9301      	str	r3, [sp, #4]
 8001c68:	2302      	movs	r3, #2
 8001c6a:	9300      	str	r3, [sp, #0]
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	228c      	movs	r2, #140	; 0x8c
 8001c70:	21c2      	movs	r1, #194	; 0xc2
 8001c72:	4878      	ldr	r0, [pc, #480]	; (8001e54 <numpad+0x368>)
 8001c74:	f7fe fe30 	bl	80008d8 <ILI9341_Draw_Text>
	// NumPad 0 del
	ILI9341_Draw_Hollow_Rectangle_Coord(45, 165, 166, 190, BLACK);
 8001c78:	2300      	movs	r3, #0
 8001c7a:	9300      	str	r3, [sp, #0]
 8001c7c:	23be      	movs	r3, #190	; 0xbe
 8001c7e:	22a6      	movs	r2, #166	; 0xa6
 8001c80:	21a5      	movs	r1, #165	; 0xa5
 8001c82:	202d      	movs	r0, #45	; 0x2d
 8001c84:	f7fe fcae 	bl	80005e4 <ILI9341_Draw_Hollow_Rectangle_Coord>
	ILI9341_Draw_Text("0", 100, 170, BLACK, 2, 0xA514);
 8001c88:	f24a 5314 	movw	r3, #42260	; 0xa514
 8001c8c:	9301      	str	r3, [sp, #4]
 8001c8e:	2302      	movs	r3, #2
 8001c90:	9300      	str	r3, [sp, #0]
 8001c92:	2300      	movs	r3, #0
 8001c94:	22aa      	movs	r2, #170	; 0xaa
 8001c96:	2164      	movs	r1, #100	; 0x64
 8001c98:	486f      	ldr	r0, [pc, #444]	; (8001e58 <numpad+0x36c>)
 8001c9a:	f7fe fe1d 	bl	80008d8 <ILI9341_Draw_Text>
	ILI9341_Draw_Hollow_Rectangle_Coord(171, 165, 224, 190, BLACK);
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	9300      	str	r3, [sp, #0]
 8001ca2:	23be      	movs	r3, #190	; 0xbe
 8001ca4:	22e0      	movs	r2, #224	; 0xe0
 8001ca6:	21a5      	movs	r1, #165	; 0xa5
 8001ca8:	20ab      	movs	r0, #171	; 0xab
 8001caa:	f7fe fc9b 	bl	80005e4 <ILI9341_Draw_Hollow_Rectangle_Coord>
	ILI9341_Draw_Text("DEL", 181, 170, BLACK, 2, 0xA514);
 8001cae:	f24a 5314 	movw	r3, #42260	; 0xa514
 8001cb2:	9301      	str	r3, [sp, #4]
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	9300      	str	r3, [sp, #0]
 8001cb8:	2300      	movs	r3, #0
 8001cba:	22aa      	movs	r2, #170	; 0xaa
 8001cbc:	21b5      	movs	r1, #181	; 0xb5
 8001cbe:	4867      	ldr	r0, [pc, #412]	; (8001e5c <numpad+0x370>)
 8001cc0:	f7fe fe0a 	bl	80008d8 <ILI9341_Draw_Text>
	// NumPad Cancel OK
	ILI9341_Draw_Filled_Rectangle_Coord(45, 195, 134, 220, 0xF800);
 8001cc4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001cc8:	9300      	str	r3, [sp, #0]
 8001cca:	23dc      	movs	r3, #220	; 0xdc
 8001ccc:	2286      	movs	r2, #134	; 0x86
 8001cce:	21c3      	movs	r1, #195	; 0xc3
 8001cd0:	202d      	movs	r0, #45	; 0x2d
 8001cd2:	f7fe fd08 	bl	80006e6 <ILI9341_Draw_Filled_Rectangle_Coord>
	ILI9341_Draw_Text("Cancel", 55, 200, WHITE, 2, 0xF800);
 8001cd6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001cda:	9301      	str	r3, [sp, #4]
 8001cdc:	2302      	movs	r3, #2
 8001cde:	9300      	str	r3, [sp, #0]
 8001ce0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ce4:	22c8      	movs	r2, #200	; 0xc8
 8001ce6:	2137      	movs	r1, #55	; 0x37
 8001ce8:	485d      	ldr	r0, [pc, #372]	; (8001e60 <numpad+0x374>)
 8001cea:	f7fe fdf5 	bl	80008d8 <ILI9341_Draw_Text>
	ILI9341_Draw_Filled_Rectangle_Coord(139, 195, 224, 220, 0x0580);
 8001cee:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 8001cf2:	9300      	str	r3, [sp, #0]
 8001cf4:	23dc      	movs	r3, #220	; 0xdc
 8001cf6:	22e0      	movs	r2, #224	; 0xe0
 8001cf8:	21c3      	movs	r1, #195	; 0xc3
 8001cfa:	208b      	movs	r0, #139	; 0x8b
 8001cfc:	f7fe fcf3 	bl	80006e6 <ILI9341_Draw_Filled_Rectangle_Coord>
	ILI9341_Draw_Text("OK", 171, 199, WHITE, 2, 0x0580);
 8001d00:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 8001d04:	9301      	str	r3, [sp, #4]
 8001d06:	2302      	movs	r3, #2
 8001d08:	9300      	str	r3, [sp, #0]
 8001d0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d0e:	22c7      	movs	r2, #199	; 0xc7
 8001d10:	21ab      	movs	r1, #171	; 0xab
 8001d12:	4854      	ldr	r0, [pc, #336]	; (8001e64 <numpad+0x378>)
 8001d14:	f7fe fde0 	bl	80008d8 <ILI9341_Draw_Text>

	while(ok == 0 && cancel == 0)
 8001d18:	e1d3      	b.n	80020c2 <numpad+0x5d6>
	{
		// Number Monitor
		ILI9341_Draw_Filled_Rectangle_Coord(45, 40, 225, 70, WHITE);
 8001d1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d1e:	9300      	str	r3, [sp, #0]
 8001d20:	2346      	movs	r3, #70	; 0x46
 8001d22:	22e1      	movs	r2, #225	; 0xe1
 8001d24:	2128      	movs	r1, #40	; 0x28
 8001d26:	202d      	movs	r0, #45	; 0x2d
 8001d28:	f7fe fcdd 	bl	80006e6 <ILI9341_Draw_Filled_Rectangle_Coord>
		char valBuff[5];
		sprintf(valBuff, "%d", num);
 8001d2c:	f107 0310 	add.w	r3, r7, #16
 8001d30:	69fa      	ldr	r2, [r7, #28]
 8001d32:	494d      	ldr	r1, [pc, #308]	; (8001e68 <numpad+0x37c>)
 8001d34:	4618      	mov	r0, r3
 8001d36:	f004 fba1 	bl	800647c <siprintf>
		ILI9341_Draw_Text(valBuff, 55, 47, BLACK, 2, WHITE);
 8001d3a:	f107 0010 	add.w	r0, r7, #16
 8001d3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d42:	9301      	str	r3, [sp, #4]
 8001d44:	2302      	movs	r3, #2
 8001d46:	9300      	str	r3, [sp, #0]
 8001d48:	2300      	movs	r3, #0
 8001d4a:	222f      	movs	r2, #47	; 0x2f
 8001d4c:	2137      	movs	r1, #55	; 0x37
 8001d4e:	f7fe fdc3 	bl	80008d8 <ILI9341_Draw_Text>
		while(ok == 0 && cancel == 0)
 8001d52:	e1a3      	b.n	800209c <numpad+0x5b0>
		{
			if(TP_Touchpad_Pressed())
 8001d54:	f7ff fbd2 	bl	80014fc <TP_Touchpad_Pressed>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	f000 819b 	beq.w	8002096 <numpad+0x5aa>
			{
				uint16_t x_pos = 0;
 8001d60:	2300      	movs	r3, #0
 8001d62:	837b      	strh	r3, [r7, #26]
			    uint16_t y_pos = 0;
 8001d64:	2300      	movs	r3, #0
 8001d66:	833b      	strh	r3, [r7, #24]

			    uint16_t position_array[2];
				if(TP_Read_Coordinates(position_array) == TOUCHPAD_DATA_OK)
 8001d68:	f107 030c 	add.w	r3, r7, #12
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff fb03 	bl	8001378 <TP_Read_Coordinates>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	f040 81a3 	bne.w	80020c0 <numpad+0x5d4>
				{
					x_pos = position_array[1];
 8001d7a:	89fb      	ldrh	r3, [r7, #14]
 8001d7c:	837b      	strh	r3, [r7, #26]
					y_pos = 240 - position_array[0];
 8001d7e:	89bb      	ldrh	r3, [r7, #12]
 8001d80:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8001d84:	833b      	strh	r3, [r7, #24]
					if(((x_pos >= 45)&&(x_pos <= 103)) && ((y_pos >= 75)&&(y_pos <= 100)) && touch == 0)
 8001d86:	8b7b      	ldrh	r3, [r7, #26]
 8001d88:	2b2c      	cmp	r3, #44	; 0x2c
 8001d8a:	d919      	bls.n	8001dc0 <numpad+0x2d4>
 8001d8c:	8b7b      	ldrh	r3, [r7, #26]
 8001d8e:	2b67      	cmp	r3, #103	; 0x67
 8001d90:	d816      	bhi.n	8001dc0 <numpad+0x2d4>
 8001d92:	8b3b      	ldrh	r3, [r7, #24]
 8001d94:	2b4a      	cmp	r3, #74	; 0x4a
 8001d96:	d913      	bls.n	8001dc0 <numpad+0x2d4>
 8001d98:	8b3b      	ldrh	r3, [r7, #24]
 8001d9a:	2b64      	cmp	r3, #100	; 0x64
 8001d9c:	d810      	bhi.n	8001dc0 <numpad+0x2d4>
 8001d9e:	4b33      	ldr	r3, [pc, #204]	; (8001e6c <numpad+0x380>)
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d10c      	bne.n	8001dc0 <numpad+0x2d4>
					{
					  // 1
					  num *= 10;
 8001da6:	69fa      	ldr	r2, [r7, #28]
 8001da8:	4613      	mov	r3, r2
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	4413      	add	r3, r2
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	61fb      	str	r3, [r7, #28]
					  num += 1;
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	3301      	adds	r3, #1
 8001db6:	61fb      	str	r3, [r7, #28]
					  touch = 1;
 8001db8:	4b2c      	ldr	r3, [pc, #176]	; (8001e6c <numpad+0x380>)
 8001dba:	2201      	movs	r2, #1
 8001dbc:	701a      	strb	r2, [r3, #0]
 8001dbe:	e180      	b.n	80020c2 <numpad+0x5d6>
					}
					else if(((x_pos >= 108)&&(x_pos <= 166)) && ((y_pos >= 75)&&(y_pos <= 100)) && touch == 0)
 8001dc0:	8b7b      	ldrh	r3, [r7, #26]
 8001dc2:	2b6b      	cmp	r3, #107	; 0x6b
 8001dc4:	d919      	bls.n	8001dfa <numpad+0x30e>
 8001dc6:	8b7b      	ldrh	r3, [r7, #26]
 8001dc8:	2ba6      	cmp	r3, #166	; 0xa6
 8001dca:	d816      	bhi.n	8001dfa <numpad+0x30e>
 8001dcc:	8b3b      	ldrh	r3, [r7, #24]
 8001dce:	2b4a      	cmp	r3, #74	; 0x4a
 8001dd0:	d913      	bls.n	8001dfa <numpad+0x30e>
 8001dd2:	8b3b      	ldrh	r3, [r7, #24]
 8001dd4:	2b64      	cmp	r3, #100	; 0x64
 8001dd6:	d810      	bhi.n	8001dfa <numpad+0x30e>
 8001dd8:	4b24      	ldr	r3, [pc, #144]	; (8001e6c <numpad+0x380>)
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d10c      	bne.n	8001dfa <numpad+0x30e>
					{
					  // 2
					  num *= 10;
 8001de0:	69fa      	ldr	r2, [r7, #28]
 8001de2:	4613      	mov	r3, r2
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	4413      	add	r3, r2
 8001de8:	005b      	lsls	r3, r3, #1
 8001dea:	61fb      	str	r3, [r7, #28]
					  num += 2;
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	3302      	adds	r3, #2
 8001df0:	61fb      	str	r3, [r7, #28]
					  touch = 1;
 8001df2:	4b1e      	ldr	r3, [pc, #120]	; (8001e6c <numpad+0x380>)
 8001df4:	2201      	movs	r2, #1
 8001df6:	701a      	strb	r2, [r3, #0]
 8001df8:	e163      	b.n	80020c2 <numpad+0x5d6>
					}
					else if(((x_pos >= 171)&&(x_pos <= 224)) && ((y_pos >= 75)&&(y_pos <= 100)) && touch == 0)
 8001dfa:	8b7b      	ldrh	r3, [r7, #26]
 8001dfc:	2baa      	cmp	r3, #170	; 0xaa
 8001dfe:	d937      	bls.n	8001e70 <numpad+0x384>
 8001e00:	8b7b      	ldrh	r3, [r7, #26]
 8001e02:	2be0      	cmp	r3, #224	; 0xe0
 8001e04:	d834      	bhi.n	8001e70 <numpad+0x384>
 8001e06:	8b3b      	ldrh	r3, [r7, #24]
 8001e08:	2b4a      	cmp	r3, #74	; 0x4a
 8001e0a:	d931      	bls.n	8001e70 <numpad+0x384>
 8001e0c:	8b3b      	ldrh	r3, [r7, #24]
 8001e0e:	2b64      	cmp	r3, #100	; 0x64
 8001e10:	d82e      	bhi.n	8001e70 <numpad+0x384>
 8001e12:	4b16      	ldr	r3, [pc, #88]	; (8001e6c <numpad+0x380>)
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d12a      	bne.n	8001e70 <numpad+0x384>
					{
					  // 3
					  num *= 10;
 8001e1a:	69fa      	ldr	r2, [r7, #28]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	4413      	add	r3, r2
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	61fb      	str	r3, [r7, #28]
					  num += 3;
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	3303      	adds	r3, #3
 8001e2a:	61fb      	str	r3, [r7, #28]
					  touch = 1;
 8001e2c:	4b0f      	ldr	r3, [pc, #60]	; (8001e6c <numpad+0x380>)
 8001e2e:	2201      	movs	r2, #1
 8001e30:	701a      	strb	r2, [r3, #0]
 8001e32:	e146      	b.n	80020c2 <numpad+0x5d6>
 8001e34:	08006d70 	.word	0x08006d70
 8001e38:	08006d74 	.word	0x08006d74
 8001e3c:	08006d78 	.word	0x08006d78
 8001e40:	08006d7c 	.word	0x08006d7c
 8001e44:	08006d80 	.word	0x08006d80
 8001e48:	08006d84 	.word	0x08006d84
 8001e4c:	08006d88 	.word	0x08006d88
 8001e50:	08006d8c 	.word	0x08006d8c
 8001e54:	08006d90 	.word	0x08006d90
 8001e58:	08006d94 	.word	0x08006d94
 8001e5c:	08006d98 	.word	0x08006d98
 8001e60:	08006d9c 	.word	0x08006d9c
 8001e64:	08006da4 	.word	0x08006da4
 8001e68:	08006da8 	.word	0x08006da8
 8001e6c:	200000e4 	.word	0x200000e4
					}
					else if(((x_pos >= 45)&&(x_pos <= 103)) && ((y_pos >= 105)&&(y_pos <= 130)) && touch == 0)
 8001e70:	8b7b      	ldrh	r3, [r7, #26]
 8001e72:	2b2c      	cmp	r3, #44	; 0x2c
 8001e74:	d919      	bls.n	8001eaa <numpad+0x3be>
 8001e76:	8b7b      	ldrh	r3, [r7, #26]
 8001e78:	2b67      	cmp	r3, #103	; 0x67
 8001e7a:	d816      	bhi.n	8001eaa <numpad+0x3be>
 8001e7c:	8b3b      	ldrh	r3, [r7, #24]
 8001e7e:	2b68      	cmp	r3, #104	; 0x68
 8001e80:	d913      	bls.n	8001eaa <numpad+0x3be>
 8001e82:	8b3b      	ldrh	r3, [r7, #24]
 8001e84:	2b82      	cmp	r3, #130	; 0x82
 8001e86:	d810      	bhi.n	8001eaa <numpad+0x3be>
 8001e88:	4b89      	ldr	r3, [pc, #548]	; (80020b0 <numpad+0x5c4>)
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d10c      	bne.n	8001eaa <numpad+0x3be>
					{
					  // 4
					  num *= 10;
 8001e90:	69fa      	ldr	r2, [r7, #28]
 8001e92:	4613      	mov	r3, r2
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	4413      	add	r3, r2
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	61fb      	str	r3, [r7, #28]
					  num += 4;
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	3304      	adds	r3, #4
 8001ea0:	61fb      	str	r3, [r7, #28]
					  touch = 1;
 8001ea2:	4b83      	ldr	r3, [pc, #524]	; (80020b0 <numpad+0x5c4>)
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	701a      	strb	r2, [r3, #0]
 8001ea8:	e10b      	b.n	80020c2 <numpad+0x5d6>
					}
					else if(((x_pos >= 108)&&(x_pos <= 166)) && ((y_pos >= 105)&&(y_pos <= 130)) && touch == 0)
 8001eaa:	8b7b      	ldrh	r3, [r7, #26]
 8001eac:	2b6b      	cmp	r3, #107	; 0x6b
 8001eae:	d919      	bls.n	8001ee4 <numpad+0x3f8>
 8001eb0:	8b7b      	ldrh	r3, [r7, #26]
 8001eb2:	2ba6      	cmp	r3, #166	; 0xa6
 8001eb4:	d816      	bhi.n	8001ee4 <numpad+0x3f8>
 8001eb6:	8b3b      	ldrh	r3, [r7, #24]
 8001eb8:	2b68      	cmp	r3, #104	; 0x68
 8001eba:	d913      	bls.n	8001ee4 <numpad+0x3f8>
 8001ebc:	8b3b      	ldrh	r3, [r7, #24]
 8001ebe:	2b82      	cmp	r3, #130	; 0x82
 8001ec0:	d810      	bhi.n	8001ee4 <numpad+0x3f8>
 8001ec2:	4b7b      	ldr	r3, [pc, #492]	; (80020b0 <numpad+0x5c4>)
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d10c      	bne.n	8001ee4 <numpad+0x3f8>
					{
					  // 5
					  num *= 10;
 8001eca:	69fa      	ldr	r2, [r7, #28]
 8001ecc:	4613      	mov	r3, r2
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	4413      	add	r3, r2
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	61fb      	str	r3, [r7, #28]
					  num += 5;
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	3305      	adds	r3, #5
 8001eda:	61fb      	str	r3, [r7, #28]
					  touch = 1;
 8001edc:	4b74      	ldr	r3, [pc, #464]	; (80020b0 <numpad+0x5c4>)
 8001ede:	2201      	movs	r2, #1
 8001ee0:	701a      	strb	r2, [r3, #0]
 8001ee2:	e0ee      	b.n	80020c2 <numpad+0x5d6>
					}
					else if(((x_pos >= 171)&&(x_pos <= 224)) && ((y_pos >= 105)&&(y_pos <= 130)) && touch == 0)
 8001ee4:	8b7b      	ldrh	r3, [r7, #26]
 8001ee6:	2baa      	cmp	r3, #170	; 0xaa
 8001ee8:	d919      	bls.n	8001f1e <numpad+0x432>
 8001eea:	8b7b      	ldrh	r3, [r7, #26]
 8001eec:	2be0      	cmp	r3, #224	; 0xe0
 8001eee:	d816      	bhi.n	8001f1e <numpad+0x432>
 8001ef0:	8b3b      	ldrh	r3, [r7, #24]
 8001ef2:	2b68      	cmp	r3, #104	; 0x68
 8001ef4:	d913      	bls.n	8001f1e <numpad+0x432>
 8001ef6:	8b3b      	ldrh	r3, [r7, #24]
 8001ef8:	2b82      	cmp	r3, #130	; 0x82
 8001efa:	d810      	bhi.n	8001f1e <numpad+0x432>
 8001efc:	4b6c      	ldr	r3, [pc, #432]	; (80020b0 <numpad+0x5c4>)
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d10c      	bne.n	8001f1e <numpad+0x432>
					{
					  // 6
					  num *= 10;
 8001f04:	69fa      	ldr	r2, [r7, #28]
 8001f06:	4613      	mov	r3, r2
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	4413      	add	r3, r2
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	61fb      	str	r3, [r7, #28]
					  num += 6;
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	3306      	adds	r3, #6
 8001f14:	61fb      	str	r3, [r7, #28]
					  touch = 1;
 8001f16:	4b66      	ldr	r3, [pc, #408]	; (80020b0 <numpad+0x5c4>)
 8001f18:	2201      	movs	r2, #1
 8001f1a:	701a      	strb	r2, [r3, #0]
 8001f1c:	e0d1      	b.n	80020c2 <numpad+0x5d6>
					}
					else if(((x_pos >= 45)&&(x_pos <= 103)) && ((y_pos >= 135)&&(y_pos <= 160)) && touch == 0)
 8001f1e:	8b7b      	ldrh	r3, [r7, #26]
 8001f20:	2b2c      	cmp	r3, #44	; 0x2c
 8001f22:	d919      	bls.n	8001f58 <numpad+0x46c>
 8001f24:	8b7b      	ldrh	r3, [r7, #26]
 8001f26:	2b67      	cmp	r3, #103	; 0x67
 8001f28:	d816      	bhi.n	8001f58 <numpad+0x46c>
 8001f2a:	8b3b      	ldrh	r3, [r7, #24]
 8001f2c:	2b86      	cmp	r3, #134	; 0x86
 8001f2e:	d913      	bls.n	8001f58 <numpad+0x46c>
 8001f30:	8b3b      	ldrh	r3, [r7, #24]
 8001f32:	2ba0      	cmp	r3, #160	; 0xa0
 8001f34:	d810      	bhi.n	8001f58 <numpad+0x46c>
 8001f36:	4b5e      	ldr	r3, [pc, #376]	; (80020b0 <numpad+0x5c4>)
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d10c      	bne.n	8001f58 <numpad+0x46c>
					{
					  // 7
					  num *= 10;
 8001f3e:	69fa      	ldr	r2, [r7, #28]
 8001f40:	4613      	mov	r3, r2
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	4413      	add	r3, r2
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	61fb      	str	r3, [r7, #28]
					  num += 7;
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	3307      	adds	r3, #7
 8001f4e:	61fb      	str	r3, [r7, #28]
					  touch = 1;
 8001f50:	4b57      	ldr	r3, [pc, #348]	; (80020b0 <numpad+0x5c4>)
 8001f52:	2201      	movs	r2, #1
 8001f54:	701a      	strb	r2, [r3, #0]
 8001f56:	e0b4      	b.n	80020c2 <numpad+0x5d6>
					}
					else if(((x_pos >= 108)&&(x_pos <= 166)) && ((y_pos >= 135)&&(y_pos <= 160)) && touch == 0)
 8001f58:	8b7b      	ldrh	r3, [r7, #26]
 8001f5a:	2b6b      	cmp	r3, #107	; 0x6b
 8001f5c:	d919      	bls.n	8001f92 <numpad+0x4a6>
 8001f5e:	8b7b      	ldrh	r3, [r7, #26]
 8001f60:	2ba6      	cmp	r3, #166	; 0xa6
 8001f62:	d816      	bhi.n	8001f92 <numpad+0x4a6>
 8001f64:	8b3b      	ldrh	r3, [r7, #24]
 8001f66:	2b86      	cmp	r3, #134	; 0x86
 8001f68:	d913      	bls.n	8001f92 <numpad+0x4a6>
 8001f6a:	8b3b      	ldrh	r3, [r7, #24]
 8001f6c:	2ba0      	cmp	r3, #160	; 0xa0
 8001f6e:	d810      	bhi.n	8001f92 <numpad+0x4a6>
 8001f70:	4b4f      	ldr	r3, [pc, #316]	; (80020b0 <numpad+0x5c4>)
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d10c      	bne.n	8001f92 <numpad+0x4a6>
					{
					  // 8
					  num *= 10;
 8001f78:	69fa      	ldr	r2, [r7, #28]
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	4413      	add	r3, r2
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	61fb      	str	r3, [r7, #28]
					  num += 8;
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	3308      	adds	r3, #8
 8001f88:	61fb      	str	r3, [r7, #28]
					  touch = 1;
 8001f8a:	4b49      	ldr	r3, [pc, #292]	; (80020b0 <numpad+0x5c4>)
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	701a      	strb	r2, [r3, #0]
 8001f90:	e097      	b.n	80020c2 <numpad+0x5d6>
					}
					else if(((x_pos >= 171)&&(x_pos <= 224)) && ((y_pos >= 135)&&(y_pos <= 160)) && touch == 0)
 8001f92:	8b7b      	ldrh	r3, [r7, #26]
 8001f94:	2baa      	cmp	r3, #170	; 0xaa
 8001f96:	d919      	bls.n	8001fcc <numpad+0x4e0>
 8001f98:	8b7b      	ldrh	r3, [r7, #26]
 8001f9a:	2be0      	cmp	r3, #224	; 0xe0
 8001f9c:	d816      	bhi.n	8001fcc <numpad+0x4e0>
 8001f9e:	8b3b      	ldrh	r3, [r7, #24]
 8001fa0:	2b86      	cmp	r3, #134	; 0x86
 8001fa2:	d913      	bls.n	8001fcc <numpad+0x4e0>
 8001fa4:	8b3b      	ldrh	r3, [r7, #24]
 8001fa6:	2ba0      	cmp	r3, #160	; 0xa0
 8001fa8:	d810      	bhi.n	8001fcc <numpad+0x4e0>
 8001faa:	4b41      	ldr	r3, [pc, #260]	; (80020b0 <numpad+0x5c4>)
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d10c      	bne.n	8001fcc <numpad+0x4e0>
					{
					  // 9
					  num *= 10;
 8001fb2:	69fa      	ldr	r2, [r7, #28]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	4413      	add	r3, r2
 8001fba:	005b      	lsls	r3, r3, #1
 8001fbc:	61fb      	str	r3, [r7, #28]
					  num += 9;
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	3309      	adds	r3, #9
 8001fc2:	61fb      	str	r3, [r7, #28]
					  touch = 1;
 8001fc4:	4b3a      	ldr	r3, [pc, #232]	; (80020b0 <numpad+0x5c4>)
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	701a      	strb	r2, [r3, #0]
 8001fca:	e07a      	b.n	80020c2 <numpad+0x5d6>
					}
					else if(((x_pos >= 45)&&(x_pos <= 166)) && ((y_pos >= 165)&&(y_pos <= 190)) && touch == 0)
 8001fcc:	8b7b      	ldrh	r3, [r7, #26]
 8001fce:	2b2c      	cmp	r3, #44	; 0x2c
 8001fd0:	d916      	bls.n	8002000 <numpad+0x514>
 8001fd2:	8b7b      	ldrh	r3, [r7, #26]
 8001fd4:	2ba6      	cmp	r3, #166	; 0xa6
 8001fd6:	d813      	bhi.n	8002000 <numpad+0x514>
 8001fd8:	8b3b      	ldrh	r3, [r7, #24]
 8001fda:	2ba4      	cmp	r3, #164	; 0xa4
 8001fdc:	d910      	bls.n	8002000 <numpad+0x514>
 8001fde:	8b3b      	ldrh	r3, [r7, #24]
 8001fe0:	2bbe      	cmp	r3, #190	; 0xbe
 8001fe2:	d80d      	bhi.n	8002000 <numpad+0x514>
 8001fe4:	4b32      	ldr	r3, [pc, #200]	; (80020b0 <numpad+0x5c4>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d109      	bne.n	8002000 <numpad+0x514>
					{
					  // 0
					  num *= 10;
 8001fec:	69fa      	ldr	r2, [r7, #28]
 8001fee:	4613      	mov	r3, r2
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	4413      	add	r3, r2
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	61fb      	str	r3, [r7, #28]
					  num += 0;
					  touch = 1;
 8001ff8:	4b2d      	ldr	r3, [pc, #180]	; (80020b0 <numpad+0x5c4>)
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	701a      	strb	r2, [r3, #0]
 8001ffe:	e060      	b.n	80020c2 <numpad+0x5d6>
					}
					else if(((x_pos >= 171)&&(x_pos <= 224)) && ((y_pos >= 165)&&(y_pos <= 190)) && touch == 0)
 8002000:	8b7b      	ldrh	r3, [r7, #26]
 8002002:	2baa      	cmp	r3, #170	; 0xaa
 8002004:	d918      	bls.n	8002038 <numpad+0x54c>
 8002006:	8b7b      	ldrh	r3, [r7, #26]
 8002008:	2be0      	cmp	r3, #224	; 0xe0
 800200a:	d815      	bhi.n	8002038 <numpad+0x54c>
 800200c:	8b3b      	ldrh	r3, [r7, #24]
 800200e:	2ba4      	cmp	r3, #164	; 0xa4
 8002010:	d912      	bls.n	8002038 <numpad+0x54c>
 8002012:	8b3b      	ldrh	r3, [r7, #24]
 8002014:	2bbe      	cmp	r3, #190	; 0xbe
 8002016:	d80f      	bhi.n	8002038 <numpad+0x54c>
 8002018:	4b25      	ldr	r3, [pc, #148]	; (80020b0 <numpad+0x5c4>)
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d10b      	bne.n	8002038 <numpad+0x54c>
					{
					  // DEL
					  num /= 10;
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	4a24      	ldr	r2, [pc, #144]	; (80020b4 <numpad+0x5c8>)
 8002024:	fb82 1203 	smull	r1, r2, r2, r3
 8002028:	1092      	asrs	r2, r2, #2
 800202a:	17db      	asrs	r3, r3, #31
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	61fb      	str	r3, [r7, #28]
					  touch = 1;
 8002030:	4b1f      	ldr	r3, [pc, #124]	; (80020b0 <numpad+0x5c4>)
 8002032:	2201      	movs	r2, #1
 8002034:	701a      	strb	r2, [r3, #0]
 8002036:	e044      	b.n	80020c2 <numpad+0x5d6>
					}
					else if(((x_pos >= 45)&&(x_pos <= 134)) && ((y_pos >= 195)&&(y_pos <= 220)) && touch == 0)
 8002038:	8b7b      	ldrh	r3, [r7, #26]
 800203a:	2b2c      	cmp	r3, #44	; 0x2c
 800203c:	d914      	bls.n	8002068 <numpad+0x57c>
 800203e:	8b7b      	ldrh	r3, [r7, #26]
 8002040:	2b86      	cmp	r3, #134	; 0x86
 8002042:	d811      	bhi.n	8002068 <numpad+0x57c>
 8002044:	8b3b      	ldrh	r3, [r7, #24]
 8002046:	2bc2      	cmp	r3, #194	; 0xc2
 8002048:	d90e      	bls.n	8002068 <numpad+0x57c>
 800204a:	8b3b      	ldrh	r3, [r7, #24]
 800204c:	2bdc      	cmp	r3, #220	; 0xdc
 800204e:	d80b      	bhi.n	8002068 <numpad+0x57c>
 8002050:	4b17      	ldr	r3, [pc, #92]	; (80020b0 <numpad+0x5c4>)
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d107      	bne.n	8002068 <numpad+0x57c>
					{
					  // CANCEL
					  touch = 1;
 8002058:	4b15      	ldr	r3, [pc, #84]	; (80020b0 <numpad+0x5c4>)
 800205a:	2201      	movs	r2, #1
 800205c:	701a      	strb	r2, [r3, #0]
					  cancel = 1;
 800205e:	4b16      	ldr	r3, [pc, #88]	; (80020b8 <numpad+0x5cc>)
 8002060:	2201      	movs	r2, #1
 8002062:	701a      	strb	r2, [r3, #0]
					  return val;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	e042      	b.n	80020ee <numpad+0x602>
					}
					else if(((x_pos >= 139)&&(x_pos <= 224)) && ((y_pos >= 195)&&(y_pos <= 220)) && touch == 0)
 8002068:	8b7b      	ldrh	r3, [r7, #26]
 800206a:	2b8a      	cmp	r3, #138	; 0x8a
 800206c:	d928      	bls.n	80020c0 <numpad+0x5d4>
 800206e:	8b7b      	ldrh	r3, [r7, #26]
 8002070:	2be0      	cmp	r3, #224	; 0xe0
 8002072:	d825      	bhi.n	80020c0 <numpad+0x5d4>
 8002074:	8b3b      	ldrh	r3, [r7, #24]
 8002076:	2bc2      	cmp	r3, #194	; 0xc2
 8002078:	d922      	bls.n	80020c0 <numpad+0x5d4>
 800207a:	8b3b      	ldrh	r3, [r7, #24]
 800207c:	2bdc      	cmp	r3, #220	; 0xdc
 800207e:	d81f      	bhi.n	80020c0 <numpad+0x5d4>
 8002080:	4b0b      	ldr	r3, [pc, #44]	; (80020b0 <numpad+0x5c4>)
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d11b      	bne.n	80020c0 <numpad+0x5d4>
					{
					  // OK
					  touch = 1;
 8002088:	4b09      	ldr	r3, [pc, #36]	; (80020b0 <numpad+0x5c4>)
 800208a:	2201      	movs	r2, #1
 800208c:	701a      	strb	r2, [r3, #0]
					  ok = 1;
 800208e:	4b0b      	ldr	r3, [pc, #44]	; (80020bc <numpad+0x5d0>)
 8002090:	2201      	movs	r2, #1
 8002092:	701a      	strb	r2, [r3, #0]
					}
				}break;
 8002094:	e014      	b.n	80020c0 <numpad+0x5d4>
			}else touch = 0;
 8002096:	4b06      	ldr	r3, [pc, #24]	; (80020b0 <numpad+0x5c4>)
 8002098:	2200      	movs	r2, #0
 800209a:	701a      	strb	r2, [r3, #0]
		while(ok == 0 && cancel == 0)
 800209c:	4b07      	ldr	r3, [pc, #28]	; (80020bc <numpad+0x5d0>)
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d10e      	bne.n	80020c2 <numpad+0x5d6>
 80020a4:	4b04      	ldr	r3, [pc, #16]	; (80020b8 <numpad+0x5cc>)
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	f43f ae53 	beq.w	8001d54 <numpad+0x268>
 80020ae:	e008      	b.n	80020c2 <numpad+0x5d6>
 80020b0:	200000e4 	.word	0x200000e4
 80020b4:	66666667 	.word	0x66666667
 80020b8:	200000e2 	.word	0x200000e2
 80020bc:	200000e1 	.word	0x200000e1
				}break;
 80020c0:	bf00      	nop
	while(ok == 0 && cancel == 0)
 80020c2:	4b0d      	ldr	r3, [pc, #52]	; (80020f8 <numpad+0x60c>)
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d104      	bne.n	80020d4 <numpad+0x5e8>
 80020ca:	4b0c      	ldr	r3, [pc, #48]	; (80020fc <numpad+0x610>)
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	f43f ae23 	beq.w	8001d1a <numpad+0x22e>
		}
	}
	if(ok == 1) return num;
 80020d4:	4b08      	ldr	r3, [pc, #32]	; (80020f8 <numpad+0x60c>)
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d101      	bne.n	80020e0 <numpad+0x5f4>
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	e006      	b.n	80020ee <numpad+0x602>
	if(cancel == 1) return val;
 80020e0:	4b06      	ldr	r3, [pc, #24]	; (80020fc <numpad+0x610>)
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d101      	bne.n	80020ec <numpad+0x600>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	e000      	b.n	80020ee <numpad+0x602>
	return 0;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3720      	adds	r7, #32
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	200000e1 	.word	0x200000e1
 80020fc:	200000e2 	.word	0x200000e2

08002100 <textStatus>:
void textStatus(char* text)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af02      	add	r7, sp, #8
 8002106:	6078      	str	r0, [r7, #4]
	ILI9341_Draw_Filled_Rectangle_Coord(110, 140, 230, 162, WHITE);
 8002108:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800210c:	9300      	str	r3, [sp, #0]
 800210e:	23a2      	movs	r3, #162	; 0xa2
 8002110:	22e6      	movs	r2, #230	; 0xe6
 8002112:	218c      	movs	r1, #140	; 0x8c
 8002114:	206e      	movs	r0, #110	; 0x6e
 8002116:	f7fe fae6 	bl	80006e6 <ILI9341_Draw_Filled_Rectangle_Coord>
	ILI9341_Draw_Text(text, 115, 145, BLACK, 2, WHITE);
 800211a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800211e:	9301      	str	r3, [sp, #4]
 8002120:	2302      	movs	r3, #2
 8002122:	9300      	str	r3, [sp, #0]
 8002124:	2300      	movs	r3, #0
 8002126:	2291      	movs	r2, #145	; 0x91
 8002128:	2173      	movs	r1, #115	; 0x73
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f7fe fbd4 	bl	80008d8 <ILI9341_Draw_Text>
}
 8002130:	bf00      	nop
 8002132:	3708      	adds	r7, #8
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}

08002138 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b094      	sub	sp, #80	; 0x50
 800213c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 800213e:	f7ff fb85 	bl	800184c <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8002142:	f7ff fba9 	bl	8001898 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002146:	f001 f861 	bl	800320c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800214a:	f000 fcd7 	bl	8002afc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800214e:	f7ff fa7f 	bl	8001650 <MX_GPIO_Init>
  MX_TIM1_Init();
 8002152:	f000 fefd 	bl	8002f50 <MX_TIM1_Init>
  MX_ADC1_Init();
 8002156:	f7ff f9e1 	bl	800151c <MX_ADC1_Init>
  MX_TIM2_Init();
 800215a:	f000 ff4d 	bl	8002ff8 <MX_TIM2_Init>
  MX_SPI5_Init();
 800215e:	f000 fd4b 	bl	8002bf8 <MX_SPI5_Init>
  /* USER CODE BEGIN 2 */

  ILI9341_Init(); //initial driver setup to drive ili9341
 8002162:	f7fe fd17 	bl	8000b94 <ILI9341_Init>

  HAL_TIM_Base_Start(&htim1);
 8002166:	48ab      	ldr	r0, [pc, #684]	; (8002414 <main+0x2dc>)
 8002168:	f003 f960 	bl	800542c <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800216c:	210c      	movs	r1, #12
 800216e:	48aa      	ldr	r0, [pc, #680]	; (8002418 <main+0x2e0>)
 8002170:	f003 fa2e 	bl	80055d0 <HAL_TIM_PWM_Start>
  HAL_ADC_Start_IT(&hadc1);
 8002174:	48a9      	ldr	r0, [pc, #676]	; (800241c <main+0x2e4>)
 8002176:	f001 f91d 	bl	80033b4 <HAL_ADC_Start_IT>

  int qty = 2;
 800217a:	2302      	movs	r3, #2
 800217c:	647b      	str	r3, [r7, #68]	; 0x44
  int wireLength1 = 10;
 800217e:	230a      	movs	r3, #10
 8002180:	643b      	str	r3, [r7, #64]	; 0x40
  int wireLength2 = 25;
 8002182:	2319      	movs	r3, #25
 8002184:	63fb      	str	r3, [r7, #60]	; 0x3c
  int wireLength3 = 10;
 8002186:	230a      	movs	r3, #10
 8002188:	63bb      	str	r3, [r7, #56]	; 0x38

  htim2.Instance->CCR4 = 55;
 800218a:	4ba3      	ldr	r3, [pc, #652]	; (8002418 <main+0x2e0>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	2237      	movs	r2, #55	; 0x37
 8002190:	641a      	str	r2, [r3, #64]	; 0x40
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ILI9341_Fill_Screen(WHITE);
 8002192:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002196:	f7fe fea9 	bl	8000eec <ILI9341_Fill_Screen>
	  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 800219a:	2001      	movs	r0, #1
 800219c:	f7fe fc9c 	bl	8000ad8 <ILI9341_Set_Rotation>
	  ILI9341_Draw_Text("WIRE CUTTER &", 10, 10, BLACK, 2, WHITE);
 80021a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021a4:	9301      	str	r3, [sp, #4]
 80021a6:	2302      	movs	r3, #2
 80021a8:	9300      	str	r3, [sp, #0]
 80021aa:	2300      	movs	r3, #0
 80021ac:	220a      	movs	r2, #10
 80021ae:	210a      	movs	r1, #10
 80021b0:	489b      	ldr	r0, [pc, #620]	; (8002420 <main+0x2e8>)
 80021b2:	f7fe fb91 	bl	80008d8 <ILI9341_Draw_Text>
	  ILI9341_Draw_Text("STRIPPER MACHINE", 10, 25, BLACK, 2, WHITE);
 80021b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021ba:	9301      	str	r3, [sp, #4]
 80021bc:	2302      	movs	r3, #2
 80021be:	9300      	str	r3, [sp, #0]
 80021c0:	2300      	movs	r3, #0
 80021c2:	2219      	movs	r2, #25
 80021c4:	210a      	movs	r1, #10
 80021c6:	4897      	ldr	r0, [pc, #604]	; (8002424 <main+0x2ec>)
 80021c8:	f7fe fb86 	bl	80008d8 <ILI9341_Draw_Text>

	  ILI9341_Draw_Filled_Rectangle_Coord(20, 55, 255, 60, 0xE3E9);
 80021cc:	f24e 33e9 	movw	r3, #58345	; 0xe3e9
 80021d0:	9300      	str	r3, [sp, #0]
 80021d2:	233c      	movs	r3, #60	; 0x3c
 80021d4:	22ff      	movs	r2, #255	; 0xff
 80021d6:	2137      	movs	r1, #55	; 0x37
 80021d8:	2014      	movs	r0, #20
 80021da:	f7fe fa84 	bl	80006e6 <ILI9341_Draw_Filled_Rectangle_Coord>

	  ILI9341_Draw_Filled_Rectangle_Coord(20, 50, 55, 65, 0x5BFF);
 80021de:	f645 33ff 	movw	r3, #23551	; 0x5bff
 80021e2:	9300      	str	r3, [sp, #0]
 80021e4:	2341      	movs	r3, #65	; 0x41
 80021e6:	2237      	movs	r2, #55	; 0x37
 80021e8:	2132      	movs	r1, #50	; 0x32
 80021ea:	2014      	movs	r0, #20
 80021ec:	f7fe fa7b 	bl	80006e6 <ILI9341_Draw_Filled_Rectangle_Coord>
	  ILI9341_Draw_Filled_Rectangle_Coord(70, 50, 205, 65, 0x5BFF);
 80021f0:	f645 33ff 	movw	r3, #23551	; 0x5bff
 80021f4:	9300      	str	r3, [sp, #0]
 80021f6:	2341      	movs	r3, #65	; 0x41
 80021f8:	22cd      	movs	r2, #205	; 0xcd
 80021fa:	2132      	movs	r1, #50	; 0x32
 80021fc:	2046      	movs	r0, #70	; 0x46
 80021fe:	f7fe fa72 	bl	80006e6 <ILI9341_Draw_Filled_Rectangle_Coord>
	  ILI9341_Draw_Filled_Rectangle_Coord(220, 50, 255, 65, 0x5BFF);
 8002202:	f645 33ff 	movw	r3, #23551	; 0x5bff
 8002206:	9300      	str	r3, [sp, #0]
 8002208:	2341      	movs	r3, #65	; 0x41
 800220a:	22ff      	movs	r2, #255	; 0xff
 800220c:	2132      	movs	r1, #50	; 0x32
 800220e:	20dc      	movs	r0, #220	; 0xdc
 8002210:	f7fe fa69 	bl	80006e6 <ILI9341_Draw_Filled_Rectangle_Coord>

	  ILI9341_Draw_Filled_Rectangle_Coord(15, 75, 60, 100, 0xFFEE);
 8002214:	f64f 73ee 	movw	r3, #65518	; 0xffee
 8002218:	9300      	str	r3, [sp, #0]
 800221a:	2364      	movs	r3, #100	; 0x64
 800221c:	223c      	movs	r2, #60	; 0x3c
 800221e:	214b      	movs	r1, #75	; 0x4b
 8002220:	200f      	movs	r0, #15
 8002222:	f7fe fa60 	bl	80006e6 <ILI9341_Draw_Filled_Rectangle_Coord>
	  ILI9341_Draw_Filled_Rectangle_Coord(115, 75, 160, 100, 0xFFEE);
 8002226:	f64f 73ee 	movw	r3, #65518	; 0xffee
 800222a:	9300      	str	r3, [sp, #0]
 800222c:	2364      	movs	r3, #100	; 0x64
 800222e:	22a0      	movs	r2, #160	; 0xa0
 8002230:	214b      	movs	r1, #75	; 0x4b
 8002232:	2073      	movs	r0, #115	; 0x73
 8002234:	f7fe fa57 	bl	80006e6 <ILI9341_Draw_Filled_Rectangle_Coord>
	  ILI9341_Draw_Filled_Rectangle_Coord(215, 75, 260, 100, 0xFFEE);
 8002238:	f64f 73ee 	movw	r3, #65518	; 0xffee
 800223c:	9300      	str	r3, [sp, #0]
 800223e:	2364      	movs	r3, #100	; 0x64
 8002240:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002244:	214b      	movs	r1, #75	; 0x4b
 8002246:	20d7      	movs	r0, #215	; 0xd7
 8002248:	f7fe fa4d 	bl	80006e6 <ILI9341_Draw_Filled_Rectangle_Coord>

	  char wireBuff[5];
	  sprintf(wireBuff, "%03d", wireLength1);
 800224c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002250:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002252:	4975      	ldr	r1, [pc, #468]	; (8002428 <main+0x2f0>)
 8002254:	4618      	mov	r0, r3
 8002256:	f004 f911 	bl	800647c <siprintf>
	  ILI9341_Draw_Text(wireBuff, 20, 80, BLACK, 2, 0xFFEE);
 800225a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800225e:	f64f 73ee 	movw	r3, #65518	; 0xffee
 8002262:	9301      	str	r3, [sp, #4]
 8002264:	2302      	movs	r3, #2
 8002266:	9300      	str	r3, [sp, #0]
 8002268:	2300      	movs	r3, #0
 800226a:	2250      	movs	r2, #80	; 0x50
 800226c:	2114      	movs	r1, #20
 800226e:	f7fe fb33 	bl	80008d8 <ILI9341_Draw_Text>
//	  if(wireLength1 > 99) ILI9341_Draw_Text(wireBuff, 20, 80, BLACK, 2, 0xFFEE);
//	  else if(wireLength1 > 9) ILI9341_Draw_Text(wireBuff, 27, 80, BLACK, 2, 0xFFEE);
//	  else ILI9341_Draw_Text(wireBuff, 33, 80, BLACK, 2, 0xFFEE);
	  sprintf(wireBuff, "%03d", wireLength2);
 8002272:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002276:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002278:	496b      	ldr	r1, [pc, #428]	; (8002428 <main+0x2f0>)
 800227a:	4618      	mov	r0, r3
 800227c:	f004 f8fe 	bl	800647c <siprintf>
	  ILI9341_Draw_Text(wireBuff, 120, 80, BLACK, 2, 0xFFEE);
 8002280:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8002284:	f64f 73ee 	movw	r3, #65518	; 0xffee
 8002288:	9301      	str	r3, [sp, #4]
 800228a:	2302      	movs	r3, #2
 800228c:	9300      	str	r3, [sp, #0]
 800228e:	2300      	movs	r3, #0
 8002290:	2250      	movs	r2, #80	; 0x50
 8002292:	2178      	movs	r1, #120	; 0x78
 8002294:	f7fe fb20 	bl	80008d8 <ILI9341_Draw_Text>
//	  if(wireLength2 > 99) ILI9341_Draw_Text(wireBuff, 120, 80, BLACK, 2, 0xFFEE);
//	  else if(wireLength2 > 9) ILI9341_Draw_Text(wireBuff, 127, 80, BLACK, 2, 0xFFEE);
//	  else ILI9341_Draw_Text(wireBuff, 133, 80, BLACK, 2, 0xFFEE);
	  sprintf(wireBuff, "%03d", wireLength3);
 8002298:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800229c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800229e:	4962      	ldr	r1, [pc, #392]	; (8002428 <main+0x2f0>)
 80022a0:	4618      	mov	r0, r3
 80022a2:	f004 f8eb 	bl	800647c <siprintf>
	  ILI9341_Draw_Text(wireBuff, 220, 80, BLACK, 2, 0xFFEE);
 80022a6:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80022aa:	f64f 73ee 	movw	r3, #65518	; 0xffee
 80022ae:	9301      	str	r3, [sp, #4]
 80022b0:	2302      	movs	r3, #2
 80022b2:	9300      	str	r3, [sp, #0]
 80022b4:	2300      	movs	r3, #0
 80022b6:	2250      	movs	r2, #80	; 0x50
 80022b8:	21dc      	movs	r1, #220	; 0xdc
 80022ba:	f7fe fb0d 	bl	80008d8 <ILI9341_Draw_Text>
//	  if(wireLength3 > 99) ILI9341_Draw_Text(wireBuff, 220, 80, BLACK, 2, 0xFFEE);
//	  else if(wireLength3 > 9) ILI9341_Draw_Text(wireBuff, 227, 80, BLACK, 2, 0xFFEE);
//	  else ILI9341_Draw_Text(wireBuff, 233, 80, BLACK, 2, 0xFFEE);

	  ILI9341_Draw_Text("***dimensions are in millimeters.", 10, 105, BLACK, 1, WHITE);
 80022be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022c2:	9301      	str	r3, [sp, #4]
 80022c4:	2301      	movs	r3, #1
 80022c6:	9300      	str	r3, [sp, #0]
 80022c8:	2300      	movs	r3, #0
 80022ca:	2269      	movs	r2, #105	; 0x69
 80022cc:	210a      	movs	r1, #10
 80022ce:	4857      	ldr	r0, [pc, #348]	; (800242c <main+0x2f4>)
 80022d0:	f7fe fb02 	bl	80008d8 <ILI9341_Draw_Text>

	  ILI9341_Draw_Text("QTY :", 10, 120, BLACK, 2, WHITE);
 80022d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022d8:	9301      	str	r3, [sp, #4]
 80022da:	2302      	movs	r3, #2
 80022dc:	9300      	str	r3, [sp, #0]
 80022de:	2300      	movs	r3, #0
 80022e0:	2278      	movs	r2, #120	; 0x78
 80022e2:	210a      	movs	r1, #10
 80022e4:	4852      	ldr	r0, [pc, #328]	; (8002430 <main+0x2f8>)
 80022e6:	f7fe faf7 	bl	80008d8 <ILI9341_Draw_Text>
	  ILI9341_Draw_Filled_Rectangle_Coord(75, 115, 120, 140, 0xFFEE);
 80022ea:	f64f 73ee 	movw	r3, #65518	; 0xffee
 80022ee:	9300      	str	r3, [sp, #0]
 80022f0:	238c      	movs	r3, #140	; 0x8c
 80022f2:	2278      	movs	r2, #120	; 0x78
 80022f4:	2173      	movs	r1, #115	; 0x73
 80022f6:	204b      	movs	r0, #75	; 0x4b
 80022f8:	f7fe f9f5 	bl	80006e6 <ILI9341_Draw_Filled_Rectangle_Coord>
	  char qtyBuff[5];
	  sprintf(qtyBuff, "%03d", qty);
 80022fc:	f107 0320 	add.w	r3, r7, #32
 8002300:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002302:	4949      	ldr	r1, [pc, #292]	; (8002428 <main+0x2f0>)
 8002304:	4618      	mov	r0, r3
 8002306:	f004 f8b9 	bl	800647c <siprintf>
	  ILI9341_Draw_Text(qtyBuff, 80, 120, BLACK, 2, 0xFFEE);
 800230a:	f107 0020 	add.w	r0, r7, #32
 800230e:	f64f 73ee 	movw	r3, #65518	; 0xffee
 8002312:	9301      	str	r3, [sp, #4]
 8002314:	2302      	movs	r3, #2
 8002316:	9300      	str	r3, [sp, #0]
 8002318:	2300      	movs	r3, #0
 800231a:	2278      	movs	r2, #120	; 0x78
 800231c:	2150      	movs	r1, #80	; 0x50
 800231e:	f7fe fadb 	bl	80008d8 <ILI9341_Draw_Text>

	  ILI9341_Draw_Text("Stepper1 :", 10, 145, BLACK, 2, WHITE);
 8002322:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002326:	9301      	str	r3, [sp, #4]
 8002328:	2302      	movs	r3, #2
 800232a:	9300      	str	r3, [sp, #0]
 800232c:	2300      	movs	r3, #0
 800232e:	2291      	movs	r2, #145	; 0x91
 8002330:	210a      	movs	r1, #10
 8002332:	4840      	ldr	r0, [pc, #256]	; (8002434 <main+0x2fc>)
 8002334:	f7fe fad0 	bl	80008d8 <ILI9341_Draw_Text>
	  ILI9341_Draw_Hollow_Rectangle_Coord(140, 140, 185, 165, BLACK);
 8002338:	2300      	movs	r3, #0
 800233a:	9300      	str	r3, [sp, #0]
 800233c:	23a5      	movs	r3, #165	; 0xa5
 800233e:	22b9      	movs	r2, #185	; 0xb9
 8002340:	218c      	movs	r1, #140	; 0x8c
 8002342:	208c      	movs	r0, #140	; 0x8c
 8002344:	f7fe f94e 	bl	80005e4 <ILI9341_Draw_Hollow_Rectangle_Coord>
	  ILI9341_Draw_Text("<", 158, 145, BLACK, 2, WHITE);
 8002348:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800234c:	9301      	str	r3, [sp, #4]
 800234e:	2302      	movs	r3, #2
 8002350:	9300      	str	r3, [sp, #0]
 8002352:	2300      	movs	r3, #0
 8002354:	2291      	movs	r2, #145	; 0x91
 8002356:	219e      	movs	r1, #158	; 0x9e
 8002358:	4837      	ldr	r0, [pc, #220]	; (8002438 <main+0x300>)
 800235a:	f7fe fabd 	bl	80008d8 <ILI9341_Draw_Text>
	  ILI9341_Draw_Hollow_Rectangle_Coord(195, 140, 240, 165, BLACK);
 800235e:	2300      	movs	r3, #0
 8002360:	9300      	str	r3, [sp, #0]
 8002362:	23a5      	movs	r3, #165	; 0xa5
 8002364:	22f0      	movs	r2, #240	; 0xf0
 8002366:	218c      	movs	r1, #140	; 0x8c
 8002368:	20c3      	movs	r0, #195	; 0xc3
 800236a:	f7fe f93b 	bl	80005e4 <ILI9341_Draw_Hollow_Rectangle_Coord>
	  ILI9341_Draw_Text(">", 215, 145, BLACK, 2, WHITE);
 800236e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002372:	9301      	str	r3, [sp, #4]
 8002374:	2302      	movs	r3, #2
 8002376:	9300      	str	r3, [sp, #0]
 8002378:	2300      	movs	r3, #0
 800237a:	2291      	movs	r2, #145	; 0x91
 800237c:	21d7      	movs	r1, #215	; 0xd7
 800237e:	482f      	ldr	r0, [pc, #188]	; (800243c <main+0x304>)
 8002380:	f7fe faaa 	bl	80008d8 <ILI9341_Draw_Text>

	  ILI9341_Draw_Text("Stepper2 :", 10, 175, BLACK, 2, WHITE);
 8002384:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002388:	9301      	str	r3, [sp, #4]
 800238a:	2302      	movs	r3, #2
 800238c:	9300      	str	r3, [sp, #0]
 800238e:	2300      	movs	r3, #0
 8002390:	22af      	movs	r2, #175	; 0xaf
 8002392:	210a      	movs	r1, #10
 8002394:	482a      	ldr	r0, [pc, #168]	; (8002440 <main+0x308>)
 8002396:	f7fe fa9f 	bl	80008d8 <ILI9341_Draw_Text>
	  ILI9341_Draw_Hollow_Rectangle_Coord(140, 170, 185, 195, BLACK);
 800239a:	2300      	movs	r3, #0
 800239c:	9300      	str	r3, [sp, #0]
 800239e:	23c3      	movs	r3, #195	; 0xc3
 80023a0:	22b9      	movs	r2, #185	; 0xb9
 80023a2:	21aa      	movs	r1, #170	; 0xaa
 80023a4:	208c      	movs	r0, #140	; 0x8c
 80023a6:	f7fe f91d 	bl	80005e4 <ILI9341_Draw_Hollow_Rectangle_Coord>
	  ILI9341_Draw_Text("<", 158, 175, BLACK, 2, WHITE);
 80023aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023ae:	9301      	str	r3, [sp, #4]
 80023b0:	2302      	movs	r3, #2
 80023b2:	9300      	str	r3, [sp, #0]
 80023b4:	2300      	movs	r3, #0
 80023b6:	22af      	movs	r2, #175	; 0xaf
 80023b8:	219e      	movs	r1, #158	; 0x9e
 80023ba:	481f      	ldr	r0, [pc, #124]	; (8002438 <main+0x300>)
 80023bc:	f7fe fa8c 	bl	80008d8 <ILI9341_Draw_Text>
	  ILI9341_Draw_Hollow_Rectangle_Coord(195, 170, 240, 195, BLACK);
 80023c0:	2300      	movs	r3, #0
 80023c2:	9300      	str	r3, [sp, #0]
 80023c4:	23c3      	movs	r3, #195	; 0xc3
 80023c6:	22f0      	movs	r2, #240	; 0xf0
 80023c8:	21aa      	movs	r1, #170	; 0xaa
 80023ca:	20c3      	movs	r0, #195	; 0xc3
 80023cc:	f7fe f90a 	bl	80005e4 <ILI9341_Draw_Hollow_Rectangle_Coord>
	  ILI9341_Draw_Text(">", 215, 175, BLACK, 2, WHITE);
 80023d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023d4:	9301      	str	r3, [sp, #4]
 80023d6:	2302      	movs	r3, #2
 80023d8:	9300      	str	r3, [sp, #0]
 80023da:	2300      	movs	r3, #0
 80023dc:	22af      	movs	r2, #175	; 0xaf
 80023de:	21d7      	movs	r1, #215	; 0xd7
 80023e0:	4816      	ldr	r0, [pc, #88]	; (800243c <main+0x304>)
 80023e2:	f7fe fa79 	bl	80008d8 <ILI9341_Draw_Text>

	  ILI9341_Draw_Filled_Rectangle_Coord(70, 200, 205, 230, 0xF800);
 80023e6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80023ea:	9300      	str	r3, [sp, #0]
 80023ec:	23e6      	movs	r3, #230	; 0xe6
 80023ee:	22cd      	movs	r2, #205	; 0xcd
 80023f0:	21c8      	movs	r1, #200	; 0xc8
 80023f2:	2046      	movs	r0, #70	; 0x46
 80023f4:	f7fe f977 	bl	80006e6 <ILI9341_Draw_Filled_Rectangle_Coord>
	  ILI9341_Draw_Text("START", 110, 206, WHITE, 2, 0xF800);
 80023f8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80023fc:	9301      	str	r3, [sp, #4]
 80023fe:	2302      	movs	r3, #2
 8002400:	9300      	str	r3, [sp, #0]
 8002402:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002406:	22ce      	movs	r2, #206	; 0xce
 8002408:	216e      	movs	r1, #110	; 0x6e
 800240a:	480e      	ldr	r0, [pc, #56]	; (8002444 <main+0x30c>)
 800240c:	f7fe fa64 	bl	80008d8 <ILI9341_Draw_Text>

	  while(start == 0)
 8002410:	e1a9      	b.n	8002766 <main+0x62e>
 8002412:	bf00      	nop
 8002414:	20000154 	.word	0x20000154
 8002418:	200001a0 	.word	0x200001a0
 800241c:	20000090 	.word	0x20000090
 8002420:	08006dac 	.word	0x08006dac
 8002424:	08006dbc 	.word	0x08006dbc
 8002428:	08006dd0 	.word	0x08006dd0
 800242c:	08006dd8 	.word	0x08006dd8
 8002430:	08006dfc 	.word	0x08006dfc
 8002434:	08006e04 	.word	0x08006e04
 8002438:	08006e10 	.word	0x08006e10
 800243c:	08006e14 	.word	0x08006e14
 8002440:	08006e18 	.word	0x08006e18
 8002444:	08006e24 	.word	0x08006e24
	  {
		  if(TP_Touchpad_Pressed())
 8002448:	f7ff f858 	bl	80014fc <TP_Touchpad_Pressed>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	f000 8186 	beq.w	8002760 <main+0x628>
		  {
			  if(ok == 1 || cancel == 1) break;
 8002454:	4b97      	ldr	r3, [pc, #604]	; (80026b4 <main+0x57c>)
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	2b01      	cmp	r3, #1
 800245a:	f000 8189 	beq.w	8002770 <main+0x638>
 800245e:	4b96      	ldr	r3, [pc, #600]	; (80026b8 <main+0x580>)
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	2b01      	cmp	r3, #1
 8002464:	f000 8184 	beq.w	8002770 <main+0x638>
			  uint16_t x_pos = 0;
 8002468:	2300      	movs	r3, #0
 800246a:	863b      	strh	r3, [r7, #48]	; 0x30
			  uint16_t y_pos = 0;
 800246c:	2300      	movs	r3, #0
 800246e:	85fb      	strh	r3, [r7, #46]	; 0x2e

			  uint16_t position_array[2];

			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_SET);
 8002470:	2201      	movs	r2, #1
 8002472:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8002476:	4891      	ldr	r0, [pc, #580]	; (80026bc <main+0x584>)
 8002478:	f001 fed6 	bl	8004228 <HAL_GPIO_WritePin>

			  if(TP_Read_Coordinates(position_array) == TOUCHPAD_DATA_OK)
 800247c:	f107 031c 	add.w	r3, r7, #28
 8002480:	4618      	mov	r0, r3
 8002482:	f7fe ff79 	bl	8001378 <TP_Read_Coordinates>
 8002486:	4603      	mov	r3, r0
 8002488:	2b01      	cmp	r3, #1
 800248a:	f040 816c 	bne.w	8002766 <main+0x62e>
			  {
				  x_pos = position_array[1];
 800248e:	8bfb      	ldrh	r3, [r7, #30]
 8002490:	863b      	strh	r3, [r7, #48]	; 0x30
				  y_pos = 240 - position_array[0];
 8002492:	8bbb      	ldrh	r3, [r7, #28]
 8002494:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8002498:	85fb      	strh	r3, [r7, #46]	; 0x2e

				  if(((x_pos >= 15)&&(x_pos <= 60)) && ((y_pos >= 75)&&(y_pos <= 100)) && touch == 0)
 800249a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800249c:	2b0e      	cmp	r3, #14
 800249e:	d915      	bls.n	80024cc <main+0x394>
 80024a0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80024a2:	2b3c      	cmp	r3, #60	; 0x3c
 80024a4:	d812      	bhi.n	80024cc <main+0x394>
 80024a6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80024a8:	2b4a      	cmp	r3, #74	; 0x4a
 80024aa:	d90f      	bls.n	80024cc <main+0x394>
 80024ac:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80024ae:	2b64      	cmp	r3, #100	; 0x64
 80024b0:	d80c      	bhi.n	80024cc <main+0x394>
 80024b2:	4b83      	ldr	r3, [pc, #524]	; (80026c0 <main+0x588>)
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d108      	bne.n	80024cc <main+0x394>
				  {
					  // WireLength1
					  touch = 1;
 80024ba:	4b81      	ldr	r3, [pc, #516]	; (80026c0 <main+0x588>)
 80024bc:	2201      	movs	r2, #1
 80024be:	701a      	strb	r2, [r3, #0]
					  wireLength1 = numpad(wireLength1, "Wire Length 1");
 80024c0:	4980      	ldr	r1, [pc, #512]	; (80026c4 <main+0x58c>)
 80024c2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80024c4:	f7ff fb12 	bl	8001aec <numpad>
 80024c8:	6438      	str	r0, [r7, #64]	; 0x40
 80024ca:	e14c      	b.n	8002766 <main+0x62e>
				  }
				  else if(((x_pos >= 115)&&(x_pos <= 160)) && ((y_pos >= 75)&&(y_pos <= 100)) && touch == 0)
 80024cc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80024ce:	2b72      	cmp	r3, #114	; 0x72
 80024d0:	d915      	bls.n	80024fe <main+0x3c6>
 80024d2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80024d4:	2ba0      	cmp	r3, #160	; 0xa0
 80024d6:	d812      	bhi.n	80024fe <main+0x3c6>
 80024d8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80024da:	2b4a      	cmp	r3, #74	; 0x4a
 80024dc:	d90f      	bls.n	80024fe <main+0x3c6>
 80024de:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80024e0:	2b64      	cmp	r3, #100	; 0x64
 80024e2:	d80c      	bhi.n	80024fe <main+0x3c6>
 80024e4:	4b76      	ldr	r3, [pc, #472]	; (80026c0 <main+0x588>)
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d108      	bne.n	80024fe <main+0x3c6>
				  {
					  // WireLength2
					  touch = 1;
 80024ec:	4b74      	ldr	r3, [pc, #464]	; (80026c0 <main+0x588>)
 80024ee:	2201      	movs	r2, #1
 80024f0:	701a      	strb	r2, [r3, #0]
					  wireLength2 = numpad(wireLength2, "Wire Length 2");
 80024f2:	4975      	ldr	r1, [pc, #468]	; (80026c8 <main+0x590>)
 80024f4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80024f6:	f7ff faf9 	bl	8001aec <numpad>
 80024fa:	63f8      	str	r0, [r7, #60]	; 0x3c
 80024fc:	e133      	b.n	8002766 <main+0x62e>
				  }
				  else if(((x_pos >= 215)&&(x_pos <= 260)) && ((y_pos >= 75)&&(y_pos <= 100)) && touch == 0)
 80024fe:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002500:	2bd6      	cmp	r3, #214	; 0xd6
 8002502:	d916      	bls.n	8002532 <main+0x3fa>
 8002504:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002506:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800250a:	d812      	bhi.n	8002532 <main+0x3fa>
 800250c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800250e:	2b4a      	cmp	r3, #74	; 0x4a
 8002510:	d90f      	bls.n	8002532 <main+0x3fa>
 8002512:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002514:	2b64      	cmp	r3, #100	; 0x64
 8002516:	d80c      	bhi.n	8002532 <main+0x3fa>
 8002518:	4b69      	ldr	r3, [pc, #420]	; (80026c0 <main+0x588>)
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d108      	bne.n	8002532 <main+0x3fa>
				  {
					  // WireLength3
					  touch = 1;
 8002520:	4b67      	ldr	r3, [pc, #412]	; (80026c0 <main+0x588>)
 8002522:	2201      	movs	r2, #1
 8002524:	701a      	strb	r2, [r3, #0]
					  wireLength3 = numpad(wireLength3, "Wire Length 3");
 8002526:	4969      	ldr	r1, [pc, #420]	; (80026cc <main+0x594>)
 8002528:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800252a:	f7ff fadf 	bl	8001aec <numpad>
 800252e:	63b8      	str	r0, [r7, #56]	; 0x38
 8002530:	e119      	b.n	8002766 <main+0x62e>
				  }
				  else if(((x_pos >= 75)&&(x_pos <= 120)) && ((y_pos >= 115)&&(y_pos <= 140)) && touch == 0)
 8002532:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002534:	2b4a      	cmp	r3, #74	; 0x4a
 8002536:	d915      	bls.n	8002564 <main+0x42c>
 8002538:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800253a:	2b78      	cmp	r3, #120	; 0x78
 800253c:	d812      	bhi.n	8002564 <main+0x42c>
 800253e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002540:	2b72      	cmp	r3, #114	; 0x72
 8002542:	d90f      	bls.n	8002564 <main+0x42c>
 8002544:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002546:	2b8c      	cmp	r3, #140	; 0x8c
 8002548:	d80c      	bhi.n	8002564 <main+0x42c>
 800254a:	4b5d      	ldr	r3, [pc, #372]	; (80026c0 <main+0x588>)
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d108      	bne.n	8002564 <main+0x42c>
				  {
					  // QTY
					  touch = 1;
 8002552:	4b5b      	ldr	r3, [pc, #364]	; (80026c0 <main+0x588>)
 8002554:	2201      	movs	r2, #1
 8002556:	701a      	strb	r2, [r3, #0]
					  qty = numpad(qty, "QUANTITY");
 8002558:	495d      	ldr	r1, [pc, #372]	; (80026d0 <main+0x598>)
 800255a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800255c:	f7ff fac6 	bl	8001aec <numpad>
 8002560:	6478      	str	r0, [r7, #68]	; 0x44
 8002562:	e100      	b.n	8002766 <main+0x62e>
				  }
				  else if(((x_pos >= 140)&&(x_pos <= 185)) && ((y_pos >= 140)&&(y_pos <= 165)) && touch == 0)
 8002564:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002566:	2b8b      	cmp	r3, #139	; 0x8b
 8002568:	d92e      	bls.n	80025c8 <main+0x490>
 800256a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800256c:	2bb9      	cmp	r3, #185	; 0xb9
 800256e:	d82b      	bhi.n	80025c8 <main+0x490>
 8002570:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002572:	2b8b      	cmp	r3, #139	; 0x8b
 8002574:	d928      	bls.n	80025c8 <main+0x490>
 8002576:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002578:	2ba5      	cmp	r3, #165	; 0xa5
 800257a:	d825      	bhi.n	80025c8 <main+0x490>
 800257c:	4b50      	ldr	r3, [pc, #320]	; (80026c0 <main+0x588>)
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d121      	bne.n	80025c8 <main+0x490>
				  {
					  // Stepper1 <
					  while(TP_Touchpad_Pressed())
 8002584:	e01a      	b.n	80025bc <main+0x484>
					  {
						  HAL_GPIO_WritePin(DIR1_PORT, DIR1_PIN, GPIO_PIN_SET);
 8002586:	2201      	movs	r2, #1
 8002588:	2102      	movs	r1, #2
 800258a:	4852      	ldr	r0, [pc, #328]	; (80026d4 <main+0x59c>)
 800258c:	f001 fe4c 	bl	8004228 <HAL_GPIO_WritePin>
						  HAL_GPIO_WritePin(STEP1_PORT, STEP1_PIN, GPIO_PIN_SET);
 8002590:	2201      	movs	r2, #1
 8002592:	2101      	movs	r1, #1
 8002594:	484f      	ldr	r0, [pc, #316]	; (80026d4 <main+0x59c>)
 8002596:	f001 fe47 	bl	8004228 <HAL_GPIO_WritePin>
						  delayMicro(adc_val);
 800259a:	4b4f      	ldr	r3, [pc, #316]	; (80026d8 <main+0x5a0>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	b29b      	uxth	r3, r3
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7ff f9d9 	bl	8001958 <delayMicro>
						  HAL_GPIO_WritePin(STEP1_PORT, STEP1_PIN, GPIO_PIN_RESET);
 80025a6:	2200      	movs	r2, #0
 80025a8:	2101      	movs	r1, #1
 80025aa:	484a      	ldr	r0, [pc, #296]	; (80026d4 <main+0x59c>)
 80025ac:	f001 fe3c 	bl	8004228 <HAL_GPIO_WritePin>
						  delayMicro(adc_val);
 80025b0:	4b49      	ldr	r3, [pc, #292]	; (80026d8 <main+0x5a0>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7ff f9ce 	bl	8001958 <delayMicro>
					  while(TP_Touchpad_Pressed())
 80025bc:	f7fe ff9e 	bl	80014fc <TP_Touchpad_Pressed>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d1df      	bne.n	8002586 <main+0x44e>
				  else if(((x_pos >= 140)&&(x_pos <= 185)) && ((y_pos >= 140)&&(y_pos <= 165)) && touch == 0)
 80025c6:	e0ce      	b.n	8002766 <main+0x62e>
					  }
				  }
				  else if(((x_pos >= 195)&&(x_pos <= 240)) && ((y_pos >= 140)&&(y_pos <= 165)) && touch == 0)
 80025c8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80025ca:	2bc2      	cmp	r3, #194	; 0xc2
 80025cc:	d92e      	bls.n	800262c <main+0x4f4>
 80025ce:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80025d0:	2bf0      	cmp	r3, #240	; 0xf0
 80025d2:	d82b      	bhi.n	800262c <main+0x4f4>
 80025d4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80025d6:	2b8b      	cmp	r3, #139	; 0x8b
 80025d8:	d928      	bls.n	800262c <main+0x4f4>
 80025da:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80025dc:	2ba5      	cmp	r3, #165	; 0xa5
 80025de:	d825      	bhi.n	800262c <main+0x4f4>
 80025e0:	4b37      	ldr	r3, [pc, #220]	; (80026c0 <main+0x588>)
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d121      	bne.n	800262c <main+0x4f4>
				  {
					  // Stepper1 >
					  while(TP_Touchpad_Pressed())
 80025e8:	e01a      	b.n	8002620 <main+0x4e8>
					  {
						  HAL_GPIO_WritePin(DIR1_PORT, DIR1_PIN, GPIO_PIN_RESET);
 80025ea:	2200      	movs	r2, #0
 80025ec:	2102      	movs	r1, #2
 80025ee:	4839      	ldr	r0, [pc, #228]	; (80026d4 <main+0x59c>)
 80025f0:	f001 fe1a 	bl	8004228 <HAL_GPIO_WritePin>
						  HAL_GPIO_WritePin(STEP1_PORT, STEP1_PIN, GPIO_PIN_SET);
 80025f4:	2201      	movs	r2, #1
 80025f6:	2101      	movs	r1, #1
 80025f8:	4836      	ldr	r0, [pc, #216]	; (80026d4 <main+0x59c>)
 80025fa:	f001 fe15 	bl	8004228 <HAL_GPIO_WritePin>
						  delayMicro(adc_val);
 80025fe:	4b36      	ldr	r3, [pc, #216]	; (80026d8 <main+0x5a0>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	b29b      	uxth	r3, r3
 8002604:	4618      	mov	r0, r3
 8002606:	f7ff f9a7 	bl	8001958 <delayMicro>
						  HAL_GPIO_WritePin(STEP1_PORT, STEP1_PIN, GPIO_PIN_RESET);
 800260a:	2200      	movs	r2, #0
 800260c:	2101      	movs	r1, #1
 800260e:	4831      	ldr	r0, [pc, #196]	; (80026d4 <main+0x59c>)
 8002610:	f001 fe0a 	bl	8004228 <HAL_GPIO_WritePin>
						  delayMicro(adc_val);
 8002614:	4b30      	ldr	r3, [pc, #192]	; (80026d8 <main+0x5a0>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	b29b      	uxth	r3, r3
 800261a:	4618      	mov	r0, r3
 800261c:	f7ff f99c 	bl	8001958 <delayMicro>
					  while(TP_Touchpad_Pressed())
 8002620:	f7fe ff6c 	bl	80014fc <TP_Touchpad_Pressed>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d1df      	bne.n	80025ea <main+0x4b2>
				  else if(((x_pos >= 195)&&(x_pos <= 240)) && ((y_pos >= 140)&&(y_pos <= 165)) && touch == 0)
 800262a:	e09c      	b.n	8002766 <main+0x62e>
					  }
				  }
				  else if(((x_pos >= 140)&&(x_pos <= 185)) && ((y_pos >= 170)&&(y_pos <= 195)) && touch == 0)
 800262c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800262e:	2b8b      	cmp	r3, #139	; 0x8b
 8002630:	d92e      	bls.n	8002690 <main+0x558>
 8002632:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002634:	2bb9      	cmp	r3, #185	; 0xb9
 8002636:	d82b      	bhi.n	8002690 <main+0x558>
 8002638:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800263a:	2ba9      	cmp	r3, #169	; 0xa9
 800263c:	d928      	bls.n	8002690 <main+0x558>
 800263e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002640:	2bc3      	cmp	r3, #195	; 0xc3
 8002642:	d825      	bhi.n	8002690 <main+0x558>
 8002644:	4b1e      	ldr	r3, [pc, #120]	; (80026c0 <main+0x588>)
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d121      	bne.n	8002690 <main+0x558>
				  {
					  // Stepper2 <
					  while(TP_Touchpad_Pressed())
 800264c:	e01a      	b.n	8002684 <main+0x54c>
					  {
						  HAL_GPIO_WritePin(DIR2_PORT, DIR2_PIN, GPIO_PIN_RESET);
 800264e:	2200      	movs	r2, #0
 8002650:	2101      	movs	r1, #1
 8002652:	4822      	ldr	r0, [pc, #136]	; (80026dc <main+0x5a4>)
 8002654:	f001 fde8 	bl	8004228 <HAL_GPIO_WritePin>
						  HAL_GPIO_WritePin(STEP2_PORT, STEP2_PIN, GPIO_PIN_SET);
 8002658:	2201      	movs	r2, #1
 800265a:	2102      	movs	r1, #2
 800265c:	481f      	ldr	r0, [pc, #124]	; (80026dc <main+0x5a4>)
 800265e:	f001 fde3 	bl	8004228 <HAL_GPIO_WritePin>
						  delayMicro(adc_val);
 8002662:	4b1d      	ldr	r3, [pc, #116]	; (80026d8 <main+0x5a0>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	b29b      	uxth	r3, r3
 8002668:	4618      	mov	r0, r3
 800266a:	f7ff f975 	bl	8001958 <delayMicro>
						  HAL_GPIO_WritePin(STEP2_PORT, STEP2_PIN, GPIO_PIN_RESET);
 800266e:	2200      	movs	r2, #0
 8002670:	2102      	movs	r1, #2
 8002672:	481a      	ldr	r0, [pc, #104]	; (80026dc <main+0x5a4>)
 8002674:	f001 fdd8 	bl	8004228 <HAL_GPIO_WritePin>
						  delayMicro(adc_val);
 8002678:	4b17      	ldr	r3, [pc, #92]	; (80026d8 <main+0x5a0>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	b29b      	uxth	r3, r3
 800267e:	4618      	mov	r0, r3
 8002680:	f7ff f96a 	bl	8001958 <delayMicro>
					  while(TP_Touchpad_Pressed())
 8002684:	f7fe ff3a 	bl	80014fc <TP_Touchpad_Pressed>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1df      	bne.n	800264e <main+0x516>
				  else if(((x_pos >= 140)&&(x_pos <= 185)) && ((y_pos >= 170)&&(y_pos <= 195)) && touch == 0)
 800268e:	e06a      	b.n	8002766 <main+0x62e>
					  }
				  }
				  else if(((x_pos >= 195)&&(x_pos <= 240)) && ((y_pos >= 170)&&(y_pos <= 195)) && touch == 0)
 8002690:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002692:	2bc2      	cmp	r3, #194	; 0xc2
 8002694:	d945      	bls.n	8002722 <main+0x5ea>
 8002696:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002698:	2bf0      	cmp	r3, #240	; 0xf0
 800269a:	d842      	bhi.n	8002722 <main+0x5ea>
 800269c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800269e:	2ba9      	cmp	r3, #169	; 0xa9
 80026a0:	d93f      	bls.n	8002722 <main+0x5ea>
 80026a2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80026a4:	2bc3      	cmp	r3, #195	; 0xc3
 80026a6:	d83c      	bhi.n	8002722 <main+0x5ea>
 80026a8:	4b05      	ldr	r3, [pc, #20]	; (80026c0 <main+0x588>)
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d138      	bne.n	8002722 <main+0x5ea>
				  {
					  // Stepper2 >
					  while(TP_Touchpad_Pressed())
 80026b0:	e031      	b.n	8002716 <main+0x5de>
 80026b2:	bf00      	nop
 80026b4:	200000e1 	.word	0x200000e1
 80026b8:	200000e2 	.word	0x200000e2
 80026bc:	40020400 	.word	0x40020400
 80026c0:	200000e4 	.word	0x200000e4
 80026c4:	08006e2c 	.word	0x08006e2c
 80026c8:	08006e3c 	.word	0x08006e3c
 80026cc:	08006e4c 	.word	0x08006e4c
 80026d0:	08006e5c 	.word	0x08006e5c
 80026d4:	40020c00 	.word	0x40020c00
 80026d8:	200000e8 	.word	0x200000e8
 80026dc:	40021400 	.word	0x40021400
					  {
						  HAL_GPIO_WritePin(DIR2_PORT, DIR2_PIN, GPIO_PIN_SET);
 80026e0:	2201      	movs	r2, #1
 80026e2:	2101      	movs	r1, #1
 80026e4:	48a0      	ldr	r0, [pc, #640]	; (8002968 <main+0x830>)
 80026e6:	f001 fd9f 	bl	8004228 <HAL_GPIO_WritePin>
						  HAL_GPIO_WritePin(STEP2_PORT, STEP2_PIN, GPIO_PIN_SET);
 80026ea:	2201      	movs	r2, #1
 80026ec:	2102      	movs	r1, #2
 80026ee:	489e      	ldr	r0, [pc, #632]	; (8002968 <main+0x830>)
 80026f0:	f001 fd9a 	bl	8004228 <HAL_GPIO_WritePin>
						  delayMicro(adc_val);
 80026f4:	4b9d      	ldr	r3, [pc, #628]	; (800296c <main+0x834>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	4618      	mov	r0, r3
 80026fc:	f7ff f92c 	bl	8001958 <delayMicro>
						  HAL_GPIO_WritePin(STEP2_PORT, STEP2_PIN, GPIO_PIN_RESET);
 8002700:	2200      	movs	r2, #0
 8002702:	2102      	movs	r1, #2
 8002704:	4898      	ldr	r0, [pc, #608]	; (8002968 <main+0x830>)
 8002706:	f001 fd8f 	bl	8004228 <HAL_GPIO_WritePin>
						  delayMicro(adc_val);
 800270a:	4b98      	ldr	r3, [pc, #608]	; (800296c <main+0x834>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	b29b      	uxth	r3, r3
 8002710:	4618      	mov	r0, r3
 8002712:	f7ff f921 	bl	8001958 <delayMicro>
					  while(TP_Touchpad_Pressed())
 8002716:	f7fe fef1 	bl	80014fc <TP_Touchpad_Pressed>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d1df      	bne.n	80026e0 <main+0x5a8>
				  else if(((x_pos >= 195)&&(x_pos <= 240)) && ((y_pos >= 170)&&(y_pos <= 195)) && touch == 0)
 8002720:	e021      	b.n	8002766 <main+0x62e>
					  }
				  }
				  else if(((x_pos >= 70)&&(x_pos <= 205)) && ((y_pos >= 200)&&(y_pos <= 230)) && touch == 0)
 8002722:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002724:	2b45      	cmp	r3, #69	; 0x45
 8002726:	d91e      	bls.n	8002766 <main+0x62e>
 8002728:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800272a:	2bcd      	cmp	r3, #205	; 0xcd
 800272c:	d81b      	bhi.n	8002766 <main+0x62e>
 800272e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002730:	2bc7      	cmp	r3, #199	; 0xc7
 8002732:	d918      	bls.n	8002766 <main+0x62e>
 8002734:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002736:	2be6      	cmp	r3, #230	; 0xe6
 8002738:	d815      	bhi.n	8002766 <main+0x62e>
 800273a:	4b8d      	ldr	r3, [pc, #564]	; (8002970 <main+0x838>)
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d111      	bne.n	8002766 <main+0x62e>
				  {
					  // Start
					  touch = 1;
 8002742:	4b8b      	ldr	r3, [pc, #556]	; (8002970 <main+0x838>)
 8002744:	2201      	movs	r2, #1
 8002746:	701a      	strb	r2, [r3, #0]
					  ILI9341_Draw_Filled_Rectangle_Coord(70, 200, 205, 230, BLACK);
 8002748:	2300      	movs	r3, #0
 800274a:	9300      	str	r3, [sp, #0]
 800274c:	23e6      	movs	r3, #230	; 0xe6
 800274e:	22cd      	movs	r2, #205	; 0xcd
 8002750:	21c8      	movs	r1, #200	; 0xc8
 8002752:	2046      	movs	r0, #70	; 0x46
 8002754:	f7fd ffc7 	bl	80006e6 <ILI9341_Draw_Filled_Rectangle_Coord>
					  start = 1;
 8002758:	4b86      	ldr	r3, [pc, #536]	; (8002974 <main+0x83c>)
 800275a:	2201      	movs	r2, #1
 800275c:	701a      	strb	r2, [r3, #0]
 800275e:	e002      	b.n	8002766 <main+0x62e>
				  }
			  }
		  } else touch = 0;
 8002760:	4b83      	ldr	r3, [pc, #524]	; (8002970 <main+0x838>)
 8002762:	2200      	movs	r2, #0
 8002764:	701a      	strb	r2, [r3, #0]
	  while(start == 0)
 8002766:	4b83      	ldr	r3, [pc, #524]	; (8002974 <main+0x83c>)
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	2b00      	cmp	r3, #0
 800276c:	f43f ae6c 	beq.w	8002448 <main+0x310>
	  }

	  if(start == 1)
 8002770:	4b80      	ldr	r3, [pc, #512]	; (8002974 <main+0x83c>)
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	2b01      	cmp	r3, #1
 8002776:	f040 8198 	bne.w	8002aaa <main+0x972>
	  {
		  ILI9341_Fill_Screen(WHITE);
 800277a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800277e:	f7fe fbb5 	bl	8000eec <ILI9341_Fill_Screen>
		  ILI9341_Draw_Text("WIRE CUTTER &", 10, 10, BLACK, 2, WHITE);
 8002782:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002786:	9301      	str	r3, [sp, #4]
 8002788:	2302      	movs	r3, #2
 800278a:	9300      	str	r3, [sp, #0]
 800278c:	2300      	movs	r3, #0
 800278e:	220a      	movs	r2, #10
 8002790:	210a      	movs	r1, #10
 8002792:	4879      	ldr	r0, [pc, #484]	; (8002978 <main+0x840>)
 8002794:	f7fe f8a0 	bl	80008d8 <ILI9341_Draw_Text>
		  ILI9341_Draw_Text("STRIPPER MACHINE", 10, 25, BLACK, 2, WHITE);
 8002798:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800279c:	9301      	str	r3, [sp, #4]
 800279e:	2302      	movs	r3, #2
 80027a0:	9300      	str	r3, [sp, #0]
 80027a2:	2300      	movs	r3, #0
 80027a4:	2219      	movs	r2, #25
 80027a6:	210a      	movs	r1, #10
 80027a8:	4874      	ldr	r0, [pc, #464]	; (800297c <main+0x844>)
 80027aa:	f7fe f895 	bl	80008d8 <ILI9341_Draw_Text>

		  ILI9341_Draw_Filled_Rectangle_Coord(20, 55, 255, 60, 0xE3E9);
 80027ae:	f24e 33e9 	movw	r3, #58345	; 0xe3e9
 80027b2:	9300      	str	r3, [sp, #0]
 80027b4:	233c      	movs	r3, #60	; 0x3c
 80027b6:	22ff      	movs	r2, #255	; 0xff
 80027b8:	2137      	movs	r1, #55	; 0x37
 80027ba:	2014      	movs	r0, #20
 80027bc:	f7fd ff93 	bl	80006e6 <ILI9341_Draw_Filled_Rectangle_Coord>

		  ILI9341_Draw_Filled_Rectangle_Coord(20, 50, 55, 65, 0x5BFF);
 80027c0:	f645 33ff 	movw	r3, #23551	; 0x5bff
 80027c4:	9300      	str	r3, [sp, #0]
 80027c6:	2341      	movs	r3, #65	; 0x41
 80027c8:	2237      	movs	r2, #55	; 0x37
 80027ca:	2132      	movs	r1, #50	; 0x32
 80027cc:	2014      	movs	r0, #20
 80027ce:	f7fd ff8a 	bl	80006e6 <ILI9341_Draw_Filled_Rectangle_Coord>
		  ILI9341_Draw_Filled_Rectangle_Coord(70, 50, 205, 65, 0x5BFF);
 80027d2:	f645 33ff 	movw	r3, #23551	; 0x5bff
 80027d6:	9300      	str	r3, [sp, #0]
 80027d8:	2341      	movs	r3, #65	; 0x41
 80027da:	22cd      	movs	r2, #205	; 0xcd
 80027dc:	2132      	movs	r1, #50	; 0x32
 80027de:	2046      	movs	r0, #70	; 0x46
 80027e0:	f7fd ff81 	bl	80006e6 <ILI9341_Draw_Filled_Rectangle_Coord>
		  ILI9341_Draw_Filled_Rectangle_Coord(220, 50, 255, 65, 0x5BFF);
 80027e4:	f645 33ff 	movw	r3, #23551	; 0x5bff
 80027e8:	9300      	str	r3, [sp, #0]
 80027ea:	2341      	movs	r3, #65	; 0x41
 80027ec:	22ff      	movs	r2, #255	; 0xff
 80027ee:	2132      	movs	r1, #50	; 0x32
 80027f0:	20dc      	movs	r0, #220	; 0xdc
 80027f2:	f7fd ff78 	bl	80006e6 <ILI9341_Draw_Filled_Rectangle_Coord>

		  ILI9341_Draw_Filled_Rectangle_Coord(15, 75, 60, 100, 0xFFEE);
 80027f6:	f64f 73ee 	movw	r3, #65518	; 0xffee
 80027fa:	9300      	str	r3, [sp, #0]
 80027fc:	2364      	movs	r3, #100	; 0x64
 80027fe:	223c      	movs	r2, #60	; 0x3c
 8002800:	214b      	movs	r1, #75	; 0x4b
 8002802:	200f      	movs	r0, #15
 8002804:	f7fd ff6f 	bl	80006e6 <ILI9341_Draw_Filled_Rectangle_Coord>
		  ILI9341_Draw_Filled_Rectangle_Coord(115, 75, 160, 100, 0xFFEE);
 8002808:	f64f 73ee 	movw	r3, #65518	; 0xffee
 800280c:	9300      	str	r3, [sp, #0]
 800280e:	2364      	movs	r3, #100	; 0x64
 8002810:	22a0      	movs	r2, #160	; 0xa0
 8002812:	214b      	movs	r1, #75	; 0x4b
 8002814:	2073      	movs	r0, #115	; 0x73
 8002816:	f7fd ff66 	bl	80006e6 <ILI9341_Draw_Filled_Rectangle_Coord>
		  ILI9341_Draw_Filled_Rectangle_Coord(215, 75, 260, 100, 0xFFEE);
 800281a:	f64f 73ee 	movw	r3, #65518	; 0xffee
 800281e:	9300      	str	r3, [sp, #0]
 8002820:	2364      	movs	r3, #100	; 0x64
 8002822:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002826:	214b      	movs	r1, #75	; 0x4b
 8002828:	20d7      	movs	r0, #215	; 0xd7
 800282a:	f7fd ff5c 	bl	80006e6 <ILI9341_Draw_Filled_Rectangle_Coord>

		  char wireBuff[5];
		  sprintf(wireBuff, "%03d", wireLength1);
 800282e:	f107 0314 	add.w	r3, r7, #20
 8002832:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002834:	4952      	ldr	r1, [pc, #328]	; (8002980 <main+0x848>)
 8002836:	4618      	mov	r0, r3
 8002838:	f003 fe20 	bl	800647c <siprintf>
		  ILI9341_Draw_Text(wireBuff, 20, 80, BLACK, 2, 0xFFEE);
 800283c:	f107 0014 	add.w	r0, r7, #20
 8002840:	f64f 73ee 	movw	r3, #65518	; 0xffee
 8002844:	9301      	str	r3, [sp, #4]
 8002846:	2302      	movs	r3, #2
 8002848:	9300      	str	r3, [sp, #0]
 800284a:	2300      	movs	r3, #0
 800284c:	2250      	movs	r2, #80	; 0x50
 800284e:	2114      	movs	r1, #20
 8002850:	f7fe f842 	bl	80008d8 <ILI9341_Draw_Text>
		  sprintf(wireBuff, "%03d", wireLength2);
 8002854:	f107 0314 	add.w	r3, r7, #20
 8002858:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800285a:	4949      	ldr	r1, [pc, #292]	; (8002980 <main+0x848>)
 800285c:	4618      	mov	r0, r3
 800285e:	f003 fe0d 	bl	800647c <siprintf>
		  ILI9341_Draw_Text(wireBuff, 120, 80, BLACK, 2, 0xFFEE);
 8002862:	f107 0014 	add.w	r0, r7, #20
 8002866:	f64f 73ee 	movw	r3, #65518	; 0xffee
 800286a:	9301      	str	r3, [sp, #4]
 800286c:	2302      	movs	r3, #2
 800286e:	9300      	str	r3, [sp, #0]
 8002870:	2300      	movs	r3, #0
 8002872:	2250      	movs	r2, #80	; 0x50
 8002874:	2178      	movs	r1, #120	; 0x78
 8002876:	f7fe f82f 	bl	80008d8 <ILI9341_Draw_Text>
		  sprintf(wireBuff, "%03d", wireLength3);
 800287a:	f107 0314 	add.w	r3, r7, #20
 800287e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002880:	493f      	ldr	r1, [pc, #252]	; (8002980 <main+0x848>)
 8002882:	4618      	mov	r0, r3
 8002884:	f003 fdfa 	bl	800647c <siprintf>
		  ILI9341_Draw_Text(wireBuff, 220, 80, BLACK, 2, 0xFFEE);
 8002888:	f107 0014 	add.w	r0, r7, #20
 800288c:	f64f 73ee 	movw	r3, #65518	; 0xffee
 8002890:	9301      	str	r3, [sp, #4]
 8002892:	2302      	movs	r3, #2
 8002894:	9300      	str	r3, [sp, #0]
 8002896:	2300      	movs	r3, #0
 8002898:	2250      	movs	r2, #80	; 0x50
 800289a:	21dc      	movs	r1, #220	; 0xdc
 800289c:	f7fe f81c 	bl	80008d8 <ILI9341_Draw_Text>

		  ILI9341_Draw_Text("***dimensions are in millimeters.", 10, 105, BLACK, 1, WHITE);
 80028a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028a4:	9301      	str	r3, [sp, #4]
 80028a6:	2301      	movs	r3, #1
 80028a8:	9300      	str	r3, [sp, #0]
 80028aa:	2300      	movs	r3, #0
 80028ac:	2269      	movs	r2, #105	; 0x69
 80028ae:	210a      	movs	r1, #10
 80028b0:	4834      	ldr	r0, [pc, #208]	; (8002984 <main+0x84c>)
 80028b2:	f7fe f811 	bl	80008d8 <ILI9341_Draw_Text>

		  ILI9341_Draw_Text("QTY :", 10, 120, BLACK, 2, WHITE);
 80028b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028ba:	9301      	str	r3, [sp, #4]
 80028bc:	2302      	movs	r3, #2
 80028be:	9300      	str	r3, [sp, #0]
 80028c0:	2300      	movs	r3, #0
 80028c2:	2278      	movs	r2, #120	; 0x78
 80028c4:	210a      	movs	r1, #10
 80028c6:	4830      	ldr	r0, [pc, #192]	; (8002988 <main+0x850>)
 80028c8:	f7fe f806 	bl	80008d8 <ILI9341_Draw_Text>
		  ILI9341_Draw_Filled_Rectangle_Coord(75, 115, 120, 140, 0xFFEE);
 80028cc:	f64f 73ee 	movw	r3, #65518	; 0xffee
 80028d0:	9300      	str	r3, [sp, #0]
 80028d2:	238c      	movs	r3, #140	; 0x8c
 80028d4:	2278      	movs	r2, #120	; 0x78
 80028d6:	2173      	movs	r1, #115	; 0x73
 80028d8:	204b      	movs	r0, #75	; 0x4b
 80028da:	f7fd ff04 	bl	80006e6 <ILI9341_Draw_Filled_Rectangle_Coord>
		  char qtyBuff[5];
		  sprintf(qtyBuff, "%03d", qty);
 80028de:	f107 030c 	add.w	r3, r7, #12
 80028e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80028e4:	4926      	ldr	r1, [pc, #152]	; (8002980 <main+0x848>)
 80028e6:	4618      	mov	r0, r3
 80028e8:	f003 fdc8 	bl	800647c <siprintf>
		  ILI9341_Draw_Text(qtyBuff, 80, 120, BLACK, 2, 0xFFEE);
 80028ec:	f107 000c 	add.w	r0, r7, #12
 80028f0:	f64f 73ee 	movw	r3, #65518	; 0xffee
 80028f4:	9301      	str	r3, [sp, #4]
 80028f6:	2302      	movs	r3, #2
 80028f8:	9300      	str	r3, [sp, #0]
 80028fa:	2300      	movs	r3, #0
 80028fc:	2278      	movs	r2, #120	; 0x78
 80028fe:	2150      	movs	r1, #80	; 0x50
 8002900:	f7fd ffea 	bl	80008d8 <ILI9341_Draw_Text>
		  ILI9341_Draw_Text("Status :", 10, 145, BLACK, 2, WHITE);
 8002904:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002908:	9301      	str	r3, [sp, #4]
 800290a:	2302      	movs	r3, #2
 800290c:	9300      	str	r3, [sp, #0]
 800290e:	2300      	movs	r3, #0
 8002910:	2291      	movs	r2, #145	; 0x91
 8002912:	210a      	movs	r1, #10
 8002914:	481d      	ldr	r0, [pc, #116]	; (800298c <main+0x854>)
 8002916:	f7fd ffdf 	bl	80008d8 <ILI9341_Draw_Text>
		  ILI9341_Draw_Text("Running", 115, 145, BLACK, 2, WHITE);
 800291a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800291e:	9301      	str	r3, [sp, #4]
 8002920:	2302      	movs	r3, #2
 8002922:	9300      	str	r3, [sp, #0]
 8002924:	2300      	movs	r3, #0
 8002926:	2291      	movs	r2, #145	; 0x91
 8002928:	2173      	movs	r1, #115	; 0x73
 800292a:	4819      	ldr	r0, [pc, #100]	; (8002990 <main+0x858>)
 800292c:	f7fd ffd4 	bl	80008d8 <ILI9341_Draw_Text>
		  ILI9341_Draw_Text("Finished QTY :", 10, 170, BLACK, 2, WHITE);
 8002930:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002934:	9301      	str	r3, [sp, #4]
 8002936:	2302      	movs	r3, #2
 8002938:	9300      	str	r3, [sp, #0]
 800293a:	2300      	movs	r3, #0
 800293c:	22aa      	movs	r2, #170	; 0xaa
 800293e:	210a      	movs	r1, #10
 8002940:	4814      	ldr	r0, [pc, #80]	; (8002994 <main+0x85c>)
 8002942:	f7fd ffc9 	bl	80008d8 <ILI9341_Draw_Text>
		  ILI9341_Draw_Filled_Rectangle_Coord(187, 165, 227, 190, 0xFFEE);
 8002946:	f64f 73ee 	movw	r3, #65518	; 0xffee
 800294a:	9300      	str	r3, [sp, #0]
 800294c:	23be      	movs	r3, #190	; 0xbe
 800294e:	22e3      	movs	r2, #227	; 0xe3
 8002950:	21a5      	movs	r1, #165	; 0xa5
 8002952:	20bb      	movs	r0, #187	; 0xbb
 8002954:	f7fd fec7 	bl	80006e6 <ILI9341_Draw_Filled_Rectangle_Coord>

		  char buff[5];
		  int i = 0;
 8002958:	2300      	movs	r3, #0
 800295a:	637b      	str	r3, [r7, #52]	; 0x34
		  uint8_t work = 0;
 800295c:	2300      	movs	r3, #0
 800295e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		  for(i = 0; i < qty && cancel == 0; i+=1)
 8002962:	2300      	movs	r3, #0
 8002964:	637b      	str	r3, [r7, #52]	; 0x34
 8002966:	e05f      	b.n	8002a28 <main+0x8f0>
 8002968:	40021400 	.word	0x40021400
 800296c:	200000e8 	.word	0x200000e8
 8002970:	200000e4 	.word	0x200000e4
 8002974:	200000e0 	.word	0x200000e0
 8002978:	08006dac 	.word	0x08006dac
 800297c:	08006dbc 	.word	0x08006dbc
 8002980:	08006dd0 	.word	0x08006dd0
 8002984:	08006dd8 	.word	0x08006dd8
 8002988:	08006dfc 	.word	0x08006dfc
 800298c:	08006e68 	.word	0x08006e68
 8002990:	08006e74 	.word	0x08006e74
 8002994:	08006e7c 	.word	0x08006e7c
		  {
			  work = 0;
 8002998:	2300      	movs	r3, #0
 800299a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			  sprintf(buff, "%03d", i);
 800299e:	1d3b      	adds	r3, r7, #4
 80029a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029a2:	494e      	ldr	r1, [pc, #312]	; (8002adc <main+0x9a4>)
 80029a4:	4618      	mov	r0, r3
 80029a6:	f003 fd69 	bl	800647c <siprintf>
			  ILI9341_Draw_Text(buff, 190, 170, BLACK, 2, 0xFFEE);
 80029aa:	1d38      	adds	r0, r7, #4
 80029ac:	f64f 73ee 	movw	r3, #65518	; 0xffee
 80029b0:	9301      	str	r3, [sp, #4]
 80029b2:	2302      	movs	r3, #2
 80029b4:	9300      	str	r3, [sp, #0]
 80029b6:	2300      	movs	r3, #0
 80029b8:	22aa      	movs	r2, #170	; 0xaa
 80029ba:	21be      	movs	r1, #190	; 0xbe
 80029bc:	f7fd ff8c 	bl	80008d8 <ILI9341_Draw_Text>

			  step1(wireLength1, 0);
 80029c0:	2100      	movs	r1, #0
 80029c2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80029c4:	f7fe ffe4 	bl	8001990 <step1>
			  if(wireLength1 > 0)
 80029c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	dd03      	ble.n	80029d6 <main+0x89e>
			  {
				  step2(200, 0);
 80029ce:	2100      	movs	r1, #0
 80029d0:	20c8      	movs	r0, #200	; 0xc8
 80029d2:	f7ff f83d 	bl	8001a50 <step2>
			  }

			  step1(wireLength2, 0);
 80029d6:	2100      	movs	r1, #0
 80029d8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80029da:	f7fe ffd9 	bl	8001990 <step1>
			  if(wireLength3 > 0)
 80029de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	dd03      	ble.n	80029ec <main+0x8b4>
			  {
				  step2(200, 0);
 80029e4:	2100      	movs	r1, #0
 80029e6:	20c8      	movs	r0, #200	; 0xc8
 80029e8:	f7ff f832 	bl	8001a50 <step2>
			  }

			  step1(wireLength3, 0);
 80029ec:	2100      	movs	r1, #0
 80029ee:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80029f0:	f7fe ffce 	bl	8001990 <step1>
			  htim2.Instance->CCR4 = 62;
 80029f4:	4b3a      	ldr	r3, [pc, #232]	; (8002ae0 <main+0x9a8>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	223e      	movs	r2, #62	; 0x3e
 80029fa:	641a      	str	r2, [r3, #64]	; 0x40
			  HAL_Delay(2000);
 80029fc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002a00:	f000 fc70 	bl	80032e4 <HAL_Delay>
			  step2(200, 0);
 8002a04:	2100      	movs	r1, #0
 8002a06:	20c8      	movs	r0, #200	; 0xc8
 8002a08:	f7ff f822 	bl	8001a50 <step2>
			  htim2.Instance->CCR4 = 55;
 8002a0c:	4b34      	ldr	r3, [pc, #208]	; (8002ae0 <main+0x9a8>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2237      	movs	r2, #55	; 0x37
 8002a12:	641a      	str	r2, [r3, #64]	; 0x40
			  HAL_Delay(2000);
 8002a14:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002a18:	f000 fc64 	bl	80032e4 <HAL_Delay>
			  work = 1;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		  for(i = 0; i < qty && cancel == 0; i+=1)
 8002a22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a24:	3301      	adds	r3, #1
 8002a26:	637b      	str	r3, [r7, #52]	; 0x34
 8002a28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	da03      	bge.n	8002a38 <main+0x900>
 8002a30:	4b2c      	ldr	r3, [pc, #176]	; (8002ae4 <main+0x9ac>)
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d0af      	beq.n	8002998 <main+0x860>
		  }
		  if(i == qty && work == 1)
 8002a38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d118      	bne.n	8002a72 <main+0x93a>
 8002a40:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d114      	bne.n	8002a72 <main+0x93a>
		  {
			  sprintf(buff, "%03d", i);
 8002a48:	1d3b      	adds	r3, r7, #4
 8002a4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a4c:	4923      	ldr	r1, [pc, #140]	; (8002adc <main+0x9a4>)
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f003 fd14 	bl	800647c <siprintf>
			  ILI9341_Draw_Text(buff, 190, 170, BLACK, 2, 0xFFEE);
 8002a54:	1d38      	adds	r0, r7, #4
 8002a56:	f64f 73ee 	movw	r3, #65518	; 0xffee
 8002a5a:	9301      	str	r3, [sp, #4]
 8002a5c:	2302      	movs	r3, #2
 8002a5e:	9300      	str	r3, [sp, #0]
 8002a60:	2300      	movs	r3, #0
 8002a62:	22aa      	movs	r2, #170	; 0xaa
 8002a64:	21be      	movs	r1, #190	; 0xbe
 8002a66:	f7fd ff37 	bl	80008d8 <ILI9341_Draw_Text>
			  textStatus("Complete");
 8002a6a:	481f      	ldr	r0, [pc, #124]	; (8002ae8 <main+0x9b0>)
 8002a6c:	f7ff fb48 	bl	8002100 <textStatus>
 8002a70:	e010      	b.n	8002a94 <main+0x95c>
		  }
		  else
		  {
			  sprintf(buff, "%03d", i);
 8002a72:	1d3b      	adds	r3, r7, #4
 8002a74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a76:	4919      	ldr	r1, [pc, #100]	; (8002adc <main+0x9a4>)
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f003 fcff 	bl	800647c <siprintf>
			  ILI9341_Draw_Text(buff, 190, 170, BLACK, 2, 0xFFEE);
 8002a7e:	1d38      	adds	r0, r7, #4
 8002a80:	f64f 73ee 	movw	r3, #65518	; 0xffee
 8002a84:	9301      	str	r3, [sp, #4]
 8002a86:	2302      	movs	r3, #2
 8002a88:	9300      	str	r3, [sp, #0]
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	22aa      	movs	r2, #170	; 0xaa
 8002a8e:	21be      	movs	r1, #190	; 0xbe
 8002a90:	f7fd ff22 	bl	80008d8 <ILI9341_Draw_Text>
		  }
		  ILI9341_Draw_Text("---Press Any to Continue---", 70, 205, BLACK, 1, WHITE);
 8002a94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a98:	9301      	str	r3, [sp, #4]
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	9300      	str	r3, [sp, #0]
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	22cd      	movs	r2, #205	; 0xcd
 8002aa2:	2146      	movs	r1, #70	; 0x46
 8002aa4:	4811      	ldr	r0, [pc, #68]	; (8002aec <main+0x9b4>)
 8002aa6:	f7fd ff17 	bl	80008d8 <ILI9341_Draw_Text>
	  }

	  htim2.Instance->CCR4 = 55;
 8002aaa:	4b0d      	ldr	r3, [pc, #52]	; (8002ae0 <main+0x9a8>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2237      	movs	r2, #55	; 0x37
 8002ab0:	641a      	str	r2, [r3, #64]	; 0x40
	  ok = 0;
 8002ab2:	4b0f      	ldr	r3, [pc, #60]	; (8002af0 <main+0x9b8>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	701a      	strb	r2, [r3, #0]
	  cancel = 0;
 8002ab8:	4b0a      	ldr	r3, [pc, #40]	; (8002ae4 <main+0x9ac>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	701a      	strb	r2, [r3, #0]
	  start = 0;
 8002abe:	4b0d      	ldr	r3, [pc, #52]	; (8002af4 <main+0x9bc>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	701a      	strb	r2, [r3, #0]
	  pause = 0;
 8002ac4:	4b0c      	ldr	r3, [pc, #48]	; (8002af8 <main+0x9c0>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	701a      	strb	r2, [r3, #0]

	  while(1)
	  {
		  if(TP_Touchpad_Pressed())
 8002aca:	f7fe fd17 	bl	80014fc <TP_Touchpad_Pressed>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d100      	bne.n	8002ad6 <main+0x99e>
 8002ad4:	e7f9      	b.n	8002aca <main+0x992>
		  {
			  break;
 8002ad6:	bf00      	nop
  {
 8002ad8:	f7ff bb5b 	b.w	8002192 <main+0x5a>
 8002adc:	08006dd0 	.word	0x08006dd0
 8002ae0:	200001a0 	.word	0x200001a0
 8002ae4:	200000e2 	.word	0x200000e2
 8002ae8:	08006e8c 	.word	0x08006e8c
 8002aec:	08006e98 	.word	0x08006e98
 8002af0:	200000e1 	.word	0x200000e1
 8002af4:	200000e0 	.word	0x200000e0
 8002af8:	200000e3 	.word	0x200000e3

08002afc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b094      	sub	sp, #80	; 0x50
 8002b00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b02:	f107 031c 	add.w	r3, r7, #28
 8002b06:	2234      	movs	r2, #52	; 0x34
 8002b08:	2100      	movs	r1, #0
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f003 fcae 	bl	800646c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b10:	f107 0308 	add.w	r3, r7, #8
 8002b14:	2200      	movs	r2, #0
 8002b16:	601a      	str	r2, [r3, #0]
 8002b18:	605a      	str	r2, [r3, #4]
 8002b1a:	609a      	str	r2, [r3, #8]
 8002b1c:	60da      	str	r2, [r3, #12]
 8002b1e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b20:	4b2b      	ldr	r3, [pc, #172]	; (8002bd0 <SystemClock_Config+0xd4>)
 8002b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b24:	4a2a      	ldr	r2, [pc, #168]	; (8002bd0 <SystemClock_Config+0xd4>)
 8002b26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b2a:	6413      	str	r3, [r2, #64]	; 0x40
 8002b2c:	4b28      	ldr	r3, [pc, #160]	; (8002bd0 <SystemClock_Config+0xd4>)
 8002b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b34:	607b      	str	r3, [r7, #4]
 8002b36:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b38:	4b26      	ldr	r3, [pc, #152]	; (8002bd4 <SystemClock_Config+0xd8>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a25      	ldr	r2, [pc, #148]	; (8002bd4 <SystemClock_Config+0xd8>)
 8002b3e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b42:	6013      	str	r3, [r2, #0]
 8002b44:	4b23      	ldr	r3, [pc, #140]	; (8002bd4 <SystemClock_Config+0xd8>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002b4c:	603b      	str	r3, [r7, #0]
 8002b4e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002b50:	2302      	movs	r3, #2
 8002b52:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002b54:	2301      	movs	r3, #1
 8002b56:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002b58:	2310      	movs	r3, #16
 8002b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b5c:	2302      	movs	r3, #2
 8002b5e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002b60:	2300      	movs	r3, #0
 8002b62:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002b64:	2308      	movs	r3, #8
 8002b66:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8002b68:	23d8      	movs	r3, #216	; 0xd8
 8002b6a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002b6c:	2302      	movs	r3, #2
 8002b6e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002b70:	2302      	movs	r3, #2
 8002b72:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002b74:	2302      	movs	r3, #2
 8002b76:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b78:	f107 031c 	add.w	r3, r7, #28
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f001 fbfb 	bl	8004378 <HAL_RCC_OscConfig>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d001      	beq.n	8002b8c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8002b88:	f000 f830 	bl	8002bec <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002b8c:	f001 fba4 	bl	80042d8 <HAL_PWREx_EnableOverDrive>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002b96:	f000 f829 	bl	8002bec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b9a:	230f      	movs	r3, #15
 8002b9c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b9e:	2302      	movs	r3, #2
 8002ba0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002ba6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002baa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002bac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bb0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002bb2:	f107 0308 	add.w	r3, r7, #8
 8002bb6:	2107      	movs	r1, #7
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f001 fe8b 	bl	80048d4 <HAL_RCC_ClockConfig>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d001      	beq.n	8002bc8 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8002bc4:	f000 f812 	bl	8002bec <Error_Handler>
  }
}
 8002bc8:	bf00      	nop
 8002bca:	3750      	adds	r7, #80	; 0x50
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	40023800 	.word	0x40023800
 8002bd4:	40007000 	.word	0x40007000

08002bd8 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]

}
 8002be0:	bf00      	nop
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr

08002bec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002bec:	b480      	push	{r7}
 8002bee:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002bf0:	b672      	cpsid	i
}
 8002bf2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002bf4:	e7fe      	b.n	8002bf4 <Error_Handler+0x8>
	...

08002bf8 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8002bfc:	4b1b      	ldr	r3, [pc, #108]	; (8002c6c <MX_SPI5_Init+0x74>)
 8002bfe:	4a1c      	ldr	r2, [pc, #112]	; (8002c70 <MX_SPI5_Init+0x78>)
 8002c00:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8002c02:	4b1a      	ldr	r3, [pc, #104]	; (8002c6c <MX_SPI5_Init+0x74>)
 8002c04:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002c08:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8002c0a:	4b18      	ldr	r3, [pc, #96]	; (8002c6c <MX_SPI5_Init+0x74>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8002c10:	4b16      	ldr	r3, [pc, #88]	; (8002c6c <MX_SPI5_Init+0x74>)
 8002c12:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002c16:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c18:	4b14      	ldr	r3, [pc, #80]	; (8002c6c <MX_SPI5_Init+0x74>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002c1e:	4b13      	ldr	r3, [pc, #76]	; (8002c6c <MX_SPI5_Init+0x74>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8002c24:	4b11      	ldr	r3, [pc, #68]	; (8002c6c <MX_SPI5_Init+0x74>)
 8002c26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c2a:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c2c:	4b0f      	ldr	r3, [pc, #60]	; (8002c6c <MX_SPI5_Init+0x74>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c32:	4b0e      	ldr	r3, [pc, #56]	; (8002c6c <MX_SPI5_Init+0x74>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c38:	4b0c      	ldr	r3, [pc, #48]	; (8002c6c <MX_SPI5_Init+0x74>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c3e:	4b0b      	ldr	r3, [pc, #44]	; (8002c6c <MX_SPI5_Init+0x74>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 8002c44:	4b09      	ldr	r3, [pc, #36]	; (8002c6c <MX_SPI5_Init+0x74>)
 8002c46:	2207      	movs	r2, #7
 8002c48:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002c4a:	4b08      	ldr	r3, [pc, #32]	; (8002c6c <MX_SPI5_Init+0x74>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002c50:	4b06      	ldr	r3, [pc, #24]	; (8002c6c <MX_SPI5_Init+0x74>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8002c56:	4805      	ldr	r0, [pc, #20]	; (8002c6c <MX_SPI5_Init+0x74>)
 8002c58:	f001 ffee 	bl	8004c38 <HAL_SPI_Init>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d001      	beq.n	8002c66 <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 8002c62:	f7ff ffc3 	bl	8002bec <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8002c66:	bf00      	nop
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	200000ec 	.word	0x200000ec
 8002c70:	40015000 	.word	0x40015000

08002c74 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b08a      	sub	sp, #40	; 0x28
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c7c:	f107 0314 	add.w	r3, r7, #20
 8002c80:	2200      	movs	r2, #0
 8002c82:	601a      	str	r2, [r3, #0]
 8002c84:	605a      	str	r2, [r3, #4]
 8002c86:	609a      	str	r2, [r3, #8]
 8002c88:	60da      	str	r2, [r3, #12]
 8002c8a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a17      	ldr	r2, [pc, #92]	; (8002cf0 <HAL_SPI_MspInit+0x7c>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d128      	bne.n	8002ce8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002c96:	4b17      	ldr	r3, [pc, #92]	; (8002cf4 <HAL_SPI_MspInit+0x80>)
 8002c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c9a:	4a16      	ldr	r2, [pc, #88]	; (8002cf4 <HAL_SPI_MspInit+0x80>)
 8002c9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ca0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ca2:	4b14      	ldr	r3, [pc, #80]	; (8002cf4 <HAL_SPI_MspInit+0x80>)
 8002ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002caa:	613b      	str	r3, [r7, #16]
 8002cac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002cae:	4b11      	ldr	r3, [pc, #68]	; (8002cf4 <HAL_SPI_MspInit+0x80>)
 8002cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb2:	4a10      	ldr	r2, [pc, #64]	; (8002cf4 <HAL_SPI_MspInit+0x80>)
 8002cb4:	f043 0320 	orr.w	r3, r3, #32
 8002cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8002cba:	4b0e      	ldr	r3, [pc, #56]	; (8002cf4 <HAL_SPI_MspInit+0x80>)
 8002cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cbe:	f003 0320 	and.w	r3, r3, #32
 8002cc2:	60fb      	str	r3, [r7, #12]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002cc6:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002cca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ccc:	2302      	movs	r3, #2
 8002cce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002cd8:	2305      	movs	r3, #5
 8002cda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002cdc:	f107 0314 	add.w	r3, r7, #20
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	4805      	ldr	r0, [pc, #20]	; (8002cf8 <HAL_SPI_MspInit+0x84>)
 8002ce4:	f001 f8dc 	bl	8003ea0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8002ce8:	bf00      	nop
 8002cea:	3728      	adds	r7, #40	; 0x28
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	40015000 	.word	0x40015000
 8002cf4:	40023800 	.word	0x40023800
 8002cf8:	40021400 	.word	0x40021400

08002cfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002d02:	4b0f      	ldr	r3, [pc, #60]	; (8002d40 <HAL_MspInit+0x44>)
 8002d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d06:	4a0e      	ldr	r2, [pc, #56]	; (8002d40 <HAL_MspInit+0x44>)
 8002d08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d0c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d0e:	4b0c      	ldr	r3, [pc, #48]	; (8002d40 <HAL_MspInit+0x44>)
 8002d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d16:	607b      	str	r3, [r7, #4]
 8002d18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d1a:	4b09      	ldr	r3, [pc, #36]	; (8002d40 <HAL_MspInit+0x44>)
 8002d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d1e:	4a08      	ldr	r2, [pc, #32]	; (8002d40 <HAL_MspInit+0x44>)
 8002d20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d24:	6453      	str	r3, [r2, #68]	; 0x44
 8002d26:	4b06      	ldr	r3, [pc, #24]	; (8002d40 <HAL_MspInit+0x44>)
 8002d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d2e:	603b      	str	r3, [r7, #0]
 8002d30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d32:	bf00      	nop
 8002d34:	370c      	adds	r7, #12
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	40023800 	.word	0x40023800

08002d44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d48:	e7fe      	b.n	8002d48 <NMI_Handler+0x4>

08002d4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d4a:	b480      	push	{r7}
 8002d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d4e:	e7fe      	b.n	8002d4e <HardFault_Handler+0x4>

08002d50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d54:	e7fe      	b.n	8002d54 <MemManage_Handler+0x4>

08002d56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d56:	b480      	push	{r7}
 8002d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d5a:	e7fe      	b.n	8002d5a <BusFault_Handler+0x4>

08002d5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d60:	e7fe      	b.n	8002d60 <UsageFault_Handler+0x4>

08002d62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d62:	b480      	push	{r7}
 8002d64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d66:	bf00      	nop
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr

08002d70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d70:	b480      	push	{r7}
 8002d72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d74:	bf00      	nop
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr

08002d7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d7e:	b480      	push	{r7}
 8002d80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d82:	bf00      	nop
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr

08002d8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d90:	f000 fa88 	bl	80032a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d94:	bf00      	nop
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8002d9c:	2180      	movs	r1, #128	; 0x80
 8002d9e:	4814      	ldr	r0, [pc, #80]	; (8002df0 <EXTI2_IRQHandler+0x58>)
 8002da0:	f001 fa5b 	bl	800425a <HAL_GPIO_TogglePin>
	currentMillis = HAL_GetTick();
 8002da4:	f000 fa92 	bl	80032cc <HAL_GetTick>
 8002da8:	4603      	mov	r3, r0
 8002daa:	4a12      	ldr	r2, [pc, #72]	; (8002df4 <EXTI2_IRQHandler+0x5c>)
 8002dac:	6013      	str	r3, [r2, #0]
	if(currentMillis - previousMillis > 10)
 8002dae:	4b11      	ldr	r3, [pc, #68]	; (8002df4 <EXTI2_IRQHandler+0x5c>)
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	4b11      	ldr	r3, [pc, #68]	; (8002df8 <EXTI2_IRQHandler+0x60>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	2b0a      	cmp	r3, #10
 8002dba:	d914      	bls.n	8002de6 <EXTI2_IRQHandler+0x4e>
	{
		if(pause == 0) {
 8002dbc:	4b0f      	ldr	r3, [pc, #60]	; (8002dfc <EXTI2_IRQHandler+0x64>)
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d106      	bne.n	8002dd2 <EXTI2_IRQHandler+0x3a>
			pause = 1;
 8002dc4:	4b0d      	ldr	r3, [pc, #52]	; (8002dfc <EXTI2_IRQHandler+0x64>)
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	701a      	strb	r2, [r3, #0]
			textStatus("PAUSE");
 8002dca:	480d      	ldr	r0, [pc, #52]	; (8002e00 <EXTI2_IRQHandler+0x68>)
 8002dcc:	f7ff f998 	bl	8002100 <textStatus>
 8002dd0:	e005      	b.n	8002dde <EXTI2_IRQHandler+0x46>
		}
		else
		{
			pause = 0;
 8002dd2:	4b0a      	ldr	r3, [pc, #40]	; (8002dfc <EXTI2_IRQHandler+0x64>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	701a      	strb	r2, [r3, #0]
			textStatus("RUNNING");
 8002dd8:	480a      	ldr	r0, [pc, #40]	; (8002e04 <EXTI2_IRQHandler+0x6c>)
 8002dda:	f7ff f991 	bl	8002100 <textStatus>
		}
		previousMillis = currentMillis;
 8002dde:	4b05      	ldr	r3, [pc, #20]	; (8002df4 <EXTI2_IRQHandler+0x5c>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a05      	ldr	r2, [pc, #20]	; (8002df8 <EXTI2_IRQHandler+0x60>)
 8002de4:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_PAUSE_Pin);
 8002de6:	2004      	movs	r0, #4
 8002de8:	f001 fa52 	bl	8004290 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002dec:	bf00      	nop
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	40020400 	.word	0x40020400
 8002df4:	200000d8 	.word	0x200000d8
 8002df8:	200000dc 	.word	0x200000dc
 8002dfc:	200000e3 	.word	0x200000e3
 8002e00:	08006eb4 	.word	0x08006eb4
 8002e04:	08006ebc 	.word	0x08006ebc

08002e08 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002e12:	4812      	ldr	r0, [pc, #72]	; (8002e5c <EXTI3_IRQHandler+0x54>)
 8002e14:	f001 fa08 	bl	8004228 <HAL_GPIO_WritePin>
	currentMillis = HAL_GetTick();
 8002e18:	f000 fa58 	bl	80032cc <HAL_GetTick>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	4a10      	ldr	r2, [pc, #64]	; (8002e60 <EXTI3_IRQHandler+0x58>)
 8002e20:	6013      	str	r3, [r2, #0]
	if(currentMillis - previousMillis > 10)
 8002e22:	4b0f      	ldr	r3, [pc, #60]	; (8002e60 <EXTI3_IRQHandler+0x58>)
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	4b0f      	ldr	r3, [pc, #60]	; (8002e64 <EXTI3_IRQHandler+0x5c>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	2b0a      	cmp	r3, #10
 8002e2e:	d910      	bls.n	8002e52 <EXTI3_IRQHandler+0x4a>
	{
		if(cancel == 0) {
 8002e30:	4b0d      	ldr	r3, [pc, #52]	; (8002e68 <EXTI3_IRQHandler+0x60>)
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d108      	bne.n	8002e4a <EXTI3_IRQHandler+0x42>
			cancel = 1;
 8002e38:	4b0b      	ldr	r3, [pc, #44]	; (8002e68 <EXTI3_IRQHandler+0x60>)
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	701a      	strb	r2, [r3, #0]
			pause = 0;
 8002e3e:	4b0b      	ldr	r3, [pc, #44]	; (8002e6c <EXTI3_IRQHandler+0x64>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	701a      	strb	r2, [r3, #0]
			textStatus("CANCEL");
 8002e44:	480a      	ldr	r0, [pc, #40]	; (8002e70 <EXTI3_IRQHandler+0x68>)
 8002e46:	f7ff f95b 	bl	8002100 <textStatus>
		}
		previousMillis = currentMillis;
 8002e4a:	4b05      	ldr	r3, [pc, #20]	; (8002e60 <EXTI3_IRQHandler+0x58>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a05      	ldr	r2, [pc, #20]	; (8002e64 <EXTI3_IRQHandler+0x5c>)
 8002e50:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_CANCEL_Pin);
 8002e52:	2008      	movs	r0, #8
 8002e54:	f001 fa1c 	bl	8004290 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002e58:	bf00      	nop
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	40020400 	.word	0x40020400
 8002e60:	200000d8 	.word	0x200000d8
 8002e64:	200000dc 	.word	0x200000dc
 8002e68:	200000e2 	.word	0x200000e2
 8002e6c:	200000e3 	.word	0x200000e3
 8002e70:	08006ec4 	.word	0x08006ec4

08002e74 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN ADC_IRQn 0 */

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	2101      	movs	r1, #1
 8002e7e:	480d      	ldr	r0, [pc, #52]	; (8002eb4 <ADC_IRQHandler+0x40>)
 8002e80:	f001 f9d2 	bl	8004228 <HAL_GPIO_WritePin>
	adc_val = map(HAL_ADC_GetValue(&hadc1), 0, 4095, 2500, 700);
 8002e84:	480c      	ldr	r0, [pc, #48]	; (8002eb8 <ADC_IRQHandler+0x44>)
 8002e86:	f000 fc7d 	bl	8003784 <HAL_ADC_GetValue>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8002e92:	9300      	str	r3, [sp, #0]
 8002e94:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8002e98:	f640 72ff 	movw	r2, #4095	; 0xfff
 8002e9c:	2100      	movs	r1, #0
 8002e9e:	f7fe fd3f 	bl	8001920 <map>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	4a05      	ldr	r2, [pc, #20]	; (8002ebc <ADC_IRQHandler+0x48>)
 8002ea6:	6013      	str	r3, [r2, #0]

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002ea8:	4803      	ldr	r0, [pc, #12]	; (8002eb8 <ADC_IRQHandler+0x44>)
 8002eaa:	f000 fb5b 	bl	8003564 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002eae:	bf00      	nop
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	40020400 	.word	0x40020400
 8002eb8:	20000090 	.word	0x20000090
 8002ebc:	200000e8 	.word	0x200000e8

08002ec0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b086      	sub	sp, #24
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ec8:	4a14      	ldr	r2, [pc, #80]	; (8002f1c <_sbrk+0x5c>)
 8002eca:	4b15      	ldr	r3, [pc, #84]	; (8002f20 <_sbrk+0x60>)
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ed4:	4b13      	ldr	r3, [pc, #76]	; (8002f24 <_sbrk+0x64>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d102      	bne.n	8002ee2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002edc:	4b11      	ldr	r3, [pc, #68]	; (8002f24 <_sbrk+0x64>)
 8002ede:	4a12      	ldr	r2, [pc, #72]	; (8002f28 <_sbrk+0x68>)
 8002ee0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ee2:	4b10      	ldr	r3, [pc, #64]	; (8002f24 <_sbrk+0x64>)
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4413      	add	r3, r2
 8002eea:	693a      	ldr	r2, [r7, #16]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d207      	bcs.n	8002f00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ef0:	f003 fa92 	bl	8006418 <__errno>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	220c      	movs	r2, #12
 8002ef8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002efa:	f04f 33ff 	mov.w	r3, #4294967295
 8002efe:	e009      	b.n	8002f14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f00:	4b08      	ldr	r3, [pc, #32]	; (8002f24 <_sbrk+0x64>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f06:	4b07      	ldr	r3, [pc, #28]	; (8002f24 <_sbrk+0x64>)
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4413      	add	r3, r2
 8002f0e:	4a05      	ldr	r2, [pc, #20]	; (8002f24 <_sbrk+0x64>)
 8002f10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f12:	68fb      	ldr	r3, [r7, #12]
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3718      	adds	r7, #24
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	20080000 	.word	0x20080000
 8002f20:	00000400 	.word	0x00000400
 8002f24:	20000150 	.word	0x20000150
 8002f28:	20000200 	.word	0x20000200

08002f2c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f30:	4b06      	ldr	r3, [pc, #24]	; (8002f4c <SystemInit+0x20>)
 8002f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f36:	4a05      	ldr	r2, [pc, #20]	; (8002f4c <SystemInit+0x20>)
 8002f38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f40:	bf00      	nop
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop
 8002f4c:	e000ed00 	.word	0xe000ed00

08002f50 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b088      	sub	sp, #32
 8002f54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f56:	f107 0310 	add.w	r3, r7, #16
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	601a      	str	r2, [r3, #0]
 8002f5e:	605a      	str	r2, [r3, #4]
 8002f60:	609a      	str	r2, [r3, #8]
 8002f62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f64:	1d3b      	adds	r3, r7, #4
 8002f66:	2200      	movs	r2, #0
 8002f68:	601a      	str	r2, [r3, #0]
 8002f6a:	605a      	str	r2, [r3, #4]
 8002f6c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002f6e:	4b20      	ldr	r3, [pc, #128]	; (8002ff0 <MX_TIM1_Init+0xa0>)
 8002f70:	4a20      	ldr	r2, [pc, #128]	; (8002ff4 <MX_TIM1_Init+0xa4>)
 8002f72:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 216-1;
 8002f74:	4b1e      	ldr	r3, [pc, #120]	; (8002ff0 <MX_TIM1_Init+0xa0>)
 8002f76:	22d7      	movs	r2, #215	; 0xd7
 8002f78:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f7a:	4b1d      	ldr	r3, [pc, #116]	; (8002ff0 <MX_TIM1_Init+0xa0>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002f80:	4b1b      	ldr	r3, [pc, #108]	; (8002ff0 <MX_TIM1_Init+0xa0>)
 8002f82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f86:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f88:	4b19      	ldr	r3, [pc, #100]	; (8002ff0 <MX_TIM1_Init+0xa0>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002f8e:	4b18      	ldr	r3, [pc, #96]	; (8002ff0 <MX_TIM1_Init+0xa0>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f94:	4b16      	ldr	r3, [pc, #88]	; (8002ff0 <MX_TIM1_Init+0xa0>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002f9a:	4815      	ldr	r0, [pc, #84]	; (8002ff0 <MX_TIM1_Init+0xa0>)
 8002f9c:	f002 f9ee 	bl	800537c <HAL_TIM_Base_Init>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d001      	beq.n	8002faa <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8002fa6:	f7ff fe21 	bl	8002bec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002faa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002fb0:	f107 0310 	add.w	r3, r7, #16
 8002fb4:	4619      	mov	r1, r3
 8002fb6:	480e      	ldr	r0, [pc, #56]	; (8002ff0 <MX_TIM1_Init+0xa0>)
 8002fb8:	f002 fd18 	bl	80059ec <HAL_TIM_ConfigClockSource>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d001      	beq.n	8002fc6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8002fc2:	f7ff fe13 	bl	8002bec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002fd2:	1d3b      	adds	r3, r7, #4
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	4806      	ldr	r0, [pc, #24]	; (8002ff0 <MX_TIM1_Init+0xa0>)
 8002fd8:	f003 f990 	bl	80062fc <HAL_TIMEx_MasterConfigSynchronization>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d001      	beq.n	8002fe6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002fe2:	f7ff fe03 	bl	8002bec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002fe6:	bf00      	nop
 8002fe8:	3720      	adds	r7, #32
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	20000154 	.word	0x20000154
 8002ff4:	40010000 	.word	0x40010000

08002ff8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b08e      	sub	sp, #56	; 0x38
 8002ffc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ffe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003002:	2200      	movs	r2, #0
 8003004:	601a      	str	r2, [r3, #0]
 8003006:	605a      	str	r2, [r3, #4]
 8003008:	609a      	str	r2, [r3, #8]
 800300a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800300c:	f107 031c 	add.w	r3, r7, #28
 8003010:	2200      	movs	r2, #0
 8003012:	601a      	str	r2, [r3, #0]
 8003014:	605a      	str	r2, [r3, #4]
 8003016:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003018:	463b      	mov	r3, r7
 800301a:	2200      	movs	r2, #0
 800301c:	601a      	str	r2, [r3, #0]
 800301e:	605a      	str	r2, [r3, #4]
 8003020:	609a      	str	r2, [r3, #8]
 8003022:	60da      	str	r2, [r3, #12]
 8003024:	611a      	str	r2, [r3, #16]
 8003026:	615a      	str	r2, [r3, #20]
 8003028:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800302a:	4b2e      	ldr	r3, [pc, #184]	; (80030e4 <MX_TIM2_Init+0xec>)
 800302c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003030:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2160-1;
 8003032:	4b2c      	ldr	r3, [pc, #176]	; (80030e4 <MX_TIM2_Init+0xec>)
 8003034:	f640 026f 	movw	r2, #2159	; 0x86f
 8003038:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800303a:	4b2a      	ldr	r3, [pc, #168]	; (80030e4 <MX_TIM2_Init+0xec>)
 800303c:	2200      	movs	r2, #0
 800303e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8003040:	4b28      	ldr	r3, [pc, #160]	; (80030e4 <MX_TIM2_Init+0xec>)
 8003042:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003046:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003048:	4b26      	ldr	r3, [pc, #152]	; (80030e4 <MX_TIM2_Init+0xec>)
 800304a:	2200      	movs	r2, #0
 800304c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800304e:	4b25      	ldr	r3, [pc, #148]	; (80030e4 <MX_TIM2_Init+0xec>)
 8003050:	2200      	movs	r2, #0
 8003052:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003054:	4823      	ldr	r0, [pc, #140]	; (80030e4 <MX_TIM2_Init+0xec>)
 8003056:	f002 f991 	bl	800537c <HAL_TIM_Base_Init>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d001      	beq.n	8003064 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8003060:	f7ff fdc4 	bl	8002bec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003064:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003068:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800306a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800306e:	4619      	mov	r1, r3
 8003070:	481c      	ldr	r0, [pc, #112]	; (80030e4 <MX_TIM2_Init+0xec>)
 8003072:	f002 fcbb 	bl	80059ec <HAL_TIM_ConfigClockSource>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d001      	beq.n	8003080 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 800307c:	f7ff fdb6 	bl	8002bec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003080:	4818      	ldr	r0, [pc, #96]	; (80030e4 <MX_TIM2_Init+0xec>)
 8003082:	f002 fa43 	bl	800550c <HAL_TIM_PWM_Init>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d001      	beq.n	8003090 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 800308c:	f7ff fdae 	bl	8002bec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003090:	2300      	movs	r3, #0
 8003092:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003094:	2300      	movs	r3, #0
 8003096:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003098:	f107 031c 	add.w	r3, r7, #28
 800309c:	4619      	mov	r1, r3
 800309e:	4811      	ldr	r0, [pc, #68]	; (80030e4 <MX_TIM2_Init+0xec>)
 80030a0:	f003 f92c 	bl	80062fc <HAL_TIMEx_MasterConfigSynchronization>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d001      	beq.n	80030ae <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80030aa:	f7ff fd9f 	bl	8002bec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80030ae:	2360      	movs	r3, #96	; 0x60
 80030b0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80030b2:	2300      	movs	r3, #0
 80030b4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80030b6:	2300      	movs	r3, #0
 80030b8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80030ba:	2300      	movs	r3, #0
 80030bc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80030be:	463b      	mov	r3, r7
 80030c0:	220c      	movs	r2, #12
 80030c2:	4619      	mov	r1, r3
 80030c4:	4807      	ldr	r0, [pc, #28]	; (80030e4 <MX_TIM2_Init+0xec>)
 80030c6:	f002 fb7d 	bl	80057c4 <HAL_TIM_PWM_ConfigChannel>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d001      	beq.n	80030d4 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80030d0:	f7ff fd8c 	bl	8002bec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80030d4:	4803      	ldr	r0, [pc, #12]	; (80030e4 <MX_TIM2_Init+0xec>)
 80030d6:	f000 f839 	bl	800314c <HAL_TIM_MspPostInit>

}
 80030da:	bf00      	nop
 80030dc:	3738      	adds	r7, #56	; 0x38
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	200001a0 	.word	0x200001a0

080030e8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b085      	sub	sp, #20
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a13      	ldr	r2, [pc, #76]	; (8003144 <HAL_TIM_Base_MspInit+0x5c>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d10c      	bne.n	8003114 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80030fa:	4b13      	ldr	r3, [pc, #76]	; (8003148 <HAL_TIM_Base_MspInit+0x60>)
 80030fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030fe:	4a12      	ldr	r2, [pc, #72]	; (8003148 <HAL_TIM_Base_MspInit+0x60>)
 8003100:	f043 0301 	orr.w	r3, r3, #1
 8003104:	6453      	str	r3, [r2, #68]	; 0x44
 8003106:	4b10      	ldr	r3, [pc, #64]	; (8003148 <HAL_TIM_Base_MspInit+0x60>)
 8003108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800310a:	f003 0301 	and.w	r3, r3, #1
 800310e:	60fb      	str	r3, [r7, #12]
 8003110:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8003112:	e010      	b.n	8003136 <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM2)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800311c:	d10b      	bne.n	8003136 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800311e:	4b0a      	ldr	r3, [pc, #40]	; (8003148 <HAL_TIM_Base_MspInit+0x60>)
 8003120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003122:	4a09      	ldr	r2, [pc, #36]	; (8003148 <HAL_TIM_Base_MspInit+0x60>)
 8003124:	f043 0301 	orr.w	r3, r3, #1
 8003128:	6413      	str	r3, [r2, #64]	; 0x40
 800312a:	4b07      	ldr	r3, [pc, #28]	; (8003148 <HAL_TIM_Base_MspInit+0x60>)
 800312c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312e:	f003 0301 	and.w	r3, r3, #1
 8003132:	60bb      	str	r3, [r7, #8]
 8003134:	68bb      	ldr	r3, [r7, #8]
}
 8003136:	bf00      	nop
 8003138:	3714      	adds	r7, #20
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
 8003142:	bf00      	nop
 8003144:	40010000 	.word	0x40010000
 8003148:	40023800 	.word	0x40023800

0800314c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b088      	sub	sp, #32
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003154:	f107 030c 	add.w	r3, r7, #12
 8003158:	2200      	movs	r2, #0
 800315a:	601a      	str	r2, [r3, #0]
 800315c:	605a      	str	r2, [r3, #4]
 800315e:	609a      	str	r2, [r3, #8]
 8003160:	60da      	str	r2, [r3, #12]
 8003162:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800316c:	d11b      	bne.n	80031a6 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800316e:	4b10      	ldr	r3, [pc, #64]	; (80031b0 <HAL_TIM_MspPostInit+0x64>)
 8003170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003172:	4a0f      	ldr	r2, [pc, #60]	; (80031b0 <HAL_TIM_MspPostInit+0x64>)
 8003174:	f043 0301 	orr.w	r3, r3, #1
 8003178:	6313      	str	r3, [r2, #48]	; 0x30
 800317a:	4b0d      	ldr	r3, [pc, #52]	; (80031b0 <HAL_TIM_MspPostInit+0x64>)
 800317c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317e:	f003 0301 	and.w	r3, r3, #1
 8003182:	60bb      	str	r3, [r7, #8]
 8003184:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003186:	2308      	movs	r3, #8
 8003188:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800318a:	2302      	movs	r3, #2
 800318c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800318e:	2300      	movs	r3, #0
 8003190:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003192:	2303      	movs	r3, #3
 8003194:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003196:	2301      	movs	r3, #1
 8003198:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800319a:	f107 030c 	add.w	r3, r7, #12
 800319e:	4619      	mov	r1, r3
 80031a0:	4804      	ldr	r0, [pc, #16]	; (80031b4 <HAL_TIM_MspPostInit+0x68>)
 80031a2:	f000 fe7d 	bl	8003ea0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80031a6:	bf00      	nop
 80031a8:	3720      	adds	r7, #32
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	40023800 	.word	0x40023800
 80031b4:	40020000 	.word	0x40020000

080031b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80031b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80031f0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80031bc:	480d      	ldr	r0, [pc, #52]	; (80031f4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80031be:	490e      	ldr	r1, [pc, #56]	; (80031f8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80031c0:	4a0e      	ldr	r2, [pc, #56]	; (80031fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80031c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031c4:	e002      	b.n	80031cc <LoopCopyDataInit>

080031c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031ca:	3304      	adds	r3, #4

080031cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031d0:	d3f9      	bcc.n	80031c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031d2:	4a0b      	ldr	r2, [pc, #44]	; (8003200 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80031d4:	4c0b      	ldr	r4, [pc, #44]	; (8003204 <LoopFillZerobss+0x26>)
  movs r3, #0
 80031d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031d8:	e001      	b.n	80031de <LoopFillZerobss>

080031da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031dc:	3204      	adds	r2, #4

080031de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031e0:	d3fb      	bcc.n	80031da <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80031e2:	f7ff fea3 	bl	8002f2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80031e6:	f003 f91d 	bl	8006424 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80031ea:	f7fe ffa5 	bl	8002138 <main>
  bx  lr    
 80031ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80031f0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80031f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031f8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80031fc:	08007160 	.word	0x08007160
  ldr r2, =_sbss
 8003200:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8003204:	20000200 	.word	0x20000200

08003208 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003208:	e7fe      	b.n	8003208 <CAN1_RX0_IRQHandler>
	...

0800320c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCELERATOR_ENABLE != 0)
  __HAL_FLASH_ART_ENABLE();
 8003210:	4b0b      	ldr	r3, [pc, #44]	; (8003240 <HAL_Init+0x34>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a0a      	ldr	r2, [pc, #40]	; (8003240 <HAL_Init+0x34>)
 8003216:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800321a:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800321c:	4b08      	ldr	r3, [pc, #32]	; (8003240 <HAL_Init+0x34>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a07      	ldr	r2, [pc, #28]	; (8003240 <HAL_Init+0x34>)
 8003222:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003226:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003228:	2003      	movs	r0, #3
 800322a:	f000 fdf7 	bl	8003e1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800322e:	200f      	movs	r0, #15
 8003230:	f000 f808 	bl	8003244 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003234:	f7ff fd62 	bl	8002cfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	40023c00 	.word	0x40023c00

08003244 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800324c:	4b12      	ldr	r3, [pc, #72]	; (8003298 <HAL_InitTick+0x54>)
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	4b12      	ldr	r3, [pc, #72]	; (800329c <HAL_InitTick+0x58>)
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	4619      	mov	r1, r3
 8003256:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800325a:	fbb3 f3f1 	udiv	r3, r3, r1
 800325e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003262:	4618      	mov	r0, r3
 8003264:	f000 fe0f 	bl	8003e86 <HAL_SYSTICK_Config>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d001      	beq.n	8003272 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e00e      	b.n	8003290 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2b0f      	cmp	r3, #15
 8003276:	d80a      	bhi.n	800328e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003278:	2200      	movs	r2, #0
 800327a:	6879      	ldr	r1, [r7, #4]
 800327c:	f04f 30ff 	mov.w	r0, #4294967295
 8003280:	f000 fdd7 	bl	8003e32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003284:	4a06      	ldr	r2, [pc, #24]	; (80032a0 <HAL_InitTick+0x5c>)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800328a:	2300      	movs	r3, #0
 800328c:	e000      	b.n	8003290 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
}
 8003290:	4618      	mov	r0, r3
 8003292:	3708      	adds	r7, #8
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}
 8003298:	20000004 	.word	0x20000004
 800329c:	2000000c 	.word	0x2000000c
 80032a0:	20000008 	.word	0x20000008

080032a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032a4:	b480      	push	{r7}
 80032a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032a8:	4b06      	ldr	r3, [pc, #24]	; (80032c4 <HAL_IncTick+0x20>)
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	461a      	mov	r2, r3
 80032ae:	4b06      	ldr	r3, [pc, #24]	; (80032c8 <HAL_IncTick+0x24>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4413      	add	r3, r2
 80032b4:	4a04      	ldr	r2, [pc, #16]	; (80032c8 <HAL_IncTick+0x24>)
 80032b6:	6013      	str	r3, [r2, #0]
}
 80032b8:	bf00      	nop
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
 80032c2:	bf00      	nop
 80032c4:	2000000c 	.word	0x2000000c
 80032c8:	200001ec 	.word	0x200001ec

080032cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032cc:	b480      	push	{r7}
 80032ce:	af00      	add	r7, sp, #0
  return uwTick;
 80032d0:	4b03      	ldr	r3, [pc, #12]	; (80032e0 <HAL_GetTick+0x14>)
 80032d2:	681b      	ldr	r3, [r3, #0]
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	200001ec 	.word	0x200001ec

080032e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80032ec:	f7ff ffee 	bl	80032cc <HAL_GetTick>
 80032f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032fc:	d005      	beq.n	800330a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80032fe:	4b0a      	ldr	r3, [pc, #40]	; (8003328 <HAL_Delay+0x44>)
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	461a      	mov	r2, r3
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	4413      	add	r3, r2
 8003308:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800330a:	bf00      	nop
 800330c:	f7ff ffde 	bl	80032cc <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	68fa      	ldr	r2, [r7, #12]
 8003318:	429a      	cmp	r2, r3
 800331a:	d8f7      	bhi.n	800330c <HAL_Delay+0x28>
  {
  }
}
 800331c:	bf00      	nop
 800331e:	bf00      	nop
 8003320:	3710      	adds	r7, #16
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	2000000c 	.word	0x2000000c

0800332c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003334:	2300      	movs	r3, #0
 8003336:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d101      	bne.n	8003342 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e031      	b.n	80033a6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003346:	2b00      	cmp	r3, #0
 8003348:	d109      	bne.n	800335e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f7fe f938 	bl	80015c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003362:	f003 0310 	and.w	r3, r3, #16
 8003366:	2b00      	cmp	r3, #0
 8003368:	d116      	bne.n	8003398 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800336e:	4b10      	ldr	r3, [pc, #64]	; (80033b0 <HAL_ADC_Init+0x84>)
 8003370:	4013      	ands	r3, r2
 8003372:	f043 0202 	orr.w	r2, r3, #2
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f000 fb7a 	bl	8003a74 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338a:	f023 0303 	bic.w	r3, r3, #3
 800338e:	f043 0201 	orr.w	r2, r3, #1
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	641a      	str	r2, [r3, #64]	; 0x40
 8003396:	e001      	b.n	800339c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80033a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3710      	adds	r7, #16
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	ffffeefd 	.word	0xffffeefd

080033b4 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b085      	sub	sp, #20
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80033bc:	2300      	movs	r3, #0
 80033be:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d101      	bne.n	80033ce <HAL_ADC_Start_IT+0x1a>
 80033ca:	2302      	movs	r3, #2
 80033cc:	e0b5      	b.n	800353a <HAL_ADC_Start_IT+0x186>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2201      	movs	r2, #1
 80033d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f003 0301 	and.w	r3, r3, #1
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d018      	beq.n	8003416 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	689a      	ldr	r2, [r3, #8]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f042 0201 	orr.w	r2, r2, #1
 80033f2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80033f4:	4b54      	ldr	r3, [pc, #336]	; (8003548 <HAL_ADC_Start_IT+0x194>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a54      	ldr	r2, [pc, #336]	; (800354c <HAL_ADC_Start_IT+0x198>)
 80033fa:	fba2 2303 	umull	r2, r3, r2, r3
 80033fe:	0c9a      	lsrs	r2, r3, #18
 8003400:	4613      	mov	r3, r2
 8003402:	005b      	lsls	r3, r3, #1
 8003404:	4413      	add	r3, r2
 8003406:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8003408:	e002      	b.n	8003410 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	3b01      	subs	r3, #1
 800340e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d1f9      	bne.n	800340a <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	f003 0301 	and.w	r3, r3, #1
 8003420:	2b01      	cmp	r3, #1
 8003422:	d17d      	bne.n	8003520 <HAL_ADC_Start_IT+0x16c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003428:	4b49      	ldr	r3, [pc, #292]	; (8003550 <HAL_ADC_Start_IT+0x19c>)
 800342a:	4013      	ands	r3, r2
 800342c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800343e:	2b00      	cmp	r3, #0
 8003440:	d007      	beq.n	8003452 <HAL_ADC_Start_IT+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003446:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800344a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003456:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800345a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800345e:	d106      	bne.n	800346e <HAL_ADC_Start_IT+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003464:	f023 0206 	bic.w	r2, r3, #6
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	645a      	str	r2, [r3, #68]	; 0x44
 800346c:	e002      	b.n	8003474 <HAL_ADC_Start_IT+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003484:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	6859      	ldr	r1, [r3, #4]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	4b30      	ldr	r3, [pc, #192]	; (8003554 <HAL_ADC_Start_IT+0x1a0>)
 8003492:	430b      	orrs	r3, r1
 8003494:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8003496:	4b30      	ldr	r3, [pc, #192]	; (8003558 <HAL_ADC_Start_IT+0x1a4>)
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f003 031f 	and.w	r3, r3, #31
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d10f      	bne.n	80034c2 <HAL_ADC_Start_IT+0x10e>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d143      	bne.n	8003538 <HAL_ADC_Start_IT+0x184>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	689a      	ldr	r2, [r3, #8]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80034be:	609a      	str	r2, [r3, #8]
 80034c0:	e03a      	b.n	8003538 <HAL_ADC_Start_IT+0x184>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a25      	ldr	r2, [pc, #148]	; (800355c <HAL_ADC_Start_IT+0x1a8>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d10e      	bne.n	80034ea <HAL_ADC_Start_IT+0x136>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d107      	bne.n	80034ea <HAL_ADC_Start_IT+0x136>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	689a      	ldr	r2, [r3, #8]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80034e8:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80034ea:	4b1b      	ldr	r3, [pc, #108]	; (8003558 <HAL_ADC_Start_IT+0x1a4>)
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f003 0310 	and.w	r3, r3, #16
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d120      	bne.n	8003538 <HAL_ADC_Start_IT+0x184>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a19      	ldr	r2, [pc, #100]	; (8003560 <HAL_ADC_Start_IT+0x1ac>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d11b      	bne.n	8003538 <HAL_ADC_Start_IT+0x184>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d114      	bne.n	8003538 <HAL_ADC_Start_IT+0x184>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	689a      	ldr	r2, [r3, #8]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800351c:	609a      	str	r2, [r3, #8]
 800351e:	e00b      	b.n	8003538 <HAL_ADC_Start_IT+0x184>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003524:	f043 0210 	orr.w	r2, r3, #16
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003530:	f043 0201 	orr.w	r2, r3, #1
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3714      	adds	r7, #20
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop
 8003548:	20000004 	.word	0x20000004
 800354c:	431bde83 	.word	0x431bde83
 8003550:	fffff8fe 	.word	0xfffff8fe
 8003554:	04000020 	.word	0x04000020
 8003558:	40012300 	.word	0x40012300
 800355c:	40012000 	.word	0x40012000
 8003560:	40012200 	.word	0x40012200

08003564 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b086      	sub	sp, #24
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 800356c:	2300      	movs	r3, #0
 800356e:	617b      	str	r3, [r7, #20]
 8003570:	2300      	movs	r3, #0
 8003572:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f003 0302 	and.w	r3, r3, #2
 800358a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	f003 0320 	and.w	r3, r3, #32
 8003592:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d049      	beq.n	800362e <HAL_ADC_IRQHandler+0xca>
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d046      	beq.n	800362e <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a4:	f003 0310 	and.w	r3, r3, #16
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d105      	bne.n	80035b8 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d12b      	bne.n	800361e <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d127      	bne.n	800361e <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d006      	beq.n	80035ea <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d119      	bne.n	800361e <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	685a      	ldr	r2, [r3, #4]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f022 0220 	bic.w	r2, r2, #32
 80035f8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d105      	bne.n	800361e <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003616:	f043 0201 	orr.w	r2, r3, #1
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f7ff fada 	bl	8002bd8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f06f 0212 	mvn.w	r2, #18
 800362c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	f003 0304 	and.w	r3, r3, #4
 8003634:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800363c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d057      	beq.n	80036f4 <HAL_ADC_IRQHandler+0x190>
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d054      	beq.n	80036f4 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364e:	f003 0310 	and.w	r3, r3, #16
 8003652:	2b00      	cmp	r3, #0
 8003654:	d105      	bne.n	8003662 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d139      	bne.n	80036e4 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003676:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800367a:	2b00      	cmp	r3, #0
 800367c:	d006      	beq.n	800368c <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8003688:	2b00      	cmp	r3, #0
 800368a:	d12b      	bne.n	80036e4 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003696:	2b00      	cmp	r3, #0
 8003698:	d124      	bne.n	80036e4 <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d11d      	bne.n	80036e4 <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d119      	bne.n	80036e4 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	685a      	ldr	r2, [r3, #4]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036be:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d105      	bne.n	80036e4 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036dc:	f043 0201 	orr.w	r2, r3, #1
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f000 fabf 	bl	8003c68 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f06f 020c 	mvn.w	r2, #12
 80036f2:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f003 0301 	and.w	r3, r3, #1
 80036fa:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003702:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d017      	beq.n	800373a <HAL_ADC_IRQHandler+0x1d6>
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d014      	beq.n	800373a <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0301 	and.w	r3, r3, #1
 800371a:	2b01      	cmp	r3, #1
 800371c:	d10d      	bne.n	800373a <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003722:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f000 f837 	bl	800379e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f06f 0201 	mvn.w	r2, #1
 8003738:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	f003 0320 	and.w	r3, r3, #32
 8003740:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003748:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d015      	beq.n	800377c <HAL_ADC_IRQHandler+0x218>
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d012      	beq.n	800377c <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800375a:	f043 0202 	orr.w	r2, r3, #2
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f06f 0220 	mvn.w	r2, #32
 800376a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f000 f820 	bl	80037b2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f06f 0220 	mvn.w	r2, #32
 800377a:	601a      	str	r2, [r3, #0]
  }
}
 800377c:	bf00      	nop
 800377e:	3718      	adds	r7, #24
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003792:	4618      	mov	r0, r3
 8003794:	370c      	adds	r7, #12
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr

0800379e <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800379e:	b480      	push	{r7}
 80037a0:	b083      	sub	sp, #12
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80037a6:	bf00      	nop
 80037a8:	370c      	adds	r7, #12
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr

080037b2 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80037b2:	b480      	push	{r7}
 80037b4:	b083      	sub	sp, #12
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80037ba:	bf00      	nop
 80037bc:	370c      	adds	r7, #12
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr
	...

080037c8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b085      	sub	sp, #20
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80037d2:	2300      	movs	r3, #0
 80037d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d101      	bne.n	80037e4 <HAL_ADC_ConfigChannel+0x1c>
 80037e0:	2302      	movs	r3, #2
 80037e2:	e136      	b.n	8003a52 <HAL_ADC_ConfigChannel+0x28a>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	2b09      	cmp	r3, #9
 80037f2:	d93a      	bls.n	800386a <HAL_ADC_ConfigChannel+0xa2>
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80037fc:	d035      	beq.n	800386a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	68d9      	ldr	r1, [r3, #12]
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	b29b      	uxth	r3, r3
 800380a:	461a      	mov	r2, r3
 800380c:	4613      	mov	r3, r2
 800380e:	005b      	lsls	r3, r3, #1
 8003810:	4413      	add	r3, r2
 8003812:	3b1e      	subs	r3, #30
 8003814:	2207      	movs	r2, #7
 8003816:	fa02 f303 	lsl.w	r3, r2, r3
 800381a:	43da      	mvns	r2, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	400a      	ands	r2, r1
 8003822:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a8d      	ldr	r2, [pc, #564]	; (8003a60 <HAL_ADC_ConfigChannel+0x298>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d10a      	bne.n	8003844 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	68d9      	ldr	r1, [r3, #12]
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	061a      	lsls	r2, r3, #24
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	430a      	orrs	r2, r1
 8003840:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003842:	e035      	b.n	80038b0 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68d9      	ldr	r1, [r3, #12]
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	689a      	ldr	r2, [r3, #8]
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	b29b      	uxth	r3, r3
 8003854:	4618      	mov	r0, r3
 8003856:	4603      	mov	r3, r0
 8003858:	005b      	lsls	r3, r3, #1
 800385a:	4403      	add	r3, r0
 800385c:	3b1e      	subs	r3, #30
 800385e:	409a      	lsls	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	430a      	orrs	r2, r1
 8003866:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003868:	e022      	b.n	80038b0 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	6919      	ldr	r1, [r3, #16]
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	b29b      	uxth	r3, r3
 8003876:	461a      	mov	r2, r3
 8003878:	4613      	mov	r3, r2
 800387a:	005b      	lsls	r3, r3, #1
 800387c:	4413      	add	r3, r2
 800387e:	2207      	movs	r2, #7
 8003880:	fa02 f303 	lsl.w	r3, r2, r3
 8003884:	43da      	mvns	r2, r3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	400a      	ands	r2, r1
 800388c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	6919      	ldr	r1, [r3, #16]
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	689a      	ldr	r2, [r3, #8]
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	b29b      	uxth	r3, r3
 800389e:	4618      	mov	r0, r3
 80038a0:	4603      	mov	r3, r0
 80038a2:	005b      	lsls	r3, r3, #1
 80038a4:	4403      	add	r3, r0
 80038a6:	409a      	lsls	r2, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	430a      	orrs	r2, r1
 80038ae:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	2b06      	cmp	r3, #6
 80038b6:	d824      	bhi.n	8003902 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	685a      	ldr	r2, [r3, #4]
 80038c2:	4613      	mov	r3, r2
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	4413      	add	r3, r2
 80038c8:	3b05      	subs	r3, #5
 80038ca:	221f      	movs	r2, #31
 80038cc:	fa02 f303 	lsl.w	r3, r2, r3
 80038d0:	43da      	mvns	r2, r3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	400a      	ands	r2, r1
 80038d8:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	4618      	mov	r0, r3
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	685a      	ldr	r2, [r3, #4]
 80038ec:	4613      	mov	r3, r2
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	4413      	add	r3, r2
 80038f2:	3b05      	subs	r3, #5
 80038f4:	fa00 f203 	lsl.w	r2, r0, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	430a      	orrs	r2, r1
 80038fe:	635a      	str	r2, [r3, #52]	; 0x34
 8003900:	e04c      	b.n	800399c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	2b0c      	cmp	r3, #12
 8003908:	d824      	bhi.n	8003954 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	685a      	ldr	r2, [r3, #4]
 8003914:	4613      	mov	r3, r2
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	4413      	add	r3, r2
 800391a:	3b23      	subs	r3, #35	; 0x23
 800391c:	221f      	movs	r2, #31
 800391e:	fa02 f303 	lsl.w	r3, r2, r3
 8003922:	43da      	mvns	r2, r3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	400a      	ands	r2, r1
 800392a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	b29b      	uxth	r3, r3
 8003938:	4618      	mov	r0, r3
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	685a      	ldr	r2, [r3, #4]
 800393e:	4613      	mov	r3, r2
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	4413      	add	r3, r2
 8003944:	3b23      	subs	r3, #35	; 0x23
 8003946:	fa00 f203 	lsl.w	r2, r0, r3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	430a      	orrs	r2, r1
 8003950:	631a      	str	r2, [r3, #48]	; 0x30
 8003952:	e023      	b.n	800399c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	685a      	ldr	r2, [r3, #4]
 800395e:	4613      	mov	r3, r2
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	4413      	add	r3, r2
 8003964:	3b41      	subs	r3, #65	; 0x41
 8003966:	221f      	movs	r2, #31
 8003968:	fa02 f303 	lsl.w	r3, r2, r3
 800396c:	43da      	mvns	r2, r3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	400a      	ands	r2, r1
 8003974:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	b29b      	uxth	r3, r3
 8003982:	4618      	mov	r0, r3
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	685a      	ldr	r2, [r3, #4]
 8003988:	4613      	mov	r3, r2
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	4413      	add	r3, r2
 800398e:	3b41      	subs	r3, #65	; 0x41
 8003990:	fa00 f203 	lsl.w	r2, r0, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	430a      	orrs	r2, r1
 800399a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a30      	ldr	r2, [pc, #192]	; (8003a64 <HAL_ADC_ConfigChannel+0x29c>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d10a      	bne.n	80039bc <HAL_ADC_ConfigChannel+0x1f4>
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80039ae:	d105      	bne.n	80039bc <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80039b0:	4b2d      	ldr	r3, [pc, #180]	; (8003a68 <HAL_ADC_ConfigChannel+0x2a0>)
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	4a2c      	ldr	r2, [pc, #176]	; (8003a68 <HAL_ADC_ConfigChannel+0x2a0>)
 80039b6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80039ba:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a28      	ldr	r2, [pc, #160]	; (8003a64 <HAL_ADC_ConfigChannel+0x29c>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d10f      	bne.n	80039e6 <HAL_ADC_ConfigChannel+0x21e>
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2b12      	cmp	r3, #18
 80039cc:	d10b      	bne.n	80039e6 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80039ce:	4b26      	ldr	r3, [pc, #152]	; (8003a68 <HAL_ADC_ConfigChannel+0x2a0>)
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	4a25      	ldr	r2, [pc, #148]	; (8003a68 <HAL_ADC_ConfigChannel+0x2a0>)
 80039d4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80039d8:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80039da:	4b23      	ldr	r3, [pc, #140]	; (8003a68 <HAL_ADC_ConfigChannel+0x2a0>)
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	4a22      	ldr	r2, [pc, #136]	; (8003a68 <HAL_ADC_ConfigChannel+0x2a0>)
 80039e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80039e4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a1e      	ldr	r2, [pc, #120]	; (8003a64 <HAL_ADC_ConfigChannel+0x29c>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d12b      	bne.n	8003a48 <HAL_ADC_ConfigChannel+0x280>
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a1a      	ldr	r2, [pc, #104]	; (8003a60 <HAL_ADC_ConfigChannel+0x298>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d003      	beq.n	8003a02 <HAL_ADC_ConfigChannel+0x23a>
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	2b11      	cmp	r3, #17
 8003a00:	d122      	bne.n	8003a48 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8003a02:	4b19      	ldr	r3, [pc, #100]	; (8003a68 <HAL_ADC_ConfigChannel+0x2a0>)
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	4a18      	ldr	r2, [pc, #96]	; (8003a68 <HAL_ADC_ConfigChannel+0x2a0>)
 8003a08:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003a0c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003a0e:	4b16      	ldr	r3, [pc, #88]	; (8003a68 <HAL_ADC_ConfigChannel+0x2a0>)
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	4a15      	ldr	r2, [pc, #84]	; (8003a68 <HAL_ADC_ConfigChannel+0x2a0>)
 8003a14:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003a18:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a10      	ldr	r2, [pc, #64]	; (8003a60 <HAL_ADC_ConfigChannel+0x298>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d111      	bne.n	8003a48 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003a24:	4b11      	ldr	r3, [pc, #68]	; (8003a6c <HAL_ADC_ConfigChannel+0x2a4>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a11      	ldr	r2, [pc, #68]	; (8003a70 <HAL_ADC_ConfigChannel+0x2a8>)
 8003a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a2e:	0c9a      	lsrs	r2, r3, #18
 8003a30:	4613      	mov	r3, r2
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	4413      	add	r3, r2
 8003a36:	005b      	lsls	r3, r3, #1
 8003a38:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003a3a:	e002      	b.n	8003a42 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	3b01      	subs	r3, #1
 8003a40:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d1f9      	bne.n	8003a3c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3714      	adds	r7, #20
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr
 8003a5e:	bf00      	nop
 8003a60:	10000012 	.word	0x10000012
 8003a64:	40012000 	.word	0x40012000
 8003a68:	40012300 	.word	0x40012300
 8003a6c:	20000004 	.word	0x20000004
 8003a70:	431bde83 	.word	0x431bde83

08003a74 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003a7c:	4b78      	ldr	r3, [pc, #480]	; (8003c60 <ADC_Init+0x1ec>)
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	4a77      	ldr	r2, [pc, #476]	; (8003c60 <ADC_Init+0x1ec>)
 8003a82:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003a86:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003a88:	4b75      	ldr	r3, [pc, #468]	; (8003c60 <ADC_Init+0x1ec>)
 8003a8a:	685a      	ldr	r2, [r3, #4]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	4973      	ldr	r1, [pc, #460]	; (8003c60 <ADC_Init+0x1ec>)
 8003a92:	4313      	orrs	r3, r2
 8003a94:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	685a      	ldr	r2, [r3, #4]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003aa4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	6859      	ldr	r1, [r3, #4]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	691b      	ldr	r3, [r3, #16]
 8003ab0:	021a      	lsls	r2, r3, #8
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	430a      	orrs	r2, r1
 8003ab8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	685a      	ldr	r2, [r3, #4]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003ac8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	6859      	ldr	r1, [r3, #4]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	689a      	ldr	r2, [r3, #8]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	430a      	orrs	r2, r1
 8003ada:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	689a      	ldr	r2, [r3, #8]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003aea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	6899      	ldr	r1, [r3, #8]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	68da      	ldr	r2, [r3, #12]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	430a      	orrs	r2, r1
 8003afc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b02:	4a58      	ldr	r2, [pc, #352]	; (8003c64 <ADC_Init+0x1f0>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d022      	beq.n	8003b4e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	689a      	ldr	r2, [r3, #8]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003b16:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	6899      	ldr	r1, [r3, #8]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	430a      	orrs	r2, r1
 8003b28:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	689a      	ldr	r2, [r3, #8]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003b38:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	6899      	ldr	r1, [r3, #8]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	430a      	orrs	r2, r1
 8003b4a:	609a      	str	r2, [r3, #8]
 8003b4c:	e00f      	b.n	8003b6e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	689a      	ldr	r2, [r3, #8]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003b5c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	689a      	ldr	r2, [r3, #8]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003b6c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	689a      	ldr	r2, [r3, #8]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f022 0202 	bic.w	r2, r2, #2
 8003b7c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	6899      	ldr	r1, [r3, #8]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	699b      	ldr	r3, [r3, #24]
 8003b88:	005a      	lsls	r2, r3, #1
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	430a      	orrs	r2, r1
 8003b90:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d01b      	beq.n	8003bd4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	685a      	ldr	r2, [r3, #4]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003baa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	685a      	ldr	r2, [r3, #4]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003bba:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	6859      	ldr	r1, [r3, #4]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc6:	3b01      	subs	r3, #1
 8003bc8:	035a      	lsls	r2, r3, #13
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	430a      	orrs	r2, r1
 8003bd0:	605a      	str	r2, [r3, #4]
 8003bd2:	e007      	b.n	8003be4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	685a      	ldr	r2, [r3, #4]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003be2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003bf2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	69db      	ldr	r3, [r3, #28]
 8003bfe:	3b01      	subs	r3, #1
 8003c00:	051a      	lsls	r2, r3, #20
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	430a      	orrs	r2, r1
 8003c08:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	689a      	ldr	r2, [r3, #8]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003c18:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	6899      	ldr	r1, [r3, #8]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003c26:	025a      	lsls	r2, r3, #9
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	430a      	orrs	r2, r1
 8003c2e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	689a      	ldr	r2, [r3, #8]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c3e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	6899      	ldr	r1, [r3, #8]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	695b      	ldr	r3, [r3, #20]
 8003c4a:	029a      	lsls	r2, r3, #10
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	430a      	orrs	r2, r1
 8003c52:	609a      	str	r2, [r3, #8]
}
 8003c54:	bf00      	nop
 8003c56:	370c      	adds	r7, #12
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr
 8003c60:	40012300 	.word	0x40012300
 8003c64:	0f000001 	.word	0x0f000001

08003c68 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003c70:	bf00      	nop
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr

08003c7c <__NVIC_SetPriorityGrouping>:
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b085      	sub	sp, #20
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f003 0307 	and.w	r3, r3, #7
 8003c8a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c8c:	4b0b      	ldr	r3, [pc, #44]	; (8003cbc <__NVIC_SetPriorityGrouping+0x40>)
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c92:	68ba      	ldr	r2, [r7, #8]
 8003c94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c98:	4013      	ands	r3, r2
 8003c9a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003ca4:	4b06      	ldr	r3, [pc, #24]	; (8003cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003caa:	4a04      	ldr	r2, [pc, #16]	; (8003cbc <__NVIC_SetPriorityGrouping+0x40>)
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	60d3      	str	r3, [r2, #12]
}
 8003cb0:	bf00      	nop
 8003cb2:	3714      	adds	r7, #20
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr
 8003cbc:	e000ed00 	.word	0xe000ed00
 8003cc0:	05fa0000 	.word	0x05fa0000

08003cc4 <__NVIC_GetPriorityGrouping>:
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003cc8:	4b04      	ldr	r3, [pc, #16]	; (8003cdc <__NVIC_GetPriorityGrouping+0x18>)
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	0a1b      	lsrs	r3, r3, #8
 8003cce:	f003 0307 	and.w	r3, r3, #7
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr
 8003cdc:	e000ed00 	.word	0xe000ed00

08003ce0 <__NVIC_EnableIRQ>:
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	db0b      	blt.n	8003d0a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cf2:	79fb      	ldrb	r3, [r7, #7]
 8003cf4:	f003 021f 	and.w	r2, r3, #31
 8003cf8:	4907      	ldr	r1, [pc, #28]	; (8003d18 <__NVIC_EnableIRQ+0x38>)
 8003cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cfe:	095b      	lsrs	r3, r3, #5
 8003d00:	2001      	movs	r0, #1
 8003d02:	fa00 f202 	lsl.w	r2, r0, r2
 8003d06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003d0a:	bf00      	nop
 8003d0c:	370c      	adds	r7, #12
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr
 8003d16:	bf00      	nop
 8003d18:	e000e100 	.word	0xe000e100

08003d1c <__NVIC_SetPriority>:
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	4603      	mov	r3, r0
 8003d24:	6039      	str	r1, [r7, #0]
 8003d26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	db0a      	blt.n	8003d46 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	b2da      	uxtb	r2, r3
 8003d34:	490c      	ldr	r1, [pc, #48]	; (8003d68 <__NVIC_SetPriority+0x4c>)
 8003d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d3a:	0112      	lsls	r2, r2, #4
 8003d3c:	b2d2      	uxtb	r2, r2
 8003d3e:	440b      	add	r3, r1
 8003d40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003d44:	e00a      	b.n	8003d5c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	b2da      	uxtb	r2, r3
 8003d4a:	4908      	ldr	r1, [pc, #32]	; (8003d6c <__NVIC_SetPriority+0x50>)
 8003d4c:	79fb      	ldrb	r3, [r7, #7]
 8003d4e:	f003 030f 	and.w	r3, r3, #15
 8003d52:	3b04      	subs	r3, #4
 8003d54:	0112      	lsls	r2, r2, #4
 8003d56:	b2d2      	uxtb	r2, r2
 8003d58:	440b      	add	r3, r1
 8003d5a:	761a      	strb	r2, [r3, #24]
}
 8003d5c:	bf00      	nop
 8003d5e:	370c      	adds	r7, #12
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr
 8003d68:	e000e100 	.word	0xe000e100
 8003d6c:	e000ed00 	.word	0xe000ed00

08003d70 <NVIC_EncodePriority>:
{
 8003d70:	b480      	push	{r7}
 8003d72:	b089      	sub	sp, #36	; 0x24
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	60b9      	str	r1, [r7, #8]
 8003d7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f003 0307 	and.w	r3, r3, #7
 8003d82:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	f1c3 0307 	rsb	r3, r3, #7
 8003d8a:	2b04      	cmp	r3, #4
 8003d8c:	bf28      	it	cs
 8003d8e:	2304      	movcs	r3, #4
 8003d90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	3304      	adds	r3, #4
 8003d96:	2b06      	cmp	r3, #6
 8003d98:	d902      	bls.n	8003da0 <NVIC_EncodePriority+0x30>
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	3b03      	subs	r3, #3
 8003d9e:	e000      	b.n	8003da2 <NVIC_EncodePriority+0x32>
 8003da0:	2300      	movs	r3, #0
 8003da2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003da4:	f04f 32ff 	mov.w	r2, #4294967295
 8003da8:	69bb      	ldr	r3, [r7, #24]
 8003daa:	fa02 f303 	lsl.w	r3, r2, r3
 8003dae:	43da      	mvns	r2, r3
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	401a      	ands	r2, r3
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003db8:	f04f 31ff 	mov.w	r1, #4294967295
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8003dc2:	43d9      	mvns	r1, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dc8:	4313      	orrs	r3, r2
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3724      	adds	r7, #36	; 0x24
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr
	...

08003dd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b082      	sub	sp, #8
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	3b01      	subs	r3, #1
 8003de4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003de8:	d301      	bcc.n	8003dee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003dea:	2301      	movs	r3, #1
 8003dec:	e00f      	b.n	8003e0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003dee:	4a0a      	ldr	r2, [pc, #40]	; (8003e18 <SysTick_Config+0x40>)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	3b01      	subs	r3, #1
 8003df4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003df6:	210f      	movs	r1, #15
 8003df8:	f04f 30ff 	mov.w	r0, #4294967295
 8003dfc:	f7ff ff8e 	bl	8003d1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e00:	4b05      	ldr	r3, [pc, #20]	; (8003e18 <SysTick_Config+0x40>)
 8003e02:	2200      	movs	r2, #0
 8003e04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e06:	4b04      	ldr	r3, [pc, #16]	; (8003e18 <SysTick_Config+0x40>)
 8003e08:	2207      	movs	r2, #7
 8003e0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e0c:	2300      	movs	r3, #0
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3708      	adds	r7, #8
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	e000e010 	.word	0xe000e010

08003e1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b082      	sub	sp, #8
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f7ff ff29 	bl	8003c7c <__NVIC_SetPriorityGrouping>
}
 8003e2a:	bf00      	nop
 8003e2c:	3708      	adds	r7, #8
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}

08003e32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e32:	b580      	push	{r7, lr}
 8003e34:	b086      	sub	sp, #24
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	4603      	mov	r3, r0
 8003e3a:	60b9      	str	r1, [r7, #8]
 8003e3c:	607a      	str	r2, [r7, #4]
 8003e3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003e40:	2300      	movs	r3, #0
 8003e42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e44:	f7ff ff3e 	bl	8003cc4 <__NVIC_GetPriorityGrouping>
 8003e48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	68b9      	ldr	r1, [r7, #8]
 8003e4e:	6978      	ldr	r0, [r7, #20]
 8003e50:	f7ff ff8e 	bl	8003d70 <NVIC_EncodePriority>
 8003e54:	4602      	mov	r2, r0
 8003e56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e5a:	4611      	mov	r1, r2
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f7ff ff5d 	bl	8003d1c <__NVIC_SetPriority>
}
 8003e62:	bf00      	nop
 8003e64:	3718      	adds	r7, #24
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}

08003e6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e6a:	b580      	push	{r7, lr}
 8003e6c:	b082      	sub	sp, #8
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	4603      	mov	r3, r0
 8003e72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f7ff ff31 	bl	8003ce0 <__NVIC_EnableIRQ>
}
 8003e7e:	bf00      	nop
 8003e80:	3708      	adds	r7, #8
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}

08003e86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e86:	b580      	push	{r7, lr}
 8003e88:	b082      	sub	sp, #8
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f7ff ffa2 	bl	8003dd8 <SysTick_Config>
 8003e94:	4603      	mov	r3, r0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3708      	adds	r7, #8
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
	...

08003ea0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b089      	sub	sp, #36	; 0x24
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003eba:	2300      	movs	r3, #0
 8003ebc:	61fb      	str	r3, [r7, #28]
 8003ebe:	e175      	b.n	80041ac <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	697a      	ldr	r2, [r7, #20]
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ed4:	693a      	ldr	r2, [r7, #16]
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	f040 8164 	bne.w	80041a6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	f003 0303 	and.w	r3, r3, #3
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d005      	beq.n	8003ef6 <HAL_GPIO_Init+0x56>
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	f003 0303 	and.w	r3, r3, #3
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	d130      	bne.n	8003f58 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	005b      	lsls	r3, r3, #1
 8003f00:	2203      	movs	r2, #3
 8003f02:	fa02 f303 	lsl.w	r3, r2, r3
 8003f06:	43db      	mvns	r3, r3
 8003f08:	69ba      	ldr	r2, [r7, #24]
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	68da      	ldr	r2, [r3, #12]
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	005b      	lsls	r3, r3, #1
 8003f16:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1a:	69ba      	ldr	r2, [r7, #24]
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	69ba      	ldr	r2, [r7, #24]
 8003f24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	fa02 f303 	lsl.w	r3, r2, r3
 8003f34:	43db      	mvns	r3, r3
 8003f36:	69ba      	ldr	r2, [r7, #24]
 8003f38:	4013      	ands	r3, r2
 8003f3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	091b      	lsrs	r3, r3, #4
 8003f42:	f003 0201 	and.w	r2, r3, #1
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4c:	69ba      	ldr	r2, [r7, #24]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	69ba      	ldr	r2, [r7, #24]
 8003f56:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f003 0303 	and.w	r3, r3, #3
 8003f60:	2b03      	cmp	r3, #3
 8003f62:	d017      	beq.n	8003f94 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	005b      	lsls	r3, r3, #1
 8003f6e:	2203      	movs	r2, #3
 8003f70:	fa02 f303 	lsl.w	r3, r2, r3
 8003f74:	43db      	mvns	r3, r3
 8003f76:	69ba      	ldr	r2, [r7, #24]
 8003f78:	4013      	ands	r3, r2
 8003f7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	689a      	ldr	r2, [r3, #8]
 8003f80:	69fb      	ldr	r3, [r7, #28]
 8003f82:	005b      	lsls	r3, r3, #1
 8003f84:	fa02 f303 	lsl.w	r3, r2, r3
 8003f88:	69ba      	ldr	r2, [r7, #24]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	69ba      	ldr	r2, [r7, #24]
 8003f92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	f003 0303 	and.w	r3, r3, #3
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d123      	bne.n	8003fe8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003fa0:	69fb      	ldr	r3, [r7, #28]
 8003fa2:	08da      	lsrs	r2, r3, #3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	3208      	adds	r2, #8
 8003fa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	f003 0307 	and.w	r3, r3, #7
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	220f      	movs	r2, #15
 8003fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fbc:	43db      	mvns	r3, r3
 8003fbe:	69ba      	ldr	r2, [r7, #24]
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	691a      	ldr	r2, [r3, #16]
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	f003 0307 	and.w	r3, r3, #7
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd4:	69ba      	ldr	r2, [r7, #24]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	08da      	lsrs	r2, r3, #3
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	3208      	adds	r2, #8
 8003fe2:	69b9      	ldr	r1, [r7, #24]
 8003fe4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	005b      	lsls	r3, r3, #1
 8003ff2:	2203      	movs	r2, #3
 8003ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff8:	43db      	mvns	r3, r3
 8003ffa:	69ba      	ldr	r2, [r7, #24]
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	f003 0203 	and.w	r2, r3, #3
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	005b      	lsls	r3, r3, #1
 800400c:	fa02 f303 	lsl.w	r3, r2, r3
 8004010:	69ba      	ldr	r2, [r7, #24]
 8004012:	4313      	orrs	r3, r2
 8004014:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	69ba      	ldr	r2, [r7, #24]
 800401a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004024:	2b00      	cmp	r3, #0
 8004026:	f000 80be 	beq.w	80041a6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800402a:	4b66      	ldr	r3, [pc, #408]	; (80041c4 <HAL_GPIO_Init+0x324>)
 800402c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800402e:	4a65      	ldr	r2, [pc, #404]	; (80041c4 <HAL_GPIO_Init+0x324>)
 8004030:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004034:	6453      	str	r3, [r2, #68]	; 0x44
 8004036:	4b63      	ldr	r3, [pc, #396]	; (80041c4 <HAL_GPIO_Init+0x324>)
 8004038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800403a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800403e:	60fb      	str	r3, [r7, #12]
 8004040:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004042:	4a61      	ldr	r2, [pc, #388]	; (80041c8 <HAL_GPIO_Init+0x328>)
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	089b      	lsrs	r3, r3, #2
 8004048:	3302      	adds	r3, #2
 800404a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800404e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	f003 0303 	and.w	r3, r3, #3
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	220f      	movs	r2, #15
 800405a:	fa02 f303 	lsl.w	r3, r2, r3
 800405e:	43db      	mvns	r3, r3
 8004060:	69ba      	ldr	r2, [r7, #24]
 8004062:	4013      	ands	r3, r2
 8004064:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a58      	ldr	r2, [pc, #352]	; (80041cc <HAL_GPIO_Init+0x32c>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d037      	beq.n	80040de <HAL_GPIO_Init+0x23e>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a57      	ldr	r2, [pc, #348]	; (80041d0 <HAL_GPIO_Init+0x330>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d031      	beq.n	80040da <HAL_GPIO_Init+0x23a>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a56      	ldr	r2, [pc, #344]	; (80041d4 <HAL_GPIO_Init+0x334>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d02b      	beq.n	80040d6 <HAL_GPIO_Init+0x236>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a55      	ldr	r2, [pc, #340]	; (80041d8 <HAL_GPIO_Init+0x338>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d025      	beq.n	80040d2 <HAL_GPIO_Init+0x232>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a54      	ldr	r2, [pc, #336]	; (80041dc <HAL_GPIO_Init+0x33c>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d01f      	beq.n	80040ce <HAL_GPIO_Init+0x22e>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a53      	ldr	r2, [pc, #332]	; (80041e0 <HAL_GPIO_Init+0x340>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d019      	beq.n	80040ca <HAL_GPIO_Init+0x22a>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a52      	ldr	r2, [pc, #328]	; (80041e4 <HAL_GPIO_Init+0x344>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d013      	beq.n	80040c6 <HAL_GPIO_Init+0x226>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4a51      	ldr	r2, [pc, #324]	; (80041e8 <HAL_GPIO_Init+0x348>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d00d      	beq.n	80040c2 <HAL_GPIO_Init+0x222>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4a50      	ldr	r2, [pc, #320]	; (80041ec <HAL_GPIO_Init+0x34c>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d007      	beq.n	80040be <HAL_GPIO_Init+0x21e>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a4f      	ldr	r2, [pc, #316]	; (80041f0 <HAL_GPIO_Init+0x350>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d101      	bne.n	80040ba <HAL_GPIO_Init+0x21a>
 80040b6:	2309      	movs	r3, #9
 80040b8:	e012      	b.n	80040e0 <HAL_GPIO_Init+0x240>
 80040ba:	230a      	movs	r3, #10
 80040bc:	e010      	b.n	80040e0 <HAL_GPIO_Init+0x240>
 80040be:	2308      	movs	r3, #8
 80040c0:	e00e      	b.n	80040e0 <HAL_GPIO_Init+0x240>
 80040c2:	2307      	movs	r3, #7
 80040c4:	e00c      	b.n	80040e0 <HAL_GPIO_Init+0x240>
 80040c6:	2306      	movs	r3, #6
 80040c8:	e00a      	b.n	80040e0 <HAL_GPIO_Init+0x240>
 80040ca:	2305      	movs	r3, #5
 80040cc:	e008      	b.n	80040e0 <HAL_GPIO_Init+0x240>
 80040ce:	2304      	movs	r3, #4
 80040d0:	e006      	b.n	80040e0 <HAL_GPIO_Init+0x240>
 80040d2:	2303      	movs	r3, #3
 80040d4:	e004      	b.n	80040e0 <HAL_GPIO_Init+0x240>
 80040d6:	2302      	movs	r3, #2
 80040d8:	e002      	b.n	80040e0 <HAL_GPIO_Init+0x240>
 80040da:	2301      	movs	r3, #1
 80040dc:	e000      	b.n	80040e0 <HAL_GPIO_Init+0x240>
 80040de:	2300      	movs	r3, #0
 80040e0:	69fa      	ldr	r2, [r7, #28]
 80040e2:	f002 0203 	and.w	r2, r2, #3
 80040e6:	0092      	lsls	r2, r2, #2
 80040e8:	4093      	lsls	r3, r2
 80040ea:	69ba      	ldr	r2, [r7, #24]
 80040ec:	4313      	orrs	r3, r2
 80040ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80040f0:	4935      	ldr	r1, [pc, #212]	; (80041c8 <HAL_GPIO_Init+0x328>)
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	089b      	lsrs	r3, r3, #2
 80040f6:	3302      	adds	r3, #2
 80040f8:	69ba      	ldr	r2, [r7, #24]
 80040fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80040fe:	4b3d      	ldr	r3, [pc, #244]	; (80041f4 <HAL_GPIO_Init+0x354>)
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	43db      	mvns	r3, r3
 8004108:	69ba      	ldr	r2, [r7, #24]
 800410a:	4013      	ands	r3, r2
 800410c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d003      	beq.n	8004122 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800411a:	69ba      	ldr	r2, [r7, #24]
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	4313      	orrs	r3, r2
 8004120:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004122:	4a34      	ldr	r2, [pc, #208]	; (80041f4 <HAL_GPIO_Init+0x354>)
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004128:	4b32      	ldr	r3, [pc, #200]	; (80041f4 <HAL_GPIO_Init+0x354>)
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	43db      	mvns	r3, r3
 8004132:	69ba      	ldr	r2, [r7, #24]
 8004134:	4013      	ands	r3, r2
 8004136:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004140:	2b00      	cmp	r3, #0
 8004142:	d003      	beq.n	800414c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004144:	69ba      	ldr	r2, [r7, #24]
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	4313      	orrs	r3, r2
 800414a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800414c:	4a29      	ldr	r2, [pc, #164]	; (80041f4 <HAL_GPIO_Init+0x354>)
 800414e:	69bb      	ldr	r3, [r7, #24]
 8004150:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004152:	4b28      	ldr	r3, [pc, #160]	; (80041f4 <HAL_GPIO_Init+0x354>)
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	43db      	mvns	r3, r3
 800415c:	69ba      	ldr	r2, [r7, #24]
 800415e:	4013      	ands	r3, r2
 8004160:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d003      	beq.n	8004176 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800416e:	69ba      	ldr	r2, [r7, #24]
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	4313      	orrs	r3, r2
 8004174:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004176:	4a1f      	ldr	r2, [pc, #124]	; (80041f4 <HAL_GPIO_Init+0x354>)
 8004178:	69bb      	ldr	r3, [r7, #24]
 800417a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800417c:	4b1d      	ldr	r3, [pc, #116]	; (80041f4 <HAL_GPIO_Init+0x354>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	43db      	mvns	r3, r3
 8004186:	69ba      	ldr	r2, [r7, #24]
 8004188:	4013      	ands	r3, r2
 800418a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d003      	beq.n	80041a0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004198:	69ba      	ldr	r2, [r7, #24]
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	4313      	orrs	r3, r2
 800419e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80041a0:	4a14      	ldr	r2, [pc, #80]	; (80041f4 <HAL_GPIO_Init+0x354>)
 80041a2:	69bb      	ldr	r3, [r7, #24]
 80041a4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	3301      	adds	r3, #1
 80041aa:	61fb      	str	r3, [r7, #28]
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	2b0f      	cmp	r3, #15
 80041b0:	f67f ae86 	bls.w	8003ec0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80041b4:	bf00      	nop
 80041b6:	bf00      	nop
 80041b8:	3724      	adds	r7, #36	; 0x24
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr
 80041c2:	bf00      	nop
 80041c4:	40023800 	.word	0x40023800
 80041c8:	40013800 	.word	0x40013800
 80041cc:	40020000 	.word	0x40020000
 80041d0:	40020400 	.word	0x40020400
 80041d4:	40020800 	.word	0x40020800
 80041d8:	40020c00 	.word	0x40020c00
 80041dc:	40021000 	.word	0x40021000
 80041e0:	40021400 	.word	0x40021400
 80041e4:	40021800 	.word	0x40021800
 80041e8:	40021c00 	.word	0x40021c00
 80041ec:	40022000 	.word	0x40022000
 80041f0:	40022400 	.word	0x40022400
 80041f4:	40013c00 	.word	0x40013c00

080041f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b085      	sub	sp, #20
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	460b      	mov	r3, r1
 8004202:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	691a      	ldr	r2, [r3, #16]
 8004208:	887b      	ldrh	r3, [r7, #2]
 800420a:	4013      	ands	r3, r2
 800420c:	2b00      	cmp	r3, #0
 800420e:	d002      	beq.n	8004216 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004210:	2301      	movs	r3, #1
 8004212:	73fb      	strb	r3, [r7, #15]
 8004214:	e001      	b.n	800421a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004216:	2300      	movs	r3, #0
 8004218:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800421a:	7bfb      	ldrb	r3, [r7, #15]
}
 800421c:	4618      	mov	r0, r3
 800421e:	3714      	adds	r7, #20
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr

08004228 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	460b      	mov	r3, r1
 8004232:	807b      	strh	r3, [r7, #2]
 8004234:	4613      	mov	r3, r2
 8004236:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004238:	787b      	ldrb	r3, [r7, #1]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d003      	beq.n	8004246 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800423e:	887a      	ldrh	r2, [r7, #2]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004244:	e003      	b.n	800424e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004246:	887b      	ldrh	r3, [r7, #2]
 8004248:	041a      	lsls	r2, r3, #16
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	619a      	str	r2, [r3, #24]
}
 800424e:	bf00      	nop
 8004250:	370c      	adds	r7, #12
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr

0800425a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800425a:	b480      	push	{r7}
 800425c:	b085      	sub	sp, #20
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]
 8004262:	460b      	mov	r3, r1
 8004264:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	695b      	ldr	r3, [r3, #20]
 800426a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800426c:	887a      	ldrh	r2, [r7, #2]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	4013      	ands	r3, r2
 8004272:	041a      	lsls	r2, r3, #16
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	43d9      	mvns	r1, r3
 8004278:	887b      	ldrh	r3, [r7, #2]
 800427a:	400b      	ands	r3, r1
 800427c:	431a      	orrs	r2, r3
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	619a      	str	r2, [r3, #24]
}
 8004282:	bf00      	nop
 8004284:	3714      	adds	r7, #20
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr
	...

08004290 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b082      	sub	sp, #8
 8004294:	af00      	add	r7, sp, #0
 8004296:	4603      	mov	r3, r0
 8004298:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800429a:	4b08      	ldr	r3, [pc, #32]	; (80042bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800429c:	695a      	ldr	r2, [r3, #20]
 800429e:	88fb      	ldrh	r3, [r7, #6]
 80042a0:	4013      	ands	r3, r2
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d006      	beq.n	80042b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80042a6:	4a05      	ldr	r2, [pc, #20]	; (80042bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80042a8:	88fb      	ldrh	r3, [r7, #6]
 80042aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80042ac:	88fb      	ldrh	r3, [r7, #6]
 80042ae:	4618      	mov	r0, r3
 80042b0:	f000 f806 	bl	80042c0 <HAL_GPIO_EXTI_Callback>
  }
}
 80042b4:	bf00      	nop
 80042b6:	3708      	adds	r7, #8
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	40013c00 	.word	0x40013c00

080042c0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	4603      	mov	r3, r0
 80042c8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80042ca:	bf00      	nop
 80042cc:	370c      	adds	r7, #12
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr
	...

080042d8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80042de:	2300      	movs	r3, #0
 80042e0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80042e2:	4b23      	ldr	r3, [pc, #140]	; (8004370 <HAL_PWREx_EnableOverDrive+0x98>)
 80042e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e6:	4a22      	ldr	r2, [pc, #136]	; (8004370 <HAL_PWREx_EnableOverDrive+0x98>)
 80042e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042ec:	6413      	str	r3, [r2, #64]	; 0x40
 80042ee:	4b20      	ldr	r3, [pc, #128]	; (8004370 <HAL_PWREx_EnableOverDrive+0x98>)
 80042f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042f6:	603b      	str	r3, [r7, #0]
 80042f8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80042fa:	4b1e      	ldr	r3, [pc, #120]	; (8004374 <HAL_PWREx_EnableOverDrive+0x9c>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a1d      	ldr	r2, [pc, #116]	; (8004374 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004300:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004304:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004306:	f7fe ffe1 	bl	80032cc <HAL_GetTick>
 800430a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800430c:	e009      	b.n	8004322 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800430e:	f7fe ffdd 	bl	80032cc <HAL_GetTick>
 8004312:	4602      	mov	r2, r0
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800431c:	d901      	bls.n	8004322 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e022      	b.n	8004368 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004322:	4b14      	ldr	r3, [pc, #80]	; (8004374 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800432a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800432e:	d1ee      	bne.n	800430e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004330:	4b10      	ldr	r3, [pc, #64]	; (8004374 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a0f      	ldr	r2, [pc, #60]	; (8004374 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004336:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800433a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800433c:	f7fe ffc6 	bl	80032cc <HAL_GetTick>
 8004340:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004342:	e009      	b.n	8004358 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004344:	f7fe ffc2 	bl	80032cc <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004352:	d901      	bls.n	8004358 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004354:	2303      	movs	r3, #3
 8004356:	e007      	b.n	8004368 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004358:	4b06      	ldr	r3, [pc, #24]	; (8004374 <HAL_PWREx_EnableOverDrive+0x9c>)
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004360:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004364:	d1ee      	bne.n	8004344 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004366:	2300      	movs	r3, #0
}
 8004368:	4618      	mov	r0, r3
 800436a:	3708      	adds	r7, #8
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}
 8004370:	40023800 	.word	0x40023800
 8004374:	40007000 	.word	0x40007000

08004378 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b086      	sub	sp, #24
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004380:	2300      	movs	r3, #0
 8004382:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d101      	bne.n	800438e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e29b      	b.n	80048c6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 0301 	and.w	r3, r3, #1
 8004396:	2b00      	cmp	r3, #0
 8004398:	f000 8087 	beq.w	80044aa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800439c:	4b96      	ldr	r3, [pc, #600]	; (80045f8 <HAL_RCC_OscConfig+0x280>)
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	f003 030c 	and.w	r3, r3, #12
 80043a4:	2b04      	cmp	r3, #4
 80043a6:	d00c      	beq.n	80043c2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043a8:	4b93      	ldr	r3, [pc, #588]	; (80045f8 <HAL_RCC_OscConfig+0x280>)
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	f003 030c 	and.w	r3, r3, #12
 80043b0:	2b08      	cmp	r3, #8
 80043b2:	d112      	bne.n	80043da <HAL_RCC_OscConfig+0x62>
 80043b4:	4b90      	ldr	r3, [pc, #576]	; (80045f8 <HAL_RCC_OscConfig+0x280>)
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043c0:	d10b      	bne.n	80043da <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043c2:	4b8d      	ldr	r3, [pc, #564]	; (80045f8 <HAL_RCC_OscConfig+0x280>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d06c      	beq.n	80044a8 <HAL_RCC_OscConfig+0x130>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d168      	bne.n	80044a8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e275      	b.n	80048c6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043e2:	d106      	bne.n	80043f2 <HAL_RCC_OscConfig+0x7a>
 80043e4:	4b84      	ldr	r3, [pc, #528]	; (80045f8 <HAL_RCC_OscConfig+0x280>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a83      	ldr	r2, [pc, #524]	; (80045f8 <HAL_RCC_OscConfig+0x280>)
 80043ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043ee:	6013      	str	r3, [r2, #0]
 80043f0:	e02e      	b.n	8004450 <HAL_RCC_OscConfig+0xd8>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d10c      	bne.n	8004414 <HAL_RCC_OscConfig+0x9c>
 80043fa:	4b7f      	ldr	r3, [pc, #508]	; (80045f8 <HAL_RCC_OscConfig+0x280>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a7e      	ldr	r2, [pc, #504]	; (80045f8 <HAL_RCC_OscConfig+0x280>)
 8004400:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004404:	6013      	str	r3, [r2, #0]
 8004406:	4b7c      	ldr	r3, [pc, #496]	; (80045f8 <HAL_RCC_OscConfig+0x280>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a7b      	ldr	r2, [pc, #492]	; (80045f8 <HAL_RCC_OscConfig+0x280>)
 800440c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004410:	6013      	str	r3, [r2, #0]
 8004412:	e01d      	b.n	8004450 <HAL_RCC_OscConfig+0xd8>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800441c:	d10c      	bne.n	8004438 <HAL_RCC_OscConfig+0xc0>
 800441e:	4b76      	ldr	r3, [pc, #472]	; (80045f8 <HAL_RCC_OscConfig+0x280>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a75      	ldr	r2, [pc, #468]	; (80045f8 <HAL_RCC_OscConfig+0x280>)
 8004424:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004428:	6013      	str	r3, [r2, #0]
 800442a:	4b73      	ldr	r3, [pc, #460]	; (80045f8 <HAL_RCC_OscConfig+0x280>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a72      	ldr	r2, [pc, #456]	; (80045f8 <HAL_RCC_OscConfig+0x280>)
 8004430:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004434:	6013      	str	r3, [r2, #0]
 8004436:	e00b      	b.n	8004450 <HAL_RCC_OscConfig+0xd8>
 8004438:	4b6f      	ldr	r3, [pc, #444]	; (80045f8 <HAL_RCC_OscConfig+0x280>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a6e      	ldr	r2, [pc, #440]	; (80045f8 <HAL_RCC_OscConfig+0x280>)
 800443e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004442:	6013      	str	r3, [r2, #0]
 8004444:	4b6c      	ldr	r3, [pc, #432]	; (80045f8 <HAL_RCC_OscConfig+0x280>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a6b      	ldr	r2, [pc, #428]	; (80045f8 <HAL_RCC_OscConfig+0x280>)
 800444a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800444e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d013      	beq.n	8004480 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004458:	f7fe ff38 	bl	80032cc <HAL_GetTick>
 800445c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800445e:	e008      	b.n	8004472 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004460:	f7fe ff34 	bl	80032cc <HAL_GetTick>
 8004464:	4602      	mov	r2, r0
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	2b64      	cmp	r3, #100	; 0x64
 800446c:	d901      	bls.n	8004472 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e229      	b.n	80048c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004472:	4b61      	ldr	r3, [pc, #388]	; (80045f8 <HAL_RCC_OscConfig+0x280>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d0f0      	beq.n	8004460 <HAL_RCC_OscConfig+0xe8>
 800447e:	e014      	b.n	80044aa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004480:	f7fe ff24 	bl	80032cc <HAL_GetTick>
 8004484:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004486:	e008      	b.n	800449a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004488:	f7fe ff20 	bl	80032cc <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	2b64      	cmp	r3, #100	; 0x64
 8004494:	d901      	bls.n	800449a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e215      	b.n	80048c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800449a:	4b57      	ldr	r3, [pc, #348]	; (80045f8 <HAL_RCC_OscConfig+0x280>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d1f0      	bne.n	8004488 <HAL_RCC_OscConfig+0x110>
 80044a6:	e000      	b.n	80044aa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0302 	and.w	r3, r3, #2
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d069      	beq.n	800458a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80044b6:	4b50      	ldr	r3, [pc, #320]	; (80045f8 <HAL_RCC_OscConfig+0x280>)
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f003 030c 	and.w	r3, r3, #12
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d00b      	beq.n	80044da <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044c2:	4b4d      	ldr	r3, [pc, #308]	; (80045f8 <HAL_RCC_OscConfig+0x280>)
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	f003 030c 	and.w	r3, r3, #12
 80044ca:	2b08      	cmp	r3, #8
 80044cc:	d11c      	bne.n	8004508 <HAL_RCC_OscConfig+0x190>
 80044ce:	4b4a      	ldr	r3, [pc, #296]	; (80045f8 <HAL_RCC_OscConfig+0x280>)
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d116      	bne.n	8004508 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044da:	4b47      	ldr	r3, [pc, #284]	; (80045f8 <HAL_RCC_OscConfig+0x280>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0302 	and.w	r3, r3, #2
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d005      	beq.n	80044f2 <HAL_RCC_OscConfig+0x17a>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d001      	beq.n	80044f2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e1e9      	b.n	80048c6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044f2:	4b41      	ldr	r3, [pc, #260]	; (80045f8 <HAL_RCC_OscConfig+0x280>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	691b      	ldr	r3, [r3, #16]
 80044fe:	00db      	lsls	r3, r3, #3
 8004500:	493d      	ldr	r1, [pc, #244]	; (80045f8 <HAL_RCC_OscConfig+0x280>)
 8004502:	4313      	orrs	r3, r2
 8004504:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004506:	e040      	b.n	800458a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d023      	beq.n	8004558 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004510:	4b39      	ldr	r3, [pc, #228]	; (80045f8 <HAL_RCC_OscConfig+0x280>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a38      	ldr	r2, [pc, #224]	; (80045f8 <HAL_RCC_OscConfig+0x280>)
 8004516:	f043 0301 	orr.w	r3, r3, #1
 800451a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800451c:	f7fe fed6 	bl	80032cc <HAL_GetTick>
 8004520:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004522:	e008      	b.n	8004536 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004524:	f7fe fed2 	bl	80032cc <HAL_GetTick>
 8004528:	4602      	mov	r2, r0
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	2b02      	cmp	r3, #2
 8004530:	d901      	bls.n	8004536 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e1c7      	b.n	80048c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004536:	4b30      	ldr	r3, [pc, #192]	; (80045f8 <HAL_RCC_OscConfig+0x280>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0302 	and.w	r3, r3, #2
 800453e:	2b00      	cmp	r3, #0
 8004540:	d0f0      	beq.n	8004524 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004542:	4b2d      	ldr	r3, [pc, #180]	; (80045f8 <HAL_RCC_OscConfig+0x280>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	691b      	ldr	r3, [r3, #16]
 800454e:	00db      	lsls	r3, r3, #3
 8004550:	4929      	ldr	r1, [pc, #164]	; (80045f8 <HAL_RCC_OscConfig+0x280>)
 8004552:	4313      	orrs	r3, r2
 8004554:	600b      	str	r3, [r1, #0]
 8004556:	e018      	b.n	800458a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004558:	4b27      	ldr	r3, [pc, #156]	; (80045f8 <HAL_RCC_OscConfig+0x280>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a26      	ldr	r2, [pc, #152]	; (80045f8 <HAL_RCC_OscConfig+0x280>)
 800455e:	f023 0301 	bic.w	r3, r3, #1
 8004562:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004564:	f7fe feb2 	bl	80032cc <HAL_GetTick>
 8004568:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800456a:	e008      	b.n	800457e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800456c:	f7fe feae 	bl	80032cc <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	2b02      	cmp	r3, #2
 8004578:	d901      	bls.n	800457e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	e1a3      	b.n	80048c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800457e:	4b1e      	ldr	r3, [pc, #120]	; (80045f8 <HAL_RCC_OscConfig+0x280>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 0302 	and.w	r3, r3, #2
 8004586:	2b00      	cmp	r3, #0
 8004588:	d1f0      	bne.n	800456c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0308 	and.w	r3, r3, #8
 8004592:	2b00      	cmp	r3, #0
 8004594:	d038      	beq.n	8004608 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	695b      	ldr	r3, [r3, #20]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d019      	beq.n	80045d2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800459e:	4b16      	ldr	r3, [pc, #88]	; (80045f8 <HAL_RCC_OscConfig+0x280>)
 80045a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045a2:	4a15      	ldr	r2, [pc, #84]	; (80045f8 <HAL_RCC_OscConfig+0x280>)
 80045a4:	f043 0301 	orr.w	r3, r3, #1
 80045a8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045aa:	f7fe fe8f 	bl	80032cc <HAL_GetTick>
 80045ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045b0:	e008      	b.n	80045c4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045b2:	f7fe fe8b 	bl	80032cc <HAL_GetTick>
 80045b6:	4602      	mov	r2, r0
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d901      	bls.n	80045c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	e180      	b.n	80048c6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045c4:	4b0c      	ldr	r3, [pc, #48]	; (80045f8 <HAL_RCC_OscConfig+0x280>)
 80045c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045c8:	f003 0302 	and.w	r3, r3, #2
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d0f0      	beq.n	80045b2 <HAL_RCC_OscConfig+0x23a>
 80045d0:	e01a      	b.n	8004608 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045d2:	4b09      	ldr	r3, [pc, #36]	; (80045f8 <HAL_RCC_OscConfig+0x280>)
 80045d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045d6:	4a08      	ldr	r2, [pc, #32]	; (80045f8 <HAL_RCC_OscConfig+0x280>)
 80045d8:	f023 0301 	bic.w	r3, r3, #1
 80045dc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045de:	f7fe fe75 	bl	80032cc <HAL_GetTick>
 80045e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045e4:	e00a      	b.n	80045fc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045e6:	f7fe fe71 	bl	80032cc <HAL_GetTick>
 80045ea:	4602      	mov	r2, r0
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	2b02      	cmp	r3, #2
 80045f2:	d903      	bls.n	80045fc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80045f4:	2303      	movs	r3, #3
 80045f6:	e166      	b.n	80048c6 <HAL_RCC_OscConfig+0x54e>
 80045f8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045fc:	4b92      	ldr	r3, [pc, #584]	; (8004848 <HAL_RCC_OscConfig+0x4d0>)
 80045fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004600:	f003 0302 	and.w	r3, r3, #2
 8004604:	2b00      	cmp	r3, #0
 8004606:	d1ee      	bne.n	80045e6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0304 	and.w	r3, r3, #4
 8004610:	2b00      	cmp	r3, #0
 8004612:	f000 80a4 	beq.w	800475e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004616:	4b8c      	ldr	r3, [pc, #560]	; (8004848 <HAL_RCC_OscConfig+0x4d0>)
 8004618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800461e:	2b00      	cmp	r3, #0
 8004620:	d10d      	bne.n	800463e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004622:	4b89      	ldr	r3, [pc, #548]	; (8004848 <HAL_RCC_OscConfig+0x4d0>)
 8004624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004626:	4a88      	ldr	r2, [pc, #544]	; (8004848 <HAL_RCC_OscConfig+0x4d0>)
 8004628:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800462c:	6413      	str	r3, [r2, #64]	; 0x40
 800462e:	4b86      	ldr	r3, [pc, #536]	; (8004848 <HAL_RCC_OscConfig+0x4d0>)
 8004630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004636:	60bb      	str	r3, [r7, #8]
 8004638:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800463a:	2301      	movs	r3, #1
 800463c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800463e:	4b83      	ldr	r3, [pc, #524]	; (800484c <HAL_RCC_OscConfig+0x4d4>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004646:	2b00      	cmp	r3, #0
 8004648:	d118      	bne.n	800467c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800464a:	4b80      	ldr	r3, [pc, #512]	; (800484c <HAL_RCC_OscConfig+0x4d4>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a7f      	ldr	r2, [pc, #508]	; (800484c <HAL_RCC_OscConfig+0x4d4>)
 8004650:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004654:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004656:	f7fe fe39 	bl	80032cc <HAL_GetTick>
 800465a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800465c:	e008      	b.n	8004670 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800465e:	f7fe fe35 	bl	80032cc <HAL_GetTick>
 8004662:	4602      	mov	r2, r0
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	2b64      	cmp	r3, #100	; 0x64
 800466a:	d901      	bls.n	8004670 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	e12a      	b.n	80048c6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004670:	4b76      	ldr	r3, [pc, #472]	; (800484c <HAL_RCC_OscConfig+0x4d4>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004678:	2b00      	cmp	r3, #0
 800467a:	d0f0      	beq.n	800465e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	2b01      	cmp	r3, #1
 8004682:	d106      	bne.n	8004692 <HAL_RCC_OscConfig+0x31a>
 8004684:	4b70      	ldr	r3, [pc, #448]	; (8004848 <HAL_RCC_OscConfig+0x4d0>)
 8004686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004688:	4a6f      	ldr	r2, [pc, #444]	; (8004848 <HAL_RCC_OscConfig+0x4d0>)
 800468a:	f043 0301 	orr.w	r3, r3, #1
 800468e:	6713      	str	r3, [r2, #112]	; 0x70
 8004690:	e02d      	b.n	80046ee <HAL_RCC_OscConfig+0x376>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d10c      	bne.n	80046b4 <HAL_RCC_OscConfig+0x33c>
 800469a:	4b6b      	ldr	r3, [pc, #428]	; (8004848 <HAL_RCC_OscConfig+0x4d0>)
 800469c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800469e:	4a6a      	ldr	r2, [pc, #424]	; (8004848 <HAL_RCC_OscConfig+0x4d0>)
 80046a0:	f023 0301 	bic.w	r3, r3, #1
 80046a4:	6713      	str	r3, [r2, #112]	; 0x70
 80046a6:	4b68      	ldr	r3, [pc, #416]	; (8004848 <HAL_RCC_OscConfig+0x4d0>)
 80046a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046aa:	4a67      	ldr	r2, [pc, #412]	; (8004848 <HAL_RCC_OscConfig+0x4d0>)
 80046ac:	f023 0304 	bic.w	r3, r3, #4
 80046b0:	6713      	str	r3, [r2, #112]	; 0x70
 80046b2:	e01c      	b.n	80046ee <HAL_RCC_OscConfig+0x376>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	2b05      	cmp	r3, #5
 80046ba:	d10c      	bne.n	80046d6 <HAL_RCC_OscConfig+0x35e>
 80046bc:	4b62      	ldr	r3, [pc, #392]	; (8004848 <HAL_RCC_OscConfig+0x4d0>)
 80046be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c0:	4a61      	ldr	r2, [pc, #388]	; (8004848 <HAL_RCC_OscConfig+0x4d0>)
 80046c2:	f043 0304 	orr.w	r3, r3, #4
 80046c6:	6713      	str	r3, [r2, #112]	; 0x70
 80046c8:	4b5f      	ldr	r3, [pc, #380]	; (8004848 <HAL_RCC_OscConfig+0x4d0>)
 80046ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046cc:	4a5e      	ldr	r2, [pc, #376]	; (8004848 <HAL_RCC_OscConfig+0x4d0>)
 80046ce:	f043 0301 	orr.w	r3, r3, #1
 80046d2:	6713      	str	r3, [r2, #112]	; 0x70
 80046d4:	e00b      	b.n	80046ee <HAL_RCC_OscConfig+0x376>
 80046d6:	4b5c      	ldr	r3, [pc, #368]	; (8004848 <HAL_RCC_OscConfig+0x4d0>)
 80046d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046da:	4a5b      	ldr	r2, [pc, #364]	; (8004848 <HAL_RCC_OscConfig+0x4d0>)
 80046dc:	f023 0301 	bic.w	r3, r3, #1
 80046e0:	6713      	str	r3, [r2, #112]	; 0x70
 80046e2:	4b59      	ldr	r3, [pc, #356]	; (8004848 <HAL_RCC_OscConfig+0x4d0>)
 80046e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046e6:	4a58      	ldr	r2, [pc, #352]	; (8004848 <HAL_RCC_OscConfig+0x4d0>)
 80046e8:	f023 0304 	bic.w	r3, r3, #4
 80046ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d015      	beq.n	8004722 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046f6:	f7fe fde9 	bl	80032cc <HAL_GetTick>
 80046fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046fc:	e00a      	b.n	8004714 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046fe:	f7fe fde5 	bl	80032cc <HAL_GetTick>
 8004702:	4602      	mov	r2, r0
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	1ad3      	subs	r3, r2, r3
 8004708:	f241 3288 	movw	r2, #5000	; 0x1388
 800470c:	4293      	cmp	r3, r2
 800470e:	d901      	bls.n	8004714 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004710:	2303      	movs	r3, #3
 8004712:	e0d8      	b.n	80048c6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004714:	4b4c      	ldr	r3, [pc, #304]	; (8004848 <HAL_RCC_OscConfig+0x4d0>)
 8004716:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004718:	f003 0302 	and.w	r3, r3, #2
 800471c:	2b00      	cmp	r3, #0
 800471e:	d0ee      	beq.n	80046fe <HAL_RCC_OscConfig+0x386>
 8004720:	e014      	b.n	800474c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004722:	f7fe fdd3 	bl	80032cc <HAL_GetTick>
 8004726:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004728:	e00a      	b.n	8004740 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800472a:	f7fe fdcf 	bl	80032cc <HAL_GetTick>
 800472e:	4602      	mov	r2, r0
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	f241 3288 	movw	r2, #5000	; 0x1388
 8004738:	4293      	cmp	r3, r2
 800473a:	d901      	bls.n	8004740 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800473c:	2303      	movs	r3, #3
 800473e:	e0c2      	b.n	80048c6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004740:	4b41      	ldr	r3, [pc, #260]	; (8004848 <HAL_RCC_OscConfig+0x4d0>)
 8004742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004744:	f003 0302 	and.w	r3, r3, #2
 8004748:	2b00      	cmp	r3, #0
 800474a:	d1ee      	bne.n	800472a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800474c:	7dfb      	ldrb	r3, [r7, #23]
 800474e:	2b01      	cmp	r3, #1
 8004750:	d105      	bne.n	800475e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004752:	4b3d      	ldr	r3, [pc, #244]	; (8004848 <HAL_RCC_OscConfig+0x4d0>)
 8004754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004756:	4a3c      	ldr	r2, [pc, #240]	; (8004848 <HAL_RCC_OscConfig+0x4d0>)
 8004758:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800475c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	699b      	ldr	r3, [r3, #24]
 8004762:	2b00      	cmp	r3, #0
 8004764:	f000 80ae 	beq.w	80048c4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004768:	4b37      	ldr	r3, [pc, #220]	; (8004848 <HAL_RCC_OscConfig+0x4d0>)
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	f003 030c 	and.w	r3, r3, #12
 8004770:	2b08      	cmp	r3, #8
 8004772:	d06d      	beq.n	8004850 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	699b      	ldr	r3, [r3, #24]
 8004778:	2b02      	cmp	r3, #2
 800477a:	d14b      	bne.n	8004814 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800477c:	4b32      	ldr	r3, [pc, #200]	; (8004848 <HAL_RCC_OscConfig+0x4d0>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a31      	ldr	r2, [pc, #196]	; (8004848 <HAL_RCC_OscConfig+0x4d0>)
 8004782:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004786:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004788:	f7fe fda0 	bl	80032cc <HAL_GetTick>
 800478c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800478e:	e008      	b.n	80047a2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004790:	f7fe fd9c 	bl	80032cc <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	2b02      	cmp	r3, #2
 800479c:	d901      	bls.n	80047a2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	e091      	b.n	80048c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047a2:	4b29      	ldr	r3, [pc, #164]	; (8004848 <HAL_RCC_OscConfig+0x4d0>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d1f0      	bne.n	8004790 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	69da      	ldr	r2, [r3, #28]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a1b      	ldr	r3, [r3, #32]
 80047b6:	431a      	orrs	r2, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047bc:	019b      	lsls	r3, r3, #6
 80047be:	431a      	orrs	r2, r3
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c4:	085b      	lsrs	r3, r3, #1
 80047c6:	3b01      	subs	r3, #1
 80047c8:	041b      	lsls	r3, r3, #16
 80047ca:	431a      	orrs	r2, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d0:	061b      	lsls	r3, r3, #24
 80047d2:	431a      	orrs	r2, r3
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d8:	071b      	lsls	r3, r3, #28
 80047da:	491b      	ldr	r1, [pc, #108]	; (8004848 <HAL_RCC_OscConfig+0x4d0>)
 80047dc:	4313      	orrs	r3, r2
 80047de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047e0:	4b19      	ldr	r3, [pc, #100]	; (8004848 <HAL_RCC_OscConfig+0x4d0>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a18      	ldr	r2, [pc, #96]	; (8004848 <HAL_RCC_OscConfig+0x4d0>)
 80047e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ec:	f7fe fd6e 	bl	80032cc <HAL_GetTick>
 80047f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047f2:	e008      	b.n	8004806 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047f4:	f7fe fd6a 	bl	80032cc <HAL_GetTick>
 80047f8:	4602      	mov	r2, r0
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	2b02      	cmp	r3, #2
 8004800:	d901      	bls.n	8004806 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004802:	2303      	movs	r3, #3
 8004804:	e05f      	b.n	80048c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004806:	4b10      	ldr	r3, [pc, #64]	; (8004848 <HAL_RCC_OscConfig+0x4d0>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800480e:	2b00      	cmp	r3, #0
 8004810:	d0f0      	beq.n	80047f4 <HAL_RCC_OscConfig+0x47c>
 8004812:	e057      	b.n	80048c4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004814:	4b0c      	ldr	r3, [pc, #48]	; (8004848 <HAL_RCC_OscConfig+0x4d0>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a0b      	ldr	r2, [pc, #44]	; (8004848 <HAL_RCC_OscConfig+0x4d0>)
 800481a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800481e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004820:	f7fe fd54 	bl	80032cc <HAL_GetTick>
 8004824:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004826:	e008      	b.n	800483a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004828:	f7fe fd50 	bl	80032cc <HAL_GetTick>
 800482c:	4602      	mov	r2, r0
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	2b02      	cmp	r3, #2
 8004834:	d901      	bls.n	800483a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004836:	2303      	movs	r3, #3
 8004838:	e045      	b.n	80048c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800483a:	4b03      	ldr	r3, [pc, #12]	; (8004848 <HAL_RCC_OscConfig+0x4d0>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004842:	2b00      	cmp	r3, #0
 8004844:	d1f0      	bne.n	8004828 <HAL_RCC_OscConfig+0x4b0>
 8004846:	e03d      	b.n	80048c4 <HAL_RCC_OscConfig+0x54c>
 8004848:	40023800 	.word	0x40023800
 800484c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004850:	4b1f      	ldr	r3, [pc, #124]	; (80048d0 <HAL_RCC_OscConfig+0x558>)
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	699b      	ldr	r3, [r3, #24]
 800485a:	2b01      	cmp	r3, #1
 800485c:	d030      	beq.n	80048c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004868:	429a      	cmp	r2, r3
 800486a:	d129      	bne.n	80048c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004876:	429a      	cmp	r2, r3
 8004878:	d122      	bne.n	80048c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800487a:	68fa      	ldr	r2, [r7, #12]
 800487c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004880:	4013      	ands	r3, r2
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004886:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004888:	4293      	cmp	r3, r2
 800488a:	d119      	bne.n	80048c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004896:	085b      	lsrs	r3, r3, #1
 8004898:	3b01      	subs	r3, #1
 800489a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800489c:	429a      	cmp	r2, r3
 800489e:	d10f      	bne.n	80048c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048aa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d107      	bne.n	80048c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ba:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048bc:	429a      	cmp	r2, r3
 80048be:	d001      	beq.n	80048c4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e000      	b.n	80048c6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80048c4:	2300      	movs	r3, #0
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3718      	adds	r7, #24
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop
 80048d0:	40023800 	.word	0x40023800

080048d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b084      	sub	sp, #16
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80048de:	2300      	movs	r3, #0
 80048e0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d101      	bne.n	80048ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e0d0      	b.n	8004a8e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80048ec:	4b6a      	ldr	r3, [pc, #424]	; (8004a98 <HAL_RCC_ClockConfig+0x1c4>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 030f 	and.w	r3, r3, #15
 80048f4:	683a      	ldr	r2, [r7, #0]
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d910      	bls.n	800491c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048fa:	4b67      	ldr	r3, [pc, #412]	; (8004a98 <HAL_RCC_ClockConfig+0x1c4>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f023 020f 	bic.w	r2, r3, #15
 8004902:	4965      	ldr	r1, [pc, #404]	; (8004a98 <HAL_RCC_ClockConfig+0x1c4>)
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	4313      	orrs	r3, r2
 8004908:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800490a:	4b63      	ldr	r3, [pc, #396]	; (8004a98 <HAL_RCC_ClockConfig+0x1c4>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 030f 	and.w	r3, r3, #15
 8004912:	683a      	ldr	r2, [r7, #0]
 8004914:	429a      	cmp	r2, r3
 8004916:	d001      	beq.n	800491c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e0b8      	b.n	8004a8e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 0302 	and.w	r3, r3, #2
 8004924:	2b00      	cmp	r3, #0
 8004926:	d020      	beq.n	800496a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 0304 	and.w	r3, r3, #4
 8004930:	2b00      	cmp	r3, #0
 8004932:	d005      	beq.n	8004940 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004934:	4b59      	ldr	r3, [pc, #356]	; (8004a9c <HAL_RCC_ClockConfig+0x1c8>)
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	4a58      	ldr	r2, [pc, #352]	; (8004a9c <HAL_RCC_ClockConfig+0x1c8>)
 800493a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800493e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 0308 	and.w	r3, r3, #8
 8004948:	2b00      	cmp	r3, #0
 800494a:	d005      	beq.n	8004958 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800494c:	4b53      	ldr	r3, [pc, #332]	; (8004a9c <HAL_RCC_ClockConfig+0x1c8>)
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	4a52      	ldr	r2, [pc, #328]	; (8004a9c <HAL_RCC_ClockConfig+0x1c8>)
 8004952:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004956:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004958:	4b50      	ldr	r3, [pc, #320]	; (8004a9c <HAL_RCC_ClockConfig+0x1c8>)
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	494d      	ldr	r1, [pc, #308]	; (8004a9c <HAL_RCC_ClockConfig+0x1c8>)
 8004966:	4313      	orrs	r3, r2
 8004968:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 0301 	and.w	r3, r3, #1
 8004972:	2b00      	cmp	r3, #0
 8004974:	d040      	beq.n	80049f8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	2b01      	cmp	r3, #1
 800497c:	d107      	bne.n	800498e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800497e:	4b47      	ldr	r3, [pc, #284]	; (8004a9c <HAL_RCC_ClockConfig+0x1c8>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d115      	bne.n	80049b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e07f      	b.n	8004a8e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	2b02      	cmp	r3, #2
 8004994:	d107      	bne.n	80049a6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004996:	4b41      	ldr	r3, [pc, #260]	; (8004a9c <HAL_RCC_ClockConfig+0x1c8>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d109      	bne.n	80049b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e073      	b.n	8004a8e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049a6:	4b3d      	ldr	r3, [pc, #244]	; (8004a9c <HAL_RCC_ClockConfig+0x1c8>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0302 	and.w	r3, r3, #2
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d101      	bne.n	80049b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e06b      	b.n	8004a8e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049b6:	4b39      	ldr	r3, [pc, #228]	; (8004a9c <HAL_RCC_ClockConfig+0x1c8>)
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	f023 0203 	bic.w	r2, r3, #3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	4936      	ldr	r1, [pc, #216]	; (8004a9c <HAL_RCC_ClockConfig+0x1c8>)
 80049c4:	4313      	orrs	r3, r2
 80049c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049c8:	f7fe fc80 	bl	80032cc <HAL_GetTick>
 80049cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049ce:	e00a      	b.n	80049e6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049d0:	f7fe fc7c 	bl	80032cc <HAL_GetTick>
 80049d4:	4602      	mov	r2, r0
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	f241 3288 	movw	r2, #5000	; 0x1388
 80049de:	4293      	cmp	r3, r2
 80049e0:	d901      	bls.n	80049e6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	e053      	b.n	8004a8e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049e6:	4b2d      	ldr	r3, [pc, #180]	; (8004a9c <HAL_RCC_ClockConfig+0x1c8>)
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	f003 020c 	and.w	r2, r3, #12
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d1eb      	bne.n	80049d0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80049f8:	4b27      	ldr	r3, [pc, #156]	; (8004a98 <HAL_RCC_ClockConfig+0x1c4>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 030f 	and.w	r3, r3, #15
 8004a00:	683a      	ldr	r2, [r7, #0]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d210      	bcs.n	8004a28 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a06:	4b24      	ldr	r3, [pc, #144]	; (8004a98 <HAL_RCC_ClockConfig+0x1c4>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f023 020f 	bic.w	r2, r3, #15
 8004a0e:	4922      	ldr	r1, [pc, #136]	; (8004a98 <HAL_RCC_ClockConfig+0x1c4>)
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a16:	4b20      	ldr	r3, [pc, #128]	; (8004a98 <HAL_RCC_ClockConfig+0x1c4>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 030f 	and.w	r3, r3, #15
 8004a1e:	683a      	ldr	r2, [r7, #0]
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d001      	beq.n	8004a28 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	e032      	b.n	8004a8e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0304 	and.w	r3, r3, #4
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d008      	beq.n	8004a46 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a34:	4b19      	ldr	r3, [pc, #100]	; (8004a9c <HAL_RCC_ClockConfig+0x1c8>)
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	4916      	ldr	r1, [pc, #88]	; (8004a9c <HAL_RCC_ClockConfig+0x1c8>)
 8004a42:	4313      	orrs	r3, r2
 8004a44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 0308 	and.w	r3, r3, #8
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d009      	beq.n	8004a66 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004a52:	4b12      	ldr	r3, [pc, #72]	; (8004a9c <HAL_RCC_ClockConfig+0x1c8>)
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	691b      	ldr	r3, [r3, #16]
 8004a5e:	00db      	lsls	r3, r3, #3
 8004a60:	490e      	ldr	r1, [pc, #56]	; (8004a9c <HAL_RCC_ClockConfig+0x1c8>)
 8004a62:	4313      	orrs	r3, r2
 8004a64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004a66:	f000 f821 	bl	8004aac <HAL_RCC_GetSysClockFreq>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	4b0b      	ldr	r3, [pc, #44]	; (8004a9c <HAL_RCC_ClockConfig+0x1c8>)
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	091b      	lsrs	r3, r3, #4
 8004a72:	f003 030f 	and.w	r3, r3, #15
 8004a76:	490a      	ldr	r1, [pc, #40]	; (8004aa0 <HAL_RCC_ClockConfig+0x1cc>)
 8004a78:	5ccb      	ldrb	r3, [r1, r3]
 8004a7a:	fa22 f303 	lsr.w	r3, r2, r3
 8004a7e:	4a09      	ldr	r2, [pc, #36]	; (8004aa4 <HAL_RCC_ClockConfig+0x1d0>)
 8004a80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004a82:	4b09      	ldr	r3, [pc, #36]	; (8004aa8 <HAL_RCC_ClockConfig+0x1d4>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4618      	mov	r0, r3
 8004a88:	f7fe fbdc 	bl	8003244 <HAL_InitTick>

  return HAL_OK;
 8004a8c:	2300      	movs	r3, #0
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3710      	adds	r7, #16
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	bf00      	nop
 8004a98:	40023c00 	.word	0x40023c00
 8004a9c:	40023800 	.word	0x40023800
 8004aa0:	0800710c 	.word	0x0800710c
 8004aa4:	20000004 	.word	0x20000004
 8004aa8:	20000008 	.word	0x20000008

08004aac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004aac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ab0:	b090      	sub	sp, #64	; 0x40
 8004ab2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	637b      	str	r3, [r7, #52]	; 0x34
 8004ab8:	2300      	movs	r3, #0
 8004aba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004abc:	2300      	movs	r3, #0
 8004abe:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ac4:	4b59      	ldr	r3, [pc, #356]	; (8004c2c <HAL_RCC_GetSysClockFreq+0x180>)
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	f003 030c 	and.w	r3, r3, #12
 8004acc:	2b08      	cmp	r3, #8
 8004ace:	d00d      	beq.n	8004aec <HAL_RCC_GetSysClockFreq+0x40>
 8004ad0:	2b08      	cmp	r3, #8
 8004ad2:	f200 80a1 	bhi.w	8004c18 <HAL_RCC_GetSysClockFreq+0x16c>
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d002      	beq.n	8004ae0 <HAL_RCC_GetSysClockFreq+0x34>
 8004ada:	2b04      	cmp	r3, #4
 8004adc:	d003      	beq.n	8004ae6 <HAL_RCC_GetSysClockFreq+0x3a>
 8004ade:	e09b      	b.n	8004c18 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ae0:	4b53      	ldr	r3, [pc, #332]	; (8004c30 <HAL_RCC_GetSysClockFreq+0x184>)
 8004ae2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004ae4:	e09b      	b.n	8004c1e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ae6:	4b53      	ldr	r3, [pc, #332]	; (8004c34 <HAL_RCC_GetSysClockFreq+0x188>)
 8004ae8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004aea:	e098      	b.n	8004c1e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004aec:	4b4f      	ldr	r3, [pc, #316]	; (8004c2c <HAL_RCC_GetSysClockFreq+0x180>)
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004af4:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004af6:	4b4d      	ldr	r3, [pc, #308]	; (8004c2c <HAL_RCC_GetSysClockFreq+0x180>)
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d028      	beq.n	8004b54 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b02:	4b4a      	ldr	r3, [pc, #296]	; (8004c2c <HAL_RCC_GetSysClockFreq+0x180>)
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	099b      	lsrs	r3, r3, #6
 8004b08:	2200      	movs	r2, #0
 8004b0a:	623b      	str	r3, [r7, #32]
 8004b0c:	627a      	str	r2, [r7, #36]	; 0x24
 8004b0e:	6a3b      	ldr	r3, [r7, #32]
 8004b10:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004b14:	2100      	movs	r1, #0
 8004b16:	4b47      	ldr	r3, [pc, #284]	; (8004c34 <HAL_RCC_GetSysClockFreq+0x188>)
 8004b18:	fb03 f201 	mul.w	r2, r3, r1
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	fb00 f303 	mul.w	r3, r0, r3
 8004b22:	4413      	add	r3, r2
 8004b24:	4a43      	ldr	r2, [pc, #268]	; (8004c34 <HAL_RCC_GetSysClockFreq+0x188>)
 8004b26:	fba0 1202 	umull	r1, r2, r0, r2
 8004b2a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b2c:	460a      	mov	r2, r1
 8004b2e:	62ba      	str	r2, [r7, #40]	; 0x28
 8004b30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b32:	4413      	add	r3, r2
 8004b34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b38:	2200      	movs	r2, #0
 8004b3a:	61bb      	str	r3, [r7, #24]
 8004b3c:	61fa      	str	r2, [r7, #28]
 8004b3e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b42:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004b46:	f7fb fbcb 	bl	80002e0 <__aeabi_uldivmod>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	460b      	mov	r3, r1
 8004b4e:	4613      	mov	r3, r2
 8004b50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b52:	e053      	b.n	8004bfc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b54:	4b35      	ldr	r3, [pc, #212]	; (8004c2c <HAL_RCC_GetSysClockFreq+0x180>)
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	099b      	lsrs	r3, r3, #6
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	613b      	str	r3, [r7, #16]
 8004b5e:	617a      	str	r2, [r7, #20]
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004b66:	f04f 0b00 	mov.w	fp, #0
 8004b6a:	4652      	mov	r2, sl
 8004b6c:	465b      	mov	r3, fp
 8004b6e:	f04f 0000 	mov.w	r0, #0
 8004b72:	f04f 0100 	mov.w	r1, #0
 8004b76:	0159      	lsls	r1, r3, #5
 8004b78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b7c:	0150      	lsls	r0, r2, #5
 8004b7e:	4602      	mov	r2, r0
 8004b80:	460b      	mov	r3, r1
 8004b82:	ebb2 080a 	subs.w	r8, r2, sl
 8004b86:	eb63 090b 	sbc.w	r9, r3, fp
 8004b8a:	f04f 0200 	mov.w	r2, #0
 8004b8e:	f04f 0300 	mov.w	r3, #0
 8004b92:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004b96:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004b9a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004b9e:	ebb2 0408 	subs.w	r4, r2, r8
 8004ba2:	eb63 0509 	sbc.w	r5, r3, r9
 8004ba6:	f04f 0200 	mov.w	r2, #0
 8004baa:	f04f 0300 	mov.w	r3, #0
 8004bae:	00eb      	lsls	r3, r5, #3
 8004bb0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bb4:	00e2      	lsls	r2, r4, #3
 8004bb6:	4614      	mov	r4, r2
 8004bb8:	461d      	mov	r5, r3
 8004bba:	eb14 030a 	adds.w	r3, r4, sl
 8004bbe:	603b      	str	r3, [r7, #0]
 8004bc0:	eb45 030b 	adc.w	r3, r5, fp
 8004bc4:	607b      	str	r3, [r7, #4]
 8004bc6:	f04f 0200 	mov.w	r2, #0
 8004bca:	f04f 0300 	mov.w	r3, #0
 8004bce:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004bd2:	4629      	mov	r1, r5
 8004bd4:	028b      	lsls	r3, r1, #10
 8004bd6:	4621      	mov	r1, r4
 8004bd8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004bdc:	4621      	mov	r1, r4
 8004bde:	028a      	lsls	r2, r1, #10
 8004be0:	4610      	mov	r0, r2
 8004be2:	4619      	mov	r1, r3
 8004be4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004be6:	2200      	movs	r2, #0
 8004be8:	60bb      	str	r3, [r7, #8]
 8004bea:	60fa      	str	r2, [r7, #12]
 8004bec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004bf0:	f7fb fb76 	bl	80002e0 <__aeabi_uldivmod>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	460b      	mov	r3, r1
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004bfc:	4b0b      	ldr	r3, [pc, #44]	; (8004c2c <HAL_RCC_GetSysClockFreq+0x180>)
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	0c1b      	lsrs	r3, r3, #16
 8004c02:	f003 0303 	and.w	r3, r3, #3
 8004c06:	3301      	adds	r3, #1
 8004c08:	005b      	lsls	r3, r3, #1
 8004c0a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8004c0c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c14:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004c16:	e002      	b.n	8004c1e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c18:	4b05      	ldr	r3, [pc, #20]	; (8004c30 <HAL_RCC_GetSysClockFreq+0x184>)
 8004c1a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004c1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3740      	adds	r7, #64	; 0x40
 8004c24:	46bd      	mov	sp, r7
 8004c26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c2a:	bf00      	nop
 8004c2c:	40023800 	.word	0x40023800
 8004c30:	00f42400 	.word	0x00f42400
 8004c34:	017d7840 	.word	0x017d7840

08004c38 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d101      	bne.n	8004c4a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e09d      	b.n	8004d86 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d108      	bne.n	8004c64 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c5a:	d009      	beq.n	8004c70 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	61da      	str	r2, [r3, #28]
 8004c62:	e005      	b.n	8004c70 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d106      	bne.n	8004c90 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2200      	movs	r2, #0
 8004c86:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f7fd fff2 	bl	8002c74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2202      	movs	r2, #2
 8004c94:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ca6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004cb0:	d902      	bls.n	8004cb8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	60fb      	str	r3, [r7, #12]
 8004cb6:	e002      	b.n	8004cbe <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004cb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004cbc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	68db      	ldr	r3, [r3, #12]
 8004cc2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004cc6:	d007      	beq.n	8004cd8 <HAL_SPI_Init+0xa0>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004cd0:	d002      	beq.n	8004cd8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004ce8:	431a      	orrs	r2, r3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	691b      	ldr	r3, [r3, #16]
 8004cee:	f003 0302 	and.w	r3, r3, #2
 8004cf2:	431a      	orrs	r2, r3
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	695b      	ldr	r3, [r3, #20]
 8004cf8:	f003 0301 	and.w	r3, r3, #1
 8004cfc:	431a      	orrs	r2, r3
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	699b      	ldr	r3, [r3, #24]
 8004d02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d06:	431a      	orrs	r2, r3
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	69db      	ldr	r3, [r3, #28]
 8004d0c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d10:	431a      	orrs	r2, r3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6a1b      	ldr	r3, [r3, #32]
 8004d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d1a:	ea42 0103 	orr.w	r1, r2, r3
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d22:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	430a      	orrs	r2, r1
 8004d2c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	699b      	ldr	r3, [r3, #24]
 8004d32:	0c1b      	lsrs	r3, r3, #16
 8004d34:	f003 0204 	and.w	r2, r3, #4
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3c:	f003 0310 	and.w	r3, r3, #16
 8004d40:	431a      	orrs	r2, r3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d46:	f003 0308 	and.w	r3, r3, #8
 8004d4a:	431a      	orrs	r2, r3
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004d54:	ea42 0103 	orr.w	r1, r2, r3
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	430a      	orrs	r2, r1
 8004d64:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	69da      	ldr	r2, [r3, #28]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d74:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004d84:	2300      	movs	r3, #0
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3710      	adds	r7, #16
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}

08004d8e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d8e:	b580      	push	{r7, lr}
 8004d90:	b088      	sub	sp, #32
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	60f8      	str	r0, [r7, #12]
 8004d96:	60b9      	str	r1, [r7, #8]
 8004d98:	603b      	str	r3, [r7, #0]
 8004d9a:	4613      	mov	r3, r2
 8004d9c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d101      	bne.n	8004db0 <HAL_SPI_Transmit+0x22>
 8004dac:	2302      	movs	r3, #2
 8004dae:	e158      	b.n	8005062 <HAL_SPI_Transmit+0x2d4>
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004db8:	f7fe fa88 	bl	80032cc <HAL_GetTick>
 8004dbc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004dbe:	88fb      	ldrh	r3, [r7, #6]
 8004dc0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d002      	beq.n	8004dd4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004dce:	2302      	movs	r3, #2
 8004dd0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004dd2:	e13d      	b.n	8005050 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d002      	beq.n	8004de0 <HAL_SPI_Transmit+0x52>
 8004dda:	88fb      	ldrh	r3, [r7, #6]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d102      	bne.n	8004de6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004de4:	e134      	b.n	8005050 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2203      	movs	r2, #3
 8004dea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2200      	movs	r2, #0
 8004df2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	68ba      	ldr	r2, [r7, #8]
 8004df8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	88fa      	ldrh	r2, [r7, #6]
 8004dfe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	88fa      	ldrh	r2, [r7, #6]
 8004e04:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2200      	movs	r2, #0
 8004e18:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2200      	movs	r2, #0
 8004e26:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e30:	d10f      	bne.n	8004e52 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e40:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e50:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e5c:	2b40      	cmp	r3, #64	; 0x40
 8004e5e:	d007      	beq.n	8004e70 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e6e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e78:	d94b      	bls.n	8004f12 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d002      	beq.n	8004e88 <HAL_SPI_Transmit+0xfa>
 8004e82:	8afb      	ldrh	r3, [r7, #22]
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d13e      	bne.n	8004f06 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e8c:	881a      	ldrh	r2, [r3, #0]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e98:	1c9a      	adds	r2, r3, #2
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	3b01      	subs	r3, #1
 8004ea6:	b29a      	uxth	r2, r3
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004eac:	e02b      	b.n	8004f06 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	f003 0302 	and.w	r3, r3, #2
 8004eb8:	2b02      	cmp	r3, #2
 8004eba:	d112      	bne.n	8004ee2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ec0:	881a      	ldrh	r2, [r3, #0]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ecc:	1c9a      	adds	r2, r3, #2
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	3b01      	subs	r3, #1
 8004eda:	b29a      	uxth	r2, r3
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ee0:	e011      	b.n	8004f06 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ee2:	f7fe f9f3 	bl	80032cc <HAL_GetTick>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	69bb      	ldr	r3, [r7, #24]
 8004eea:	1ad3      	subs	r3, r2, r3
 8004eec:	683a      	ldr	r2, [r7, #0]
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d803      	bhi.n	8004efa <HAL_SPI_Transmit+0x16c>
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ef8:	d102      	bne.n	8004f00 <HAL_SPI_Transmit+0x172>
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d102      	bne.n	8004f06 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004f00:	2303      	movs	r3, #3
 8004f02:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004f04:	e0a4      	b.n	8005050 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d1ce      	bne.n	8004eae <HAL_SPI_Transmit+0x120>
 8004f10:	e07c      	b.n	800500c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d002      	beq.n	8004f20 <HAL_SPI_Transmit+0x192>
 8004f1a:	8afb      	ldrh	r3, [r7, #22]
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d170      	bne.n	8005002 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d912      	bls.n	8004f50 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f2e:	881a      	ldrh	r2, [r3, #0]
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f3a:	1c9a      	adds	r2, r3, #2
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	3b02      	subs	r3, #2
 8004f48:	b29a      	uxth	r2, r3
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004f4e:	e058      	b.n	8005002 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	330c      	adds	r3, #12
 8004f5a:	7812      	ldrb	r2, [r2, #0]
 8004f5c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f62:	1c5a      	adds	r2, r3, #1
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	3b01      	subs	r3, #1
 8004f70:	b29a      	uxth	r2, r3
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004f76:	e044      	b.n	8005002 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	f003 0302 	and.w	r3, r3, #2
 8004f82:	2b02      	cmp	r3, #2
 8004f84:	d12b      	bne.n	8004fde <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d912      	bls.n	8004fb6 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f94:	881a      	ldrh	r2, [r3, #0]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fa0:	1c9a      	adds	r2, r3, #2
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	3b02      	subs	r3, #2
 8004fae:	b29a      	uxth	r2, r3
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004fb4:	e025      	b.n	8005002 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	330c      	adds	r3, #12
 8004fc0:	7812      	ldrb	r2, [r2, #0]
 8004fc2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc8:	1c5a      	adds	r2, r3, #1
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	3b01      	subs	r3, #1
 8004fd6:	b29a      	uxth	r2, r3
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004fdc:	e011      	b.n	8005002 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004fde:	f7fe f975 	bl	80032cc <HAL_GetTick>
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	69bb      	ldr	r3, [r7, #24]
 8004fe6:	1ad3      	subs	r3, r2, r3
 8004fe8:	683a      	ldr	r2, [r7, #0]
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d803      	bhi.n	8004ff6 <HAL_SPI_Transmit+0x268>
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ff4:	d102      	bne.n	8004ffc <HAL_SPI_Transmit+0x26e>
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d102      	bne.n	8005002 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004ffc:	2303      	movs	r3, #3
 8004ffe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005000:	e026      	b.n	8005050 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005006:	b29b      	uxth	r3, r3
 8005008:	2b00      	cmp	r3, #0
 800500a:	d1b5      	bne.n	8004f78 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800500c:	69ba      	ldr	r2, [r7, #24]
 800500e:	6839      	ldr	r1, [r7, #0]
 8005010:	68f8      	ldr	r0, [r7, #12]
 8005012:	f000 f949 	bl	80052a8 <SPI_EndRxTxTransaction>
 8005016:	4603      	mov	r3, r0
 8005018:	2b00      	cmp	r3, #0
 800501a:	d002      	beq.n	8005022 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2220      	movs	r2, #32
 8005020:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d10a      	bne.n	8005040 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800502a:	2300      	movs	r3, #0
 800502c:	613b      	str	r3, [r7, #16]
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	613b      	str	r3, [r7, #16]
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	613b      	str	r3, [r7, #16]
 800503e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005044:	2b00      	cmp	r3, #0
 8005046:	d002      	beq.n	800504e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	77fb      	strb	r3, [r7, #31]
 800504c:	e000      	b.n	8005050 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800504e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2200      	movs	r2, #0
 800505c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005060:	7ffb      	ldrb	r3, [r7, #31]
}
 8005062:	4618      	mov	r0, r3
 8005064:	3720      	adds	r7, #32
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}
	...

0800506c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b088      	sub	sp, #32
 8005070:	af00      	add	r7, sp, #0
 8005072:	60f8      	str	r0, [r7, #12]
 8005074:	60b9      	str	r1, [r7, #8]
 8005076:	603b      	str	r3, [r7, #0]
 8005078:	4613      	mov	r3, r2
 800507a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800507c:	f7fe f926 	bl	80032cc <HAL_GetTick>
 8005080:	4602      	mov	r2, r0
 8005082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005084:	1a9b      	subs	r3, r3, r2
 8005086:	683a      	ldr	r2, [r7, #0]
 8005088:	4413      	add	r3, r2
 800508a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800508c:	f7fe f91e 	bl	80032cc <HAL_GetTick>
 8005090:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005092:	4b39      	ldr	r3, [pc, #228]	; (8005178 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	015b      	lsls	r3, r3, #5
 8005098:	0d1b      	lsrs	r3, r3, #20
 800509a:	69fa      	ldr	r2, [r7, #28]
 800509c:	fb02 f303 	mul.w	r3, r2, r3
 80050a0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80050a2:	e054      	b.n	800514e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050aa:	d050      	beq.n	800514e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80050ac:	f7fe f90e 	bl	80032cc <HAL_GetTick>
 80050b0:	4602      	mov	r2, r0
 80050b2:	69bb      	ldr	r3, [r7, #24]
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	69fa      	ldr	r2, [r7, #28]
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d902      	bls.n	80050c2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d13d      	bne.n	800513e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	685a      	ldr	r2, [r3, #4]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80050d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050da:	d111      	bne.n	8005100 <SPI_WaitFlagStateUntilTimeout+0x94>
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050e4:	d004      	beq.n	80050f0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050ee:	d107      	bne.n	8005100 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005104:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005108:	d10f      	bne.n	800512a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005118:	601a      	str	r2, [r3, #0]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005128:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2201      	movs	r2, #1
 800512e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2200      	movs	r2, #0
 8005136:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800513a:	2303      	movs	r3, #3
 800513c:	e017      	b.n	800516e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d101      	bne.n	8005148 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005144:	2300      	movs	r3, #0
 8005146:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	3b01      	subs	r3, #1
 800514c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	689a      	ldr	r2, [r3, #8]
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	4013      	ands	r3, r2
 8005158:	68ba      	ldr	r2, [r7, #8]
 800515a:	429a      	cmp	r2, r3
 800515c:	bf0c      	ite	eq
 800515e:	2301      	moveq	r3, #1
 8005160:	2300      	movne	r3, #0
 8005162:	b2db      	uxtb	r3, r3
 8005164:	461a      	mov	r2, r3
 8005166:	79fb      	ldrb	r3, [r7, #7]
 8005168:	429a      	cmp	r2, r3
 800516a:	d19b      	bne.n	80050a4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800516c:	2300      	movs	r3, #0
}
 800516e:	4618      	mov	r0, r3
 8005170:	3720      	adds	r7, #32
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
 8005176:	bf00      	nop
 8005178:	20000004 	.word	0x20000004

0800517c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b08a      	sub	sp, #40	; 0x28
 8005180:	af00      	add	r7, sp, #0
 8005182:	60f8      	str	r0, [r7, #12]
 8005184:	60b9      	str	r1, [r7, #8]
 8005186:	607a      	str	r2, [r7, #4]
 8005188:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800518a:	2300      	movs	r3, #0
 800518c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800518e:	f7fe f89d 	bl	80032cc <HAL_GetTick>
 8005192:	4602      	mov	r2, r0
 8005194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005196:	1a9b      	subs	r3, r3, r2
 8005198:	683a      	ldr	r2, [r7, #0]
 800519a:	4413      	add	r3, r2
 800519c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800519e:	f7fe f895 	bl	80032cc <HAL_GetTick>
 80051a2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	330c      	adds	r3, #12
 80051aa:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80051ac:	4b3d      	ldr	r3, [pc, #244]	; (80052a4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	4613      	mov	r3, r2
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	4413      	add	r3, r2
 80051b6:	00da      	lsls	r2, r3, #3
 80051b8:	1ad3      	subs	r3, r2, r3
 80051ba:	0d1b      	lsrs	r3, r3, #20
 80051bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051be:	fb02 f303 	mul.w	r3, r2, r3
 80051c2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80051c4:	e060      	b.n	8005288 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80051cc:	d107      	bne.n	80051de <SPI_WaitFifoStateUntilTimeout+0x62>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d104      	bne.n	80051de <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80051d4:	69fb      	ldr	r3, [r7, #28]
 80051d6:	781b      	ldrb	r3, [r3, #0]
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80051dc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051e4:	d050      	beq.n	8005288 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80051e6:	f7fe f871 	bl	80032cc <HAL_GetTick>
 80051ea:	4602      	mov	r2, r0
 80051ec:	6a3b      	ldr	r3, [r7, #32]
 80051ee:	1ad3      	subs	r3, r2, r3
 80051f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d902      	bls.n	80051fc <SPI_WaitFifoStateUntilTimeout+0x80>
 80051f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d13d      	bne.n	8005278 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	685a      	ldr	r2, [r3, #4]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800520a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005214:	d111      	bne.n	800523a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800521e:	d004      	beq.n	800522a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005228:	d107      	bne.n	800523a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005238:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800523e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005242:	d10f      	bne.n	8005264 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005252:	601a      	str	r2, [r3, #0]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005262:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2200      	movs	r2, #0
 8005270:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005274:	2303      	movs	r3, #3
 8005276:	e010      	b.n	800529a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005278:	69bb      	ldr	r3, [r7, #24]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d101      	bne.n	8005282 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800527e:	2300      	movs	r3, #0
 8005280:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005282:	69bb      	ldr	r3, [r7, #24]
 8005284:	3b01      	subs	r3, #1
 8005286:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	689a      	ldr	r2, [r3, #8]
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	4013      	ands	r3, r2
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	429a      	cmp	r2, r3
 8005296:	d196      	bne.n	80051c6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005298:	2300      	movs	r3, #0
}
 800529a:	4618      	mov	r0, r3
 800529c:	3728      	adds	r7, #40	; 0x28
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	bf00      	nop
 80052a4:	20000004 	.word	0x20000004

080052a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b088      	sub	sp, #32
 80052ac:	af02      	add	r7, sp, #8
 80052ae:	60f8      	str	r0, [r7, #12]
 80052b0:	60b9      	str	r1, [r7, #8]
 80052b2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	9300      	str	r3, [sp, #0]
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	2200      	movs	r2, #0
 80052bc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80052c0:	68f8      	ldr	r0, [r7, #12]
 80052c2:	f7ff ff5b 	bl	800517c <SPI_WaitFifoStateUntilTimeout>
 80052c6:	4603      	mov	r3, r0
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d007      	beq.n	80052dc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052d0:	f043 0220 	orr.w	r2, r3, #32
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80052d8:	2303      	movs	r3, #3
 80052da:	e046      	b.n	800536a <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80052dc:	4b25      	ldr	r3, [pc, #148]	; (8005374 <SPI_EndRxTxTransaction+0xcc>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a25      	ldr	r2, [pc, #148]	; (8005378 <SPI_EndRxTxTransaction+0xd0>)
 80052e2:	fba2 2303 	umull	r2, r3, r2, r3
 80052e6:	0d5b      	lsrs	r3, r3, #21
 80052e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80052ec:	fb02 f303 	mul.w	r3, r2, r3
 80052f0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052fa:	d112      	bne.n	8005322 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	9300      	str	r3, [sp, #0]
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	2200      	movs	r2, #0
 8005304:	2180      	movs	r1, #128	; 0x80
 8005306:	68f8      	ldr	r0, [r7, #12]
 8005308:	f7ff feb0 	bl	800506c <SPI_WaitFlagStateUntilTimeout>
 800530c:	4603      	mov	r3, r0
 800530e:	2b00      	cmp	r3, #0
 8005310:	d016      	beq.n	8005340 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005316:	f043 0220 	orr.w	r2, r3, #32
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800531e:	2303      	movs	r3, #3
 8005320:	e023      	b.n	800536a <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d00a      	beq.n	800533e <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	3b01      	subs	r3, #1
 800532c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005338:	2b80      	cmp	r3, #128	; 0x80
 800533a:	d0f2      	beq.n	8005322 <SPI_EndRxTxTransaction+0x7a>
 800533c:	e000      	b.n	8005340 <SPI_EndRxTxTransaction+0x98>
        break;
 800533e:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	9300      	str	r3, [sp, #0]
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	2200      	movs	r2, #0
 8005348:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800534c:	68f8      	ldr	r0, [r7, #12]
 800534e:	f7ff ff15 	bl	800517c <SPI_WaitFifoStateUntilTimeout>
 8005352:	4603      	mov	r3, r0
 8005354:	2b00      	cmp	r3, #0
 8005356:	d007      	beq.n	8005368 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800535c:	f043 0220 	orr.w	r2, r3, #32
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005364:	2303      	movs	r3, #3
 8005366:	e000      	b.n	800536a <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8005368:	2300      	movs	r3, #0
}
 800536a:	4618      	mov	r0, r3
 800536c:	3718      	adds	r7, #24
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
 8005372:	bf00      	nop
 8005374:	20000004 	.word	0x20000004
 8005378:	165e9f81 	.word	0x165e9f81

0800537c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b082      	sub	sp, #8
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d101      	bne.n	800538e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	e049      	b.n	8005422 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005394:	b2db      	uxtb	r3, r3
 8005396:	2b00      	cmp	r3, #0
 8005398:	d106      	bne.n	80053a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f7fd fea0 	bl	80030e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2202      	movs	r2, #2
 80053ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	3304      	adds	r3, #4
 80053b8:	4619      	mov	r1, r3
 80053ba:	4610      	mov	r0, r2
 80053bc:	f000 fbe0 	bl	8005b80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2201      	movs	r2, #1
 80053cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2201      	movs	r2, #1
 80053d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2201      	movs	r2, #1
 80053e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2201      	movs	r2, #1
 80053f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2201      	movs	r2, #1
 800540c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2201      	movs	r2, #1
 8005414:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2201      	movs	r2, #1
 800541c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005420:	2300      	movs	r3, #0
}
 8005422:	4618      	mov	r0, r3
 8005424:	3708      	adds	r7, #8
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
	...

0800542c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800542c:	b480      	push	{r7}
 800542e:	b085      	sub	sp, #20
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800543a:	b2db      	uxtb	r3, r3
 800543c:	2b01      	cmp	r3, #1
 800543e:	d001      	beq.n	8005444 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	e04c      	b.n	80054de <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2202      	movs	r2, #2
 8005448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a26      	ldr	r2, [pc, #152]	; (80054ec <HAL_TIM_Base_Start+0xc0>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d022      	beq.n	800549c <HAL_TIM_Base_Start+0x70>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800545e:	d01d      	beq.n	800549c <HAL_TIM_Base_Start+0x70>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a22      	ldr	r2, [pc, #136]	; (80054f0 <HAL_TIM_Base_Start+0xc4>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d018      	beq.n	800549c <HAL_TIM_Base_Start+0x70>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a21      	ldr	r2, [pc, #132]	; (80054f4 <HAL_TIM_Base_Start+0xc8>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d013      	beq.n	800549c <HAL_TIM_Base_Start+0x70>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a1f      	ldr	r2, [pc, #124]	; (80054f8 <HAL_TIM_Base_Start+0xcc>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d00e      	beq.n	800549c <HAL_TIM_Base_Start+0x70>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a1e      	ldr	r2, [pc, #120]	; (80054fc <HAL_TIM_Base_Start+0xd0>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d009      	beq.n	800549c <HAL_TIM_Base_Start+0x70>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a1c      	ldr	r2, [pc, #112]	; (8005500 <HAL_TIM_Base_Start+0xd4>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d004      	beq.n	800549c <HAL_TIM_Base_Start+0x70>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a1b      	ldr	r2, [pc, #108]	; (8005504 <HAL_TIM_Base_Start+0xd8>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d115      	bne.n	80054c8 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	689a      	ldr	r2, [r3, #8]
 80054a2:	4b19      	ldr	r3, [pc, #100]	; (8005508 <HAL_TIM_Base_Start+0xdc>)
 80054a4:	4013      	ands	r3, r2
 80054a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2b06      	cmp	r3, #6
 80054ac:	d015      	beq.n	80054da <HAL_TIM_Base_Start+0xae>
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054b4:	d011      	beq.n	80054da <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f042 0201 	orr.w	r2, r2, #1
 80054c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054c6:	e008      	b.n	80054da <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f042 0201 	orr.w	r2, r2, #1
 80054d6:	601a      	str	r2, [r3, #0]
 80054d8:	e000      	b.n	80054dc <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054da:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80054dc:	2300      	movs	r3, #0
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3714      	adds	r7, #20
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr
 80054ea:	bf00      	nop
 80054ec:	40010000 	.word	0x40010000
 80054f0:	40000400 	.word	0x40000400
 80054f4:	40000800 	.word	0x40000800
 80054f8:	40000c00 	.word	0x40000c00
 80054fc:	40010400 	.word	0x40010400
 8005500:	40014000 	.word	0x40014000
 8005504:	40001800 	.word	0x40001800
 8005508:	00010007 	.word	0x00010007

0800550c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b082      	sub	sp, #8
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d101      	bne.n	800551e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	e049      	b.n	80055b2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005524:	b2db      	uxtb	r3, r3
 8005526:	2b00      	cmp	r3, #0
 8005528:	d106      	bne.n	8005538 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2200      	movs	r2, #0
 800552e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f000 f841 	bl	80055ba <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2202      	movs	r2, #2
 800553c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	3304      	adds	r3, #4
 8005548:	4619      	mov	r1, r3
 800554a:	4610      	mov	r0, r2
 800554c:	f000 fb18 	bl	8005b80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2201      	movs	r2, #1
 8005554:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2201      	movs	r2, #1
 8005564:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2201      	movs	r2, #1
 800557c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2201      	movs	r2, #1
 8005584:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2201      	movs	r2, #1
 800558c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2201      	movs	r2, #1
 8005594:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2201      	movs	r2, #1
 800559c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2201      	movs	r2, #1
 80055a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055b0:	2300      	movs	r3, #0
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3708      	adds	r7, #8
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}

080055ba <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80055ba:	b480      	push	{r7}
 80055bc:	b083      	sub	sp, #12
 80055be:	af00      	add	r7, sp, #0
 80055c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80055c2:	bf00      	nop
 80055c4:	370c      	adds	r7, #12
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr
	...

080055d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b084      	sub	sp, #16
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d109      	bne.n	80055f4 <HAL_TIM_PWM_Start+0x24>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80055e6:	b2db      	uxtb	r3, r3
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	bf14      	ite	ne
 80055ec:	2301      	movne	r3, #1
 80055ee:	2300      	moveq	r3, #0
 80055f0:	b2db      	uxtb	r3, r3
 80055f2:	e03c      	b.n	800566e <HAL_TIM_PWM_Start+0x9e>
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	2b04      	cmp	r3, #4
 80055f8:	d109      	bne.n	800560e <HAL_TIM_PWM_Start+0x3e>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005600:	b2db      	uxtb	r3, r3
 8005602:	2b01      	cmp	r3, #1
 8005604:	bf14      	ite	ne
 8005606:	2301      	movne	r3, #1
 8005608:	2300      	moveq	r3, #0
 800560a:	b2db      	uxtb	r3, r3
 800560c:	e02f      	b.n	800566e <HAL_TIM_PWM_Start+0x9e>
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	2b08      	cmp	r3, #8
 8005612:	d109      	bne.n	8005628 <HAL_TIM_PWM_Start+0x58>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800561a:	b2db      	uxtb	r3, r3
 800561c:	2b01      	cmp	r3, #1
 800561e:	bf14      	ite	ne
 8005620:	2301      	movne	r3, #1
 8005622:	2300      	moveq	r3, #0
 8005624:	b2db      	uxtb	r3, r3
 8005626:	e022      	b.n	800566e <HAL_TIM_PWM_Start+0x9e>
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	2b0c      	cmp	r3, #12
 800562c:	d109      	bne.n	8005642 <HAL_TIM_PWM_Start+0x72>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005634:	b2db      	uxtb	r3, r3
 8005636:	2b01      	cmp	r3, #1
 8005638:	bf14      	ite	ne
 800563a:	2301      	movne	r3, #1
 800563c:	2300      	moveq	r3, #0
 800563e:	b2db      	uxtb	r3, r3
 8005640:	e015      	b.n	800566e <HAL_TIM_PWM_Start+0x9e>
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	2b10      	cmp	r3, #16
 8005646:	d109      	bne.n	800565c <HAL_TIM_PWM_Start+0x8c>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800564e:	b2db      	uxtb	r3, r3
 8005650:	2b01      	cmp	r3, #1
 8005652:	bf14      	ite	ne
 8005654:	2301      	movne	r3, #1
 8005656:	2300      	moveq	r3, #0
 8005658:	b2db      	uxtb	r3, r3
 800565a:	e008      	b.n	800566e <HAL_TIM_PWM_Start+0x9e>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005662:	b2db      	uxtb	r3, r3
 8005664:	2b01      	cmp	r3, #1
 8005666:	bf14      	ite	ne
 8005668:	2301      	movne	r3, #1
 800566a:	2300      	moveq	r3, #0
 800566c:	b2db      	uxtb	r3, r3
 800566e:	2b00      	cmp	r3, #0
 8005670:	d001      	beq.n	8005676 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	e092      	b.n	800579c <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d104      	bne.n	8005686 <HAL_TIM_PWM_Start+0xb6>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2202      	movs	r2, #2
 8005680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005684:	e023      	b.n	80056ce <HAL_TIM_PWM_Start+0xfe>
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	2b04      	cmp	r3, #4
 800568a:	d104      	bne.n	8005696 <HAL_TIM_PWM_Start+0xc6>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2202      	movs	r2, #2
 8005690:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005694:	e01b      	b.n	80056ce <HAL_TIM_PWM_Start+0xfe>
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	2b08      	cmp	r3, #8
 800569a:	d104      	bne.n	80056a6 <HAL_TIM_PWM_Start+0xd6>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2202      	movs	r2, #2
 80056a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056a4:	e013      	b.n	80056ce <HAL_TIM_PWM_Start+0xfe>
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	2b0c      	cmp	r3, #12
 80056aa:	d104      	bne.n	80056b6 <HAL_TIM_PWM_Start+0xe6>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2202      	movs	r2, #2
 80056b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80056b4:	e00b      	b.n	80056ce <HAL_TIM_PWM_Start+0xfe>
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	2b10      	cmp	r3, #16
 80056ba:	d104      	bne.n	80056c6 <HAL_TIM_PWM_Start+0xf6>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2202      	movs	r2, #2
 80056c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056c4:	e003      	b.n	80056ce <HAL_TIM_PWM_Start+0xfe>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2202      	movs	r2, #2
 80056ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	2201      	movs	r2, #1
 80056d4:	6839      	ldr	r1, [r7, #0]
 80056d6:	4618      	mov	r0, r3
 80056d8:	f000 fdea 	bl	80062b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a30      	ldr	r2, [pc, #192]	; (80057a4 <HAL_TIM_PWM_Start+0x1d4>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d004      	beq.n	80056f0 <HAL_TIM_PWM_Start+0x120>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a2f      	ldr	r2, [pc, #188]	; (80057a8 <HAL_TIM_PWM_Start+0x1d8>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d101      	bne.n	80056f4 <HAL_TIM_PWM_Start+0x124>
 80056f0:	2301      	movs	r3, #1
 80056f2:	e000      	b.n	80056f6 <HAL_TIM_PWM_Start+0x126>
 80056f4:	2300      	movs	r3, #0
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d007      	beq.n	800570a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005708:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a25      	ldr	r2, [pc, #148]	; (80057a4 <HAL_TIM_PWM_Start+0x1d4>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d022      	beq.n	800575a <HAL_TIM_PWM_Start+0x18a>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800571c:	d01d      	beq.n	800575a <HAL_TIM_PWM_Start+0x18a>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a22      	ldr	r2, [pc, #136]	; (80057ac <HAL_TIM_PWM_Start+0x1dc>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d018      	beq.n	800575a <HAL_TIM_PWM_Start+0x18a>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a20      	ldr	r2, [pc, #128]	; (80057b0 <HAL_TIM_PWM_Start+0x1e0>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d013      	beq.n	800575a <HAL_TIM_PWM_Start+0x18a>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a1f      	ldr	r2, [pc, #124]	; (80057b4 <HAL_TIM_PWM_Start+0x1e4>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d00e      	beq.n	800575a <HAL_TIM_PWM_Start+0x18a>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a19      	ldr	r2, [pc, #100]	; (80057a8 <HAL_TIM_PWM_Start+0x1d8>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d009      	beq.n	800575a <HAL_TIM_PWM_Start+0x18a>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a1b      	ldr	r2, [pc, #108]	; (80057b8 <HAL_TIM_PWM_Start+0x1e8>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d004      	beq.n	800575a <HAL_TIM_PWM_Start+0x18a>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a19      	ldr	r2, [pc, #100]	; (80057bc <HAL_TIM_PWM_Start+0x1ec>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d115      	bne.n	8005786 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	689a      	ldr	r2, [r3, #8]
 8005760:	4b17      	ldr	r3, [pc, #92]	; (80057c0 <HAL_TIM_PWM_Start+0x1f0>)
 8005762:	4013      	ands	r3, r2
 8005764:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2b06      	cmp	r3, #6
 800576a:	d015      	beq.n	8005798 <HAL_TIM_PWM_Start+0x1c8>
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005772:	d011      	beq.n	8005798 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f042 0201 	orr.w	r2, r2, #1
 8005782:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005784:	e008      	b.n	8005798 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f042 0201 	orr.w	r2, r2, #1
 8005794:	601a      	str	r2, [r3, #0]
 8005796:	e000      	b.n	800579a <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005798:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800579a:	2300      	movs	r3, #0
}
 800579c:	4618      	mov	r0, r3
 800579e:	3710      	adds	r7, #16
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}
 80057a4:	40010000 	.word	0x40010000
 80057a8:	40010400 	.word	0x40010400
 80057ac:	40000400 	.word	0x40000400
 80057b0:	40000800 	.word	0x40000800
 80057b4:	40000c00 	.word	0x40000c00
 80057b8:	40014000 	.word	0x40014000
 80057bc:	40001800 	.word	0x40001800
 80057c0:	00010007 	.word	0x00010007

080057c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b086      	sub	sp, #24
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	60f8      	str	r0, [r7, #12]
 80057cc:	60b9      	str	r1, [r7, #8]
 80057ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057d0:	2300      	movs	r3, #0
 80057d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d101      	bne.n	80057e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80057de:	2302      	movs	r3, #2
 80057e0:	e0ff      	b.n	80059e2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2201      	movs	r2, #1
 80057e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2b14      	cmp	r3, #20
 80057ee:	f200 80f0 	bhi.w	80059d2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80057f2:	a201      	add	r2, pc, #4	; (adr r2, 80057f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80057f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057f8:	0800584d 	.word	0x0800584d
 80057fc:	080059d3 	.word	0x080059d3
 8005800:	080059d3 	.word	0x080059d3
 8005804:	080059d3 	.word	0x080059d3
 8005808:	0800588d 	.word	0x0800588d
 800580c:	080059d3 	.word	0x080059d3
 8005810:	080059d3 	.word	0x080059d3
 8005814:	080059d3 	.word	0x080059d3
 8005818:	080058cf 	.word	0x080058cf
 800581c:	080059d3 	.word	0x080059d3
 8005820:	080059d3 	.word	0x080059d3
 8005824:	080059d3 	.word	0x080059d3
 8005828:	0800590f 	.word	0x0800590f
 800582c:	080059d3 	.word	0x080059d3
 8005830:	080059d3 	.word	0x080059d3
 8005834:	080059d3 	.word	0x080059d3
 8005838:	08005951 	.word	0x08005951
 800583c:	080059d3 	.word	0x080059d3
 8005840:	080059d3 	.word	0x080059d3
 8005844:	080059d3 	.word	0x080059d3
 8005848:	08005991 	.word	0x08005991
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	68b9      	ldr	r1, [r7, #8]
 8005852:	4618      	mov	r0, r3
 8005854:	f000 fa34 	bl	8005cc0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	699a      	ldr	r2, [r3, #24]
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f042 0208 	orr.w	r2, r2, #8
 8005866:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	699a      	ldr	r2, [r3, #24]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f022 0204 	bic.w	r2, r2, #4
 8005876:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	6999      	ldr	r1, [r3, #24]
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	691a      	ldr	r2, [r3, #16]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	430a      	orrs	r2, r1
 8005888:	619a      	str	r2, [r3, #24]
      break;
 800588a:	e0a5      	b.n	80059d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	68b9      	ldr	r1, [r7, #8]
 8005892:	4618      	mov	r0, r3
 8005894:	f000 fa86 	bl	8005da4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	699a      	ldr	r2, [r3, #24]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	699a      	ldr	r2, [r3, #24]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	6999      	ldr	r1, [r3, #24]
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	691b      	ldr	r3, [r3, #16]
 80058c2:	021a      	lsls	r2, r3, #8
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	430a      	orrs	r2, r1
 80058ca:	619a      	str	r2, [r3, #24]
      break;
 80058cc:	e084      	b.n	80059d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	68b9      	ldr	r1, [r7, #8]
 80058d4:	4618      	mov	r0, r3
 80058d6:	f000 fadd 	bl	8005e94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	69da      	ldr	r2, [r3, #28]
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f042 0208 	orr.w	r2, r2, #8
 80058e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	69da      	ldr	r2, [r3, #28]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f022 0204 	bic.w	r2, r2, #4
 80058f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	69d9      	ldr	r1, [r3, #28]
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	691a      	ldr	r2, [r3, #16]
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	430a      	orrs	r2, r1
 800590a:	61da      	str	r2, [r3, #28]
      break;
 800590c:	e064      	b.n	80059d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	68b9      	ldr	r1, [r7, #8]
 8005914:	4618      	mov	r0, r3
 8005916:	f000 fb33 	bl	8005f80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	69da      	ldr	r2, [r3, #28]
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005928:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	69da      	ldr	r2, [r3, #28]
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005938:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	69d9      	ldr	r1, [r3, #28]
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	691b      	ldr	r3, [r3, #16]
 8005944:	021a      	lsls	r2, r3, #8
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	430a      	orrs	r2, r1
 800594c:	61da      	str	r2, [r3, #28]
      break;
 800594e:	e043      	b.n	80059d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	68b9      	ldr	r1, [r7, #8]
 8005956:	4618      	mov	r0, r3
 8005958:	f000 fb6a 	bl	8006030 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f042 0208 	orr.w	r2, r2, #8
 800596a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f022 0204 	bic.w	r2, r2, #4
 800597a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	691a      	ldr	r2, [r3, #16]
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	430a      	orrs	r2, r1
 800598c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800598e:	e023      	b.n	80059d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	68b9      	ldr	r1, [r7, #8]
 8005996:	4618      	mov	r0, r3
 8005998:	f000 fb9c 	bl	80060d4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059aa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059ba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	691b      	ldr	r3, [r3, #16]
 80059c6:	021a      	lsls	r2, r3, #8
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	430a      	orrs	r2, r1
 80059ce:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80059d0:	e002      	b.n	80059d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	75fb      	strb	r3, [r7, #23]
      break;
 80059d6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2200      	movs	r2, #0
 80059dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80059e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3718      	adds	r7, #24
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}
 80059ea:	bf00      	nop

080059ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b084      	sub	sp, #16
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80059f6:	2300      	movs	r3, #0
 80059f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d101      	bne.n	8005a08 <HAL_TIM_ConfigClockSource+0x1c>
 8005a04:	2302      	movs	r3, #2
 8005a06:	e0b4      	b.n	8005b72 <HAL_TIM_ConfigClockSource+0x186>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2202      	movs	r2, #2
 8005a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a20:	68ba      	ldr	r2, [r7, #8]
 8005a22:	4b56      	ldr	r3, [pc, #344]	; (8005b7c <HAL_TIM_ConfigClockSource+0x190>)
 8005a24:	4013      	ands	r3, r2
 8005a26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a2e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	68ba      	ldr	r2, [r7, #8]
 8005a36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a40:	d03e      	beq.n	8005ac0 <HAL_TIM_ConfigClockSource+0xd4>
 8005a42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a46:	f200 8087 	bhi.w	8005b58 <HAL_TIM_ConfigClockSource+0x16c>
 8005a4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a4e:	f000 8086 	beq.w	8005b5e <HAL_TIM_ConfigClockSource+0x172>
 8005a52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a56:	d87f      	bhi.n	8005b58 <HAL_TIM_ConfigClockSource+0x16c>
 8005a58:	2b70      	cmp	r3, #112	; 0x70
 8005a5a:	d01a      	beq.n	8005a92 <HAL_TIM_ConfigClockSource+0xa6>
 8005a5c:	2b70      	cmp	r3, #112	; 0x70
 8005a5e:	d87b      	bhi.n	8005b58 <HAL_TIM_ConfigClockSource+0x16c>
 8005a60:	2b60      	cmp	r3, #96	; 0x60
 8005a62:	d050      	beq.n	8005b06 <HAL_TIM_ConfigClockSource+0x11a>
 8005a64:	2b60      	cmp	r3, #96	; 0x60
 8005a66:	d877      	bhi.n	8005b58 <HAL_TIM_ConfigClockSource+0x16c>
 8005a68:	2b50      	cmp	r3, #80	; 0x50
 8005a6a:	d03c      	beq.n	8005ae6 <HAL_TIM_ConfigClockSource+0xfa>
 8005a6c:	2b50      	cmp	r3, #80	; 0x50
 8005a6e:	d873      	bhi.n	8005b58 <HAL_TIM_ConfigClockSource+0x16c>
 8005a70:	2b40      	cmp	r3, #64	; 0x40
 8005a72:	d058      	beq.n	8005b26 <HAL_TIM_ConfigClockSource+0x13a>
 8005a74:	2b40      	cmp	r3, #64	; 0x40
 8005a76:	d86f      	bhi.n	8005b58 <HAL_TIM_ConfigClockSource+0x16c>
 8005a78:	2b30      	cmp	r3, #48	; 0x30
 8005a7a:	d064      	beq.n	8005b46 <HAL_TIM_ConfigClockSource+0x15a>
 8005a7c:	2b30      	cmp	r3, #48	; 0x30
 8005a7e:	d86b      	bhi.n	8005b58 <HAL_TIM_ConfigClockSource+0x16c>
 8005a80:	2b20      	cmp	r3, #32
 8005a82:	d060      	beq.n	8005b46 <HAL_TIM_ConfigClockSource+0x15a>
 8005a84:	2b20      	cmp	r3, #32
 8005a86:	d867      	bhi.n	8005b58 <HAL_TIM_ConfigClockSource+0x16c>
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d05c      	beq.n	8005b46 <HAL_TIM_ConfigClockSource+0x15a>
 8005a8c:	2b10      	cmp	r3, #16
 8005a8e:	d05a      	beq.n	8005b46 <HAL_TIM_ConfigClockSource+0x15a>
 8005a90:	e062      	b.n	8005b58 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6818      	ldr	r0, [r3, #0]
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	6899      	ldr	r1, [r3, #8]
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	685a      	ldr	r2, [r3, #4]
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	68db      	ldr	r3, [r3, #12]
 8005aa2:	f000 fbe5 	bl	8006270 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005ab4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	68ba      	ldr	r2, [r7, #8]
 8005abc:	609a      	str	r2, [r3, #8]
      break;
 8005abe:	e04f      	b.n	8005b60 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6818      	ldr	r0, [r3, #0]
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	6899      	ldr	r1, [r3, #8]
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	685a      	ldr	r2, [r3, #4]
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	f000 fbce 	bl	8006270 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	689a      	ldr	r2, [r3, #8]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ae2:	609a      	str	r2, [r3, #8]
      break;
 8005ae4:	e03c      	b.n	8005b60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6818      	ldr	r0, [r3, #0]
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	6859      	ldr	r1, [r3, #4]
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	68db      	ldr	r3, [r3, #12]
 8005af2:	461a      	mov	r2, r3
 8005af4:	f000 fb42 	bl	800617c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	2150      	movs	r1, #80	; 0x50
 8005afe:	4618      	mov	r0, r3
 8005b00:	f000 fb9b 	bl	800623a <TIM_ITRx_SetConfig>
      break;
 8005b04:	e02c      	b.n	8005b60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6818      	ldr	r0, [r3, #0]
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	6859      	ldr	r1, [r3, #4]
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	68db      	ldr	r3, [r3, #12]
 8005b12:	461a      	mov	r2, r3
 8005b14:	f000 fb61 	bl	80061da <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	2160      	movs	r1, #96	; 0x60
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f000 fb8b 	bl	800623a <TIM_ITRx_SetConfig>
      break;
 8005b24:	e01c      	b.n	8005b60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6818      	ldr	r0, [r3, #0]
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	6859      	ldr	r1, [r3, #4]
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	68db      	ldr	r3, [r3, #12]
 8005b32:	461a      	mov	r2, r3
 8005b34:	f000 fb22 	bl	800617c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	2140      	movs	r1, #64	; 0x40
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f000 fb7b 	bl	800623a <TIM_ITRx_SetConfig>
      break;
 8005b44:	e00c      	b.n	8005b60 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4619      	mov	r1, r3
 8005b50:	4610      	mov	r0, r2
 8005b52:	f000 fb72 	bl	800623a <TIM_ITRx_SetConfig>
      break;
 8005b56:	e003      	b.n	8005b60 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	73fb      	strb	r3, [r7, #15]
      break;
 8005b5c:	e000      	b.n	8005b60 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005b5e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2201      	movs	r2, #1
 8005b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3710      	adds	r7, #16
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
 8005b7a:	bf00      	nop
 8005b7c:	fffeff88 	.word	0xfffeff88

08005b80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b085      	sub	sp, #20
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	4a40      	ldr	r2, [pc, #256]	; (8005c94 <TIM_Base_SetConfig+0x114>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d013      	beq.n	8005bc0 <TIM_Base_SetConfig+0x40>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b9e:	d00f      	beq.n	8005bc0 <TIM_Base_SetConfig+0x40>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	4a3d      	ldr	r2, [pc, #244]	; (8005c98 <TIM_Base_SetConfig+0x118>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d00b      	beq.n	8005bc0 <TIM_Base_SetConfig+0x40>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	4a3c      	ldr	r2, [pc, #240]	; (8005c9c <TIM_Base_SetConfig+0x11c>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d007      	beq.n	8005bc0 <TIM_Base_SetConfig+0x40>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	4a3b      	ldr	r2, [pc, #236]	; (8005ca0 <TIM_Base_SetConfig+0x120>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d003      	beq.n	8005bc0 <TIM_Base_SetConfig+0x40>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	4a3a      	ldr	r2, [pc, #232]	; (8005ca4 <TIM_Base_SetConfig+0x124>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d108      	bne.n	8005bd2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	68fa      	ldr	r2, [r7, #12]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	4a2f      	ldr	r2, [pc, #188]	; (8005c94 <TIM_Base_SetConfig+0x114>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d02b      	beq.n	8005c32 <TIM_Base_SetConfig+0xb2>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005be0:	d027      	beq.n	8005c32 <TIM_Base_SetConfig+0xb2>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	4a2c      	ldr	r2, [pc, #176]	; (8005c98 <TIM_Base_SetConfig+0x118>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d023      	beq.n	8005c32 <TIM_Base_SetConfig+0xb2>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	4a2b      	ldr	r2, [pc, #172]	; (8005c9c <TIM_Base_SetConfig+0x11c>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d01f      	beq.n	8005c32 <TIM_Base_SetConfig+0xb2>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	4a2a      	ldr	r2, [pc, #168]	; (8005ca0 <TIM_Base_SetConfig+0x120>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d01b      	beq.n	8005c32 <TIM_Base_SetConfig+0xb2>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	4a29      	ldr	r2, [pc, #164]	; (8005ca4 <TIM_Base_SetConfig+0x124>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d017      	beq.n	8005c32 <TIM_Base_SetConfig+0xb2>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	4a28      	ldr	r2, [pc, #160]	; (8005ca8 <TIM_Base_SetConfig+0x128>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d013      	beq.n	8005c32 <TIM_Base_SetConfig+0xb2>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	4a27      	ldr	r2, [pc, #156]	; (8005cac <TIM_Base_SetConfig+0x12c>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d00f      	beq.n	8005c32 <TIM_Base_SetConfig+0xb2>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	4a26      	ldr	r2, [pc, #152]	; (8005cb0 <TIM_Base_SetConfig+0x130>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d00b      	beq.n	8005c32 <TIM_Base_SetConfig+0xb2>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	4a25      	ldr	r2, [pc, #148]	; (8005cb4 <TIM_Base_SetConfig+0x134>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d007      	beq.n	8005c32 <TIM_Base_SetConfig+0xb2>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	4a24      	ldr	r2, [pc, #144]	; (8005cb8 <TIM_Base_SetConfig+0x138>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d003      	beq.n	8005c32 <TIM_Base_SetConfig+0xb2>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	4a23      	ldr	r2, [pc, #140]	; (8005cbc <TIM_Base_SetConfig+0x13c>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d108      	bne.n	8005c44 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	68db      	ldr	r3, [r3, #12]
 8005c3e:	68fa      	ldr	r2, [r7, #12]
 8005c40:	4313      	orrs	r3, r2
 8005c42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	695b      	ldr	r3, [r3, #20]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	68fa      	ldr	r2, [r7, #12]
 8005c56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	689a      	ldr	r2, [r3, #8]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	4a0a      	ldr	r2, [pc, #40]	; (8005c94 <TIM_Base_SetConfig+0x114>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d003      	beq.n	8005c78 <TIM_Base_SetConfig+0xf8>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	4a0c      	ldr	r2, [pc, #48]	; (8005ca4 <TIM_Base_SetConfig+0x124>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d103      	bne.n	8005c80 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	691a      	ldr	r2, [r3, #16]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2201      	movs	r2, #1
 8005c84:	615a      	str	r2, [r3, #20]
}
 8005c86:	bf00      	nop
 8005c88:	3714      	adds	r7, #20
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c90:	4770      	bx	lr
 8005c92:	bf00      	nop
 8005c94:	40010000 	.word	0x40010000
 8005c98:	40000400 	.word	0x40000400
 8005c9c:	40000800 	.word	0x40000800
 8005ca0:	40000c00 	.word	0x40000c00
 8005ca4:	40010400 	.word	0x40010400
 8005ca8:	40014000 	.word	0x40014000
 8005cac:	40014400 	.word	0x40014400
 8005cb0:	40014800 	.word	0x40014800
 8005cb4:	40001800 	.word	0x40001800
 8005cb8:	40001c00 	.word	0x40001c00
 8005cbc:	40002000 	.word	0x40002000

08005cc0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b087      	sub	sp, #28
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
 8005cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6a1b      	ldr	r3, [r3, #32]
 8005cce:	f023 0201 	bic.w	r2, r3, #1
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6a1b      	ldr	r3, [r3, #32]
 8005cda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	699b      	ldr	r3, [r3, #24]
 8005ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ce8:	68fa      	ldr	r2, [r7, #12]
 8005cea:	4b2b      	ldr	r3, [pc, #172]	; (8005d98 <TIM_OC1_SetConfig+0xd8>)
 8005cec:	4013      	ands	r3, r2
 8005cee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f023 0303 	bic.w	r3, r3, #3
 8005cf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	68fa      	ldr	r2, [r7, #12]
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	f023 0302 	bic.w	r3, r3, #2
 8005d08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	697a      	ldr	r2, [r7, #20]
 8005d10:	4313      	orrs	r3, r2
 8005d12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	4a21      	ldr	r2, [pc, #132]	; (8005d9c <TIM_OC1_SetConfig+0xdc>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d003      	beq.n	8005d24 <TIM_OC1_SetConfig+0x64>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	4a20      	ldr	r2, [pc, #128]	; (8005da0 <TIM_OC1_SetConfig+0xe0>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d10c      	bne.n	8005d3e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	f023 0308 	bic.w	r3, r3, #8
 8005d2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	697a      	ldr	r2, [r7, #20]
 8005d32:	4313      	orrs	r3, r2
 8005d34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	f023 0304 	bic.w	r3, r3, #4
 8005d3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	4a16      	ldr	r2, [pc, #88]	; (8005d9c <TIM_OC1_SetConfig+0xdc>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d003      	beq.n	8005d4e <TIM_OC1_SetConfig+0x8e>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4a15      	ldr	r2, [pc, #84]	; (8005da0 <TIM_OC1_SetConfig+0xe0>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d111      	bne.n	8005d72 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	695b      	ldr	r3, [r3, #20]
 8005d62:	693a      	ldr	r2, [r7, #16]
 8005d64:	4313      	orrs	r3, r2
 8005d66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	699b      	ldr	r3, [r3, #24]
 8005d6c:	693a      	ldr	r2, [r7, #16]
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	693a      	ldr	r2, [r7, #16]
 8005d76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	68fa      	ldr	r2, [r7, #12]
 8005d7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	685a      	ldr	r2, [r3, #4]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	697a      	ldr	r2, [r7, #20]
 8005d8a:	621a      	str	r2, [r3, #32]
}
 8005d8c:	bf00      	nop
 8005d8e:	371c      	adds	r7, #28
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr
 8005d98:	fffeff8f 	.word	0xfffeff8f
 8005d9c:	40010000 	.word	0x40010000
 8005da0:	40010400 	.word	0x40010400

08005da4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b087      	sub	sp, #28
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
 8005dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6a1b      	ldr	r3, [r3, #32]
 8005db2:	f023 0210 	bic.w	r2, r3, #16
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6a1b      	ldr	r3, [r3, #32]
 8005dbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	699b      	ldr	r3, [r3, #24]
 8005dca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005dcc:	68fa      	ldr	r2, [r7, #12]
 8005dce:	4b2e      	ldr	r3, [pc, #184]	; (8005e88 <TIM_OC2_SetConfig+0xe4>)
 8005dd0:	4013      	ands	r3, r2
 8005dd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	021b      	lsls	r3, r3, #8
 8005de2:	68fa      	ldr	r2, [r7, #12]
 8005de4:	4313      	orrs	r3, r2
 8005de6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	f023 0320 	bic.w	r3, r3, #32
 8005dee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	011b      	lsls	r3, r3, #4
 8005df6:	697a      	ldr	r2, [r7, #20]
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	4a23      	ldr	r2, [pc, #140]	; (8005e8c <TIM_OC2_SetConfig+0xe8>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d003      	beq.n	8005e0c <TIM_OC2_SetConfig+0x68>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	4a22      	ldr	r2, [pc, #136]	; (8005e90 <TIM_OC2_SetConfig+0xec>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d10d      	bne.n	8005e28 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	011b      	lsls	r3, r3, #4
 8005e1a:	697a      	ldr	r2, [r7, #20]
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e26:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	4a18      	ldr	r2, [pc, #96]	; (8005e8c <TIM_OC2_SetConfig+0xe8>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d003      	beq.n	8005e38 <TIM_OC2_SetConfig+0x94>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	4a17      	ldr	r2, [pc, #92]	; (8005e90 <TIM_OC2_SetConfig+0xec>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d113      	bne.n	8005e60 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e3e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e46:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	695b      	ldr	r3, [r3, #20]
 8005e4c:	009b      	lsls	r3, r3, #2
 8005e4e:	693a      	ldr	r2, [r7, #16]
 8005e50:	4313      	orrs	r3, r2
 8005e52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	699b      	ldr	r3, [r3, #24]
 8005e58:	009b      	lsls	r3, r3, #2
 8005e5a:	693a      	ldr	r2, [r7, #16]
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	693a      	ldr	r2, [r7, #16]
 8005e64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	68fa      	ldr	r2, [r7, #12]
 8005e6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	685a      	ldr	r2, [r3, #4]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	697a      	ldr	r2, [r7, #20]
 8005e78:	621a      	str	r2, [r3, #32]
}
 8005e7a:	bf00      	nop
 8005e7c:	371c      	adds	r7, #28
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr
 8005e86:	bf00      	nop
 8005e88:	feff8fff 	.word	0xfeff8fff
 8005e8c:	40010000 	.word	0x40010000
 8005e90:	40010400 	.word	0x40010400

08005e94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b087      	sub	sp, #28
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6a1b      	ldr	r3, [r3, #32]
 8005ea2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6a1b      	ldr	r3, [r3, #32]
 8005eae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	69db      	ldr	r3, [r3, #28]
 8005eba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005ebc:	68fa      	ldr	r2, [r7, #12]
 8005ebe:	4b2d      	ldr	r3, [pc, #180]	; (8005f74 <TIM_OC3_SetConfig+0xe0>)
 8005ec0:	4013      	ands	r3, r2
 8005ec2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f023 0303 	bic.w	r3, r3, #3
 8005eca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	68fa      	ldr	r2, [r7, #12]
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005edc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	021b      	lsls	r3, r3, #8
 8005ee4:	697a      	ldr	r2, [r7, #20]
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	4a22      	ldr	r2, [pc, #136]	; (8005f78 <TIM_OC3_SetConfig+0xe4>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d003      	beq.n	8005efa <TIM_OC3_SetConfig+0x66>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	4a21      	ldr	r2, [pc, #132]	; (8005f7c <TIM_OC3_SetConfig+0xe8>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d10d      	bne.n	8005f16 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	68db      	ldr	r3, [r3, #12]
 8005f06:	021b      	lsls	r3, r3, #8
 8005f08:	697a      	ldr	r2, [r7, #20]
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	4a17      	ldr	r2, [pc, #92]	; (8005f78 <TIM_OC3_SetConfig+0xe4>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d003      	beq.n	8005f26 <TIM_OC3_SetConfig+0x92>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	4a16      	ldr	r2, [pc, #88]	; (8005f7c <TIM_OC3_SetConfig+0xe8>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d113      	bne.n	8005f4e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	695b      	ldr	r3, [r3, #20]
 8005f3a:	011b      	lsls	r3, r3, #4
 8005f3c:	693a      	ldr	r2, [r7, #16]
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	699b      	ldr	r3, [r3, #24]
 8005f46:	011b      	lsls	r3, r3, #4
 8005f48:	693a      	ldr	r2, [r7, #16]
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	693a      	ldr	r2, [r7, #16]
 8005f52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	68fa      	ldr	r2, [r7, #12]
 8005f58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	685a      	ldr	r2, [r3, #4]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	697a      	ldr	r2, [r7, #20]
 8005f66:	621a      	str	r2, [r3, #32]
}
 8005f68:	bf00      	nop
 8005f6a:	371c      	adds	r7, #28
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr
 8005f74:	fffeff8f 	.word	0xfffeff8f
 8005f78:	40010000 	.word	0x40010000
 8005f7c:	40010400 	.word	0x40010400

08005f80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b087      	sub	sp, #28
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6a1b      	ldr	r3, [r3, #32]
 8005f8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6a1b      	ldr	r3, [r3, #32]
 8005f9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	69db      	ldr	r3, [r3, #28]
 8005fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005fa8:	68fa      	ldr	r2, [r7, #12]
 8005faa:	4b1e      	ldr	r3, [pc, #120]	; (8006024 <TIM_OC4_SetConfig+0xa4>)
 8005fac:	4013      	ands	r3, r2
 8005fae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	021b      	lsls	r3, r3, #8
 8005fbe:	68fa      	ldr	r2, [r7, #12]
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005fca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	031b      	lsls	r3, r3, #12
 8005fd2:	693a      	ldr	r2, [r7, #16]
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	4a13      	ldr	r2, [pc, #76]	; (8006028 <TIM_OC4_SetConfig+0xa8>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d003      	beq.n	8005fe8 <TIM_OC4_SetConfig+0x68>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	4a12      	ldr	r2, [pc, #72]	; (800602c <TIM_OC4_SetConfig+0xac>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d109      	bne.n	8005ffc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005fee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	695b      	ldr	r3, [r3, #20]
 8005ff4:	019b      	lsls	r3, r3, #6
 8005ff6:	697a      	ldr	r2, [r7, #20]
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	697a      	ldr	r2, [r7, #20]
 8006000:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	68fa      	ldr	r2, [r7, #12]
 8006006:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	685a      	ldr	r2, [r3, #4]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	693a      	ldr	r2, [r7, #16]
 8006014:	621a      	str	r2, [r3, #32]
}
 8006016:	bf00      	nop
 8006018:	371c      	adds	r7, #28
 800601a:	46bd      	mov	sp, r7
 800601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006020:	4770      	bx	lr
 8006022:	bf00      	nop
 8006024:	feff8fff 	.word	0xfeff8fff
 8006028:	40010000 	.word	0x40010000
 800602c:	40010400 	.word	0x40010400

08006030 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006030:	b480      	push	{r7}
 8006032:	b087      	sub	sp, #28
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6a1b      	ldr	r3, [r3, #32]
 800603e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6a1b      	ldr	r3, [r3, #32]
 800604a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006058:	68fa      	ldr	r2, [r7, #12]
 800605a:	4b1b      	ldr	r3, [pc, #108]	; (80060c8 <TIM_OC5_SetConfig+0x98>)
 800605c:	4013      	ands	r3, r2
 800605e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	68fa      	ldr	r2, [r7, #12]
 8006066:	4313      	orrs	r3, r2
 8006068:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006070:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	689b      	ldr	r3, [r3, #8]
 8006076:	041b      	lsls	r3, r3, #16
 8006078:	693a      	ldr	r2, [r7, #16]
 800607a:	4313      	orrs	r3, r2
 800607c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	4a12      	ldr	r2, [pc, #72]	; (80060cc <TIM_OC5_SetConfig+0x9c>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d003      	beq.n	800608e <TIM_OC5_SetConfig+0x5e>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	4a11      	ldr	r2, [pc, #68]	; (80060d0 <TIM_OC5_SetConfig+0xa0>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d109      	bne.n	80060a2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006094:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	695b      	ldr	r3, [r3, #20]
 800609a:	021b      	lsls	r3, r3, #8
 800609c:	697a      	ldr	r2, [r7, #20]
 800609e:	4313      	orrs	r3, r2
 80060a0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	697a      	ldr	r2, [r7, #20]
 80060a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	68fa      	ldr	r2, [r7, #12]
 80060ac:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	685a      	ldr	r2, [r3, #4]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	693a      	ldr	r2, [r7, #16]
 80060ba:	621a      	str	r2, [r3, #32]
}
 80060bc:	bf00      	nop
 80060be:	371c      	adds	r7, #28
 80060c0:	46bd      	mov	sp, r7
 80060c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c6:	4770      	bx	lr
 80060c8:	fffeff8f 	.word	0xfffeff8f
 80060cc:	40010000 	.word	0x40010000
 80060d0:	40010400 	.word	0x40010400

080060d4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b087      	sub	sp, #28
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6a1b      	ldr	r3, [r3, #32]
 80060e2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6a1b      	ldr	r3, [r3, #32]
 80060ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80060fc:	68fa      	ldr	r2, [r7, #12]
 80060fe:	4b1c      	ldr	r3, [pc, #112]	; (8006170 <TIM_OC6_SetConfig+0x9c>)
 8006100:	4013      	ands	r3, r2
 8006102:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	021b      	lsls	r3, r3, #8
 800610a:	68fa      	ldr	r2, [r7, #12]
 800610c:	4313      	orrs	r3, r2
 800610e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006116:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	051b      	lsls	r3, r3, #20
 800611e:	693a      	ldr	r2, [r7, #16]
 8006120:	4313      	orrs	r3, r2
 8006122:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	4a13      	ldr	r2, [pc, #76]	; (8006174 <TIM_OC6_SetConfig+0xa0>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d003      	beq.n	8006134 <TIM_OC6_SetConfig+0x60>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	4a12      	ldr	r2, [pc, #72]	; (8006178 <TIM_OC6_SetConfig+0xa4>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d109      	bne.n	8006148 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800613a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	695b      	ldr	r3, [r3, #20]
 8006140:	029b      	lsls	r3, r3, #10
 8006142:	697a      	ldr	r2, [r7, #20]
 8006144:	4313      	orrs	r3, r2
 8006146:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	697a      	ldr	r2, [r7, #20]
 800614c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	68fa      	ldr	r2, [r7, #12]
 8006152:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	685a      	ldr	r2, [r3, #4]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	693a      	ldr	r2, [r7, #16]
 8006160:	621a      	str	r2, [r3, #32]
}
 8006162:	bf00      	nop
 8006164:	371c      	adds	r7, #28
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr
 800616e:	bf00      	nop
 8006170:	feff8fff 	.word	0xfeff8fff
 8006174:	40010000 	.word	0x40010000
 8006178:	40010400 	.word	0x40010400

0800617c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800617c:	b480      	push	{r7}
 800617e:	b087      	sub	sp, #28
 8006180:	af00      	add	r7, sp, #0
 8006182:	60f8      	str	r0, [r7, #12]
 8006184:	60b9      	str	r1, [r7, #8]
 8006186:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	6a1b      	ldr	r3, [r3, #32]
 800618c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	6a1b      	ldr	r3, [r3, #32]
 8006192:	f023 0201 	bic.w	r2, r3, #1
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	699b      	ldr	r3, [r3, #24]
 800619e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	011b      	lsls	r3, r3, #4
 80061ac:	693a      	ldr	r2, [r7, #16]
 80061ae:	4313      	orrs	r3, r2
 80061b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	f023 030a 	bic.w	r3, r3, #10
 80061b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80061ba:	697a      	ldr	r2, [r7, #20]
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	4313      	orrs	r3, r2
 80061c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	693a      	ldr	r2, [r7, #16]
 80061c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	697a      	ldr	r2, [r7, #20]
 80061cc:	621a      	str	r2, [r3, #32]
}
 80061ce:	bf00      	nop
 80061d0:	371c      	adds	r7, #28
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr

080061da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061da:	b480      	push	{r7}
 80061dc:	b087      	sub	sp, #28
 80061de:	af00      	add	r7, sp, #0
 80061e0:	60f8      	str	r0, [r7, #12]
 80061e2:	60b9      	str	r1, [r7, #8]
 80061e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	6a1b      	ldr	r3, [r3, #32]
 80061ea:	f023 0210 	bic.w	r2, r3, #16
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	699b      	ldr	r3, [r3, #24]
 80061f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	6a1b      	ldr	r3, [r3, #32]
 80061fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006204:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	031b      	lsls	r3, r3, #12
 800620a:	697a      	ldr	r2, [r7, #20]
 800620c:	4313      	orrs	r3, r2
 800620e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006216:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	011b      	lsls	r3, r3, #4
 800621c:	693a      	ldr	r2, [r7, #16]
 800621e:	4313      	orrs	r3, r2
 8006220:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	697a      	ldr	r2, [r7, #20]
 8006226:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	693a      	ldr	r2, [r7, #16]
 800622c:	621a      	str	r2, [r3, #32]
}
 800622e:	bf00      	nop
 8006230:	371c      	adds	r7, #28
 8006232:	46bd      	mov	sp, r7
 8006234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006238:	4770      	bx	lr

0800623a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800623a:	b480      	push	{r7}
 800623c:	b085      	sub	sp, #20
 800623e:	af00      	add	r7, sp, #0
 8006240:	6078      	str	r0, [r7, #4]
 8006242:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006250:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006252:	683a      	ldr	r2, [r7, #0]
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	4313      	orrs	r3, r2
 8006258:	f043 0307 	orr.w	r3, r3, #7
 800625c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	68fa      	ldr	r2, [r7, #12]
 8006262:	609a      	str	r2, [r3, #8]
}
 8006264:	bf00      	nop
 8006266:	3714      	adds	r7, #20
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr

08006270 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006270:	b480      	push	{r7}
 8006272:	b087      	sub	sp, #28
 8006274:	af00      	add	r7, sp, #0
 8006276:	60f8      	str	r0, [r7, #12]
 8006278:	60b9      	str	r1, [r7, #8]
 800627a:	607a      	str	r2, [r7, #4]
 800627c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800628a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	021a      	lsls	r2, r3, #8
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	431a      	orrs	r2, r3
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	4313      	orrs	r3, r2
 8006298:	697a      	ldr	r2, [r7, #20]
 800629a:	4313      	orrs	r3, r2
 800629c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	697a      	ldr	r2, [r7, #20]
 80062a2:	609a      	str	r2, [r3, #8]
}
 80062a4:	bf00      	nop
 80062a6:	371c      	adds	r7, #28
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr

080062b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b087      	sub	sp, #28
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	60f8      	str	r0, [r7, #12]
 80062b8:	60b9      	str	r1, [r7, #8]
 80062ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	f003 031f 	and.w	r3, r3, #31
 80062c2:	2201      	movs	r2, #1
 80062c4:	fa02 f303 	lsl.w	r3, r2, r3
 80062c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	6a1a      	ldr	r2, [r3, #32]
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	43db      	mvns	r3, r3
 80062d2:	401a      	ands	r2, r3
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	6a1a      	ldr	r2, [r3, #32]
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	f003 031f 	and.w	r3, r3, #31
 80062e2:	6879      	ldr	r1, [r7, #4]
 80062e4:	fa01 f303 	lsl.w	r3, r1, r3
 80062e8:	431a      	orrs	r2, r3
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	621a      	str	r2, [r3, #32]
}
 80062ee:	bf00      	nop
 80062f0:	371c      	adds	r7, #28
 80062f2:	46bd      	mov	sp, r7
 80062f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f8:	4770      	bx	lr
	...

080062fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b085      	sub	sp, #20
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
 8006304:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800630c:	2b01      	cmp	r3, #1
 800630e:	d101      	bne.n	8006314 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006310:	2302      	movs	r3, #2
 8006312:	e06d      	b.n	80063f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2201      	movs	r2, #1
 8006318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2202      	movs	r2, #2
 8006320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a30      	ldr	r2, [pc, #192]	; (80063fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d004      	beq.n	8006348 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a2f      	ldr	r2, [pc, #188]	; (8006400 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d108      	bne.n	800635a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800634e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	68fa      	ldr	r2, [r7, #12]
 8006356:	4313      	orrs	r3, r2
 8006358:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006360:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	68fa      	ldr	r2, [r7, #12]
 8006368:	4313      	orrs	r3, r2
 800636a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	68fa      	ldr	r2, [r7, #12]
 8006372:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a20      	ldr	r2, [pc, #128]	; (80063fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d022      	beq.n	80063c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006386:	d01d      	beq.n	80063c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a1d      	ldr	r2, [pc, #116]	; (8006404 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d018      	beq.n	80063c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a1c      	ldr	r2, [pc, #112]	; (8006408 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d013      	beq.n	80063c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a1a      	ldr	r2, [pc, #104]	; (800640c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d00e      	beq.n	80063c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a15      	ldr	r2, [pc, #84]	; (8006400 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d009      	beq.n	80063c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a16      	ldr	r2, [pc, #88]	; (8006410 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d004      	beq.n	80063c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a15      	ldr	r2, [pc, #84]	; (8006414 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d10c      	bne.n	80063de <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063ca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	68ba      	ldr	r2, [r7, #8]
 80063d2:	4313      	orrs	r3, r2
 80063d4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	68ba      	ldr	r2, [r7, #8]
 80063dc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2201      	movs	r2, #1
 80063e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2200      	movs	r2, #0
 80063ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063ee:	2300      	movs	r3, #0
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3714      	adds	r7, #20
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr
 80063fc:	40010000 	.word	0x40010000
 8006400:	40010400 	.word	0x40010400
 8006404:	40000400 	.word	0x40000400
 8006408:	40000800 	.word	0x40000800
 800640c:	40000c00 	.word	0x40000c00
 8006410:	40014000 	.word	0x40014000
 8006414:	40001800 	.word	0x40001800

08006418 <__errno>:
 8006418:	4b01      	ldr	r3, [pc, #4]	; (8006420 <__errno+0x8>)
 800641a:	6818      	ldr	r0, [r3, #0]
 800641c:	4770      	bx	lr
 800641e:	bf00      	nop
 8006420:	20000010 	.word	0x20000010

08006424 <__libc_init_array>:
 8006424:	b570      	push	{r4, r5, r6, lr}
 8006426:	4d0d      	ldr	r5, [pc, #52]	; (800645c <__libc_init_array+0x38>)
 8006428:	4c0d      	ldr	r4, [pc, #52]	; (8006460 <__libc_init_array+0x3c>)
 800642a:	1b64      	subs	r4, r4, r5
 800642c:	10a4      	asrs	r4, r4, #2
 800642e:	2600      	movs	r6, #0
 8006430:	42a6      	cmp	r6, r4
 8006432:	d109      	bne.n	8006448 <__libc_init_array+0x24>
 8006434:	4d0b      	ldr	r5, [pc, #44]	; (8006464 <__libc_init_array+0x40>)
 8006436:	4c0c      	ldr	r4, [pc, #48]	; (8006468 <__libc_init_array+0x44>)
 8006438:	f000 fc8e 	bl	8006d58 <_init>
 800643c:	1b64      	subs	r4, r4, r5
 800643e:	10a4      	asrs	r4, r4, #2
 8006440:	2600      	movs	r6, #0
 8006442:	42a6      	cmp	r6, r4
 8006444:	d105      	bne.n	8006452 <__libc_init_array+0x2e>
 8006446:	bd70      	pop	{r4, r5, r6, pc}
 8006448:	f855 3b04 	ldr.w	r3, [r5], #4
 800644c:	4798      	blx	r3
 800644e:	3601      	adds	r6, #1
 8006450:	e7ee      	b.n	8006430 <__libc_init_array+0xc>
 8006452:	f855 3b04 	ldr.w	r3, [r5], #4
 8006456:	4798      	blx	r3
 8006458:	3601      	adds	r6, #1
 800645a:	e7f2      	b.n	8006442 <__libc_init_array+0x1e>
 800645c:	08007158 	.word	0x08007158
 8006460:	08007158 	.word	0x08007158
 8006464:	08007158 	.word	0x08007158
 8006468:	0800715c 	.word	0x0800715c

0800646c <memset>:
 800646c:	4402      	add	r2, r0
 800646e:	4603      	mov	r3, r0
 8006470:	4293      	cmp	r3, r2
 8006472:	d100      	bne.n	8006476 <memset+0xa>
 8006474:	4770      	bx	lr
 8006476:	f803 1b01 	strb.w	r1, [r3], #1
 800647a:	e7f9      	b.n	8006470 <memset+0x4>

0800647c <siprintf>:
 800647c:	b40e      	push	{r1, r2, r3}
 800647e:	b500      	push	{lr}
 8006480:	b09c      	sub	sp, #112	; 0x70
 8006482:	ab1d      	add	r3, sp, #116	; 0x74
 8006484:	9002      	str	r0, [sp, #8]
 8006486:	9006      	str	r0, [sp, #24]
 8006488:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800648c:	4809      	ldr	r0, [pc, #36]	; (80064b4 <siprintf+0x38>)
 800648e:	9107      	str	r1, [sp, #28]
 8006490:	9104      	str	r1, [sp, #16]
 8006492:	4909      	ldr	r1, [pc, #36]	; (80064b8 <siprintf+0x3c>)
 8006494:	f853 2b04 	ldr.w	r2, [r3], #4
 8006498:	9105      	str	r1, [sp, #20]
 800649a:	6800      	ldr	r0, [r0, #0]
 800649c:	9301      	str	r3, [sp, #4]
 800649e:	a902      	add	r1, sp, #8
 80064a0:	f000 f868 	bl	8006574 <_svfiprintf_r>
 80064a4:	9b02      	ldr	r3, [sp, #8]
 80064a6:	2200      	movs	r2, #0
 80064a8:	701a      	strb	r2, [r3, #0]
 80064aa:	b01c      	add	sp, #112	; 0x70
 80064ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80064b0:	b003      	add	sp, #12
 80064b2:	4770      	bx	lr
 80064b4:	20000010 	.word	0x20000010
 80064b8:	ffff0208 	.word	0xffff0208

080064bc <__ssputs_r>:
 80064bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064c0:	688e      	ldr	r6, [r1, #8]
 80064c2:	429e      	cmp	r6, r3
 80064c4:	4682      	mov	sl, r0
 80064c6:	460c      	mov	r4, r1
 80064c8:	4690      	mov	r8, r2
 80064ca:	461f      	mov	r7, r3
 80064cc:	d838      	bhi.n	8006540 <__ssputs_r+0x84>
 80064ce:	898a      	ldrh	r2, [r1, #12]
 80064d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80064d4:	d032      	beq.n	800653c <__ssputs_r+0x80>
 80064d6:	6825      	ldr	r5, [r4, #0]
 80064d8:	6909      	ldr	r1, [r1, #16]
 80064da:	eba5 0901 	sub.w	r9, r5, r1
 80064de:	6965      	ldr	r5, [r4, #20]
 80064e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80064e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80064e8:	3301      	adds	r3, #1
 80064ea:	444b      	add	r3, r9
 80064ec:	106d      	asrs	r5, r5, #1
 80064ee:	429d      	cmp	r5, r3
 80064f0:	bf38      	it	cc
 80064f2:	461d      	movcc	r5, r3
 80064f4:	0553      	lsls	r3, r2, #21
 80064f6:	d531      	bpl.n	800655c <__ssputs_r+0xa0>
 80064f8:	4629      	mov	r1, r5
 80064fa:	f000 fb63 	bl	8006bc4 <_malloc_r>
 80064fe:	4606      	mov	r6, r0
 8006500:	b950      	cbnz	r0, 8006518 <__ssputs_r+0x5c>
 8006502:	230c      	movs	r3, #12
 8006504:	f8ca 3000 	str.w	r3, [sl]
 8006508:	89a3      	ldrh	r3, [r4, #12]
 800650a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800650e:	81a3      	strh	r3, [r4, #12]
 8006510:	f04f 30ff 	mov.w	r0, #4294967295
 8006514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006518:	6921      	ldr	r1, [r4, #16]
 800651a:	464a      	mov	r2, r9
 800651c:	f000 fabe 	bl	8006a9c <memcpy>
 8006520:	89a3      	ldrh	r3, [r4, #12]
 8006522:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006526:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800652a:	81a3      	strh	r3, [r4, #12]
 800652c:	6126      	str	r6, [r4, #16]
 800652e:	6165      	str	r5, [r4, #20]
 8006530:	444e      	add	r6, r9
 8006532:	eba5 0509 	sub.w	r5, r5, r9
 8006536:	6026      	str	r6, [r4, #0]
 8006538:	60a5      	str	r5, [r4, #8]
 800653a:	463e      	mov	r6, r7
 800653c:	42be      	cmp	r6, r7
 800653e:	d900      	bls.n	8006542 <__ssputs_r+0x86>
 8006540:	463e      	mov	r6, r7
 8006542:	6820      	ldr	r0, [r4, #0]
 8006544:	4632      	mov	r2, r6
 8006546:	4641      	mov	r1, r8
 8006548:	f000 fab6 	bl	8006ab8 <memmove>
 800654c:	68a3      	ldr	r3, [r4, #8]
 800654e:	1b9b      	subs	r3, r3, r6
 8006550:	60a3      	str	r3, [r4, #8]
 8006552:	6823      	ldr	r3, [r4, #0]
 8006554:	4433      	add	r3, r6
 8006556:	6023      	str	r3, [r4, #0]
 8006558:	2000      	movs	r0, #0
 800655a:	e7db      	b.n	8006514 <__ssputs_r+0x58>
 800655c:	462a      	mov	r2, r5
 800655e:	f000 fba5 	bl	8006cac <_realloc_r>
 8006562:	4606      	mov	r6, r0
 8006564:	2800      	cmp	r0, #0
 8006566:	d1e1      	bne.n	800652c <__ssputs_r+0x70>
 8006568:	6921      	ldr	r1, [r4, #16]
 800656a:	4650      	mov	r0, sl
 800656c:	f000 fabe 	bl	8006aec <_free_r>
 8006570:	e7c7      	b.n	8006502 <__ssputs_r+0x46>
	...

08006574 <_svfiprintf_r>:
 8006574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006578:	4698      	mov	r8, r3
 800657a:	898b      	ldrh	r3, [r1, #12]
 800657c:	061b      	lsls	r3, r3, #24
 800657e:	b09d      	sub	sp, #116	; 0x74
 8006580:	4607      	mov	r7, r0
 8006582:	460d      	mov	r5, r1
 8006584:	4614      	mov	r4, r2
 8006586:	d50e      	bpl.n	80065a6 <_svfiprintf_r+0x32>
 8006588:	690b      	ldr	r3, [r1, #16]
 800658a:	b963      	cbnz	r3, 80065a6 <_svfiprintf_r+0x32>
 800658c:	2140      	movs	r1, #64	; 0x40
 800658e:	f000 fb19 	bl	8006bc4 <_malloc_r>
 8006592:	6028      	str	r0, [r5, #0]
 8006594:	6128      	str	r0, [r5, #16]
 8006596:	b920      	cbnz	r0, 80065a2 <_svfiprintf_r+0x2e>
 8006598:	230c      	movs	r3, #12
 800659a:	603b      	str	r3, [r7, #0]
 800659c:	f04f 30ff 	mov.w	r0, #4294967295
 80065a0:	e0d1      	b.n	8006746 <_svfiprintf_r+0x1d2>
 80065a2:	2340      	movs	r3, #64	; 0x40
 80065a4:	616b      	str	r3, [r5, #20]
 80065a6:	2300      	movs	r3, #0
 80065a8:	9309      	str	r3, [sp, #36]	; 0x24
 80065aa:	2320      	movs	r3, #32
 80065ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80065b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80065b4:	2330      	movs	r3, #48	; 0x30
 80065b6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006760 <_svfiprintf_r+0x1ec>
 80065ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80065be:	f04f 0901 	mov.w	r9, #1
 80065c2:	4623      	mov	r3, r4
 80065c4:	469a      	mov	sl, r3
 80065c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80065ca:	b10a      	cbz	r2, 80065d0 <_svfiprintf_r+0x5c>
 80065cc:	2a25      	cmp	r2, #37	; 0x25
 80065ce:	d1f9      	bne.n	80065c4 <_svfiprintf_r+0x50>
 80065d0:	ebba 0b04 	subs.w	fp, sl, r4
 80065d4:	d00b      	beq.n	80065ee <_svfiprintf_r+0x7a>
 80065d6:	465b      	mov	r3, fp
 80065d8:	4622      	mov	r2, r4
 80065da:	4629      	mov	r1, r5
 80065dc:	4638      	mov	r0, r7
 80065de:	f7ff ff6d 	bl	80064bc <__ssputs_r>
 80065e2:	3001      	adds	r0, #1
 80065e4:	f000 80aa 	beq.w	800673c <_svfiprintf_r+0x1c8>
 80065e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80065ea:	445a      	add	r2, fp
 80065ec:	9209      	str	r2, [sp, #36]	; 0x24
 80065ee:	f89a 3000 	ldrb.w	r3, [sl]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	f000 80a2 	beq.w	800673c <_svfiprintf_r+0x1c8>
 80065f8:	2300      	movs	r3, #0
 80065fa:	f04f 32ff 	mov.w	r2, #4294967295
 80065fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006602:	f10a 0a01 	add.w	sl, sl, #1
 8006606:	9304      	str	r3, [sp, #16]
 8006608:	9307      	str	r3, [sp, #28]
 800660a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800660e:	931a      	str	r3, [sp, #104]	; 0x68
 8006610:	4654      	mov	r4, sl
 8006612:	2205      	movs	r2, #5
 8006614:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006618:	4851      	ldr	r0, [pc, #324]	; (8006760 <_svfiprintf_r+0x1ec>)
 800661a:	f7f9 fe11 	bl	8000240 <memchr>
 800661e:	9a04      	ldr	r2, [sp, #16]
 8006620:	b9d8      	cbnz	r0, 800665a <_svfiprintf_r+0xe6>
 8006622:	06d0      	lsls	r0, r2, #27
 8006624:	bf44      	itt	mi
 8006626:	2320      	movmi	r3, #32
 8006628:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800662c:	0711      	lsls	r1, r2, #28
 800662e:	bf44      	itt	mi
 8006630:	232b      	movmi	r3, #43	; 0x2b
 8006632:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006636:	f89a 3000 	ldrb.w	r3, [sl]
 800663a:	2b2a      	cmp	r3, #42	; 0x2a
 800663c:	d015      	beq.n	800666a <_svfiprintf_r+0xf6>
 800663e:	9a07      	ldr	r2, [sp, #28]
 8006640:	4654      	mov	r4, sl
 8006642:	2000      	movs	r0, #0
 8006644:	f04f 0c0a 	mov.w	ip, #10
 8006648:	4621      	mov	r1, r4
 800664a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800664e:	3b30      	subs	r3, #48	; 0x30
 8006650:	2b09      	cmp	r3, #9
 8006652:	d94e      	bls.n	80066f2 <_svfiprintf_r+0x17e>
 8006654:	b1b0      	cbz	r0, 8006684 <_svfiprintf_r+0x110>
 8006656:	9207      	str	r2, [sp, #28]
 8006658:	e014      	b.n	8006684 <_svfiprintf_r+0x110>
 800665a:	eba0 0308 	sub.w	r3, r0, r8
 800665e:	fa09 f303 	lsl.w	r3, r9, r3
 8006662:	4313      	orrs	r3, r2
 8006664:	9304      	str	r3, [sp, #16]
 8006666:	46a2      	mov	sl, r4
 8006668:	e7d2      	b.n	8006610 <_svfiprintf_r+0x9c>
 800666a:	9b03      	ldr	r3, [sp, #12]
 800666c:	1d19      	adds	r1, r3, #4
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	9103      	str	r1, [sp, #12]
 8006672:	2b00      	cmp	r3, #0
 8006674:	bfbb      	ittet	lt
 8006676:	425b      	neglt	r3, r3
 8006678:	f042 0202 	orrlt.w	r2, r2, #2
 800667c:	9307      	strge	r3, [sp, #28]
 800667e:	9307      	strlt	r3, [sp, #28]
 8006680:	bfb8      	it	lt
 8006682:	9204      	strlt	r2, [sp, #16]
 8006684:	7823      	ldrb	r3, [r4, #0]
 8006686:	2b2e      	cmp	r3, #46	; 0x2e
 8006688:	d10c      	bne.n	80066a4 <_svfiprintf_r+0x130>
 800668a:	7863      	ldrb	r3, [r4, #1]
 800668c:	2b2a      	cmp	r3, #42	; 0x2a
 800668e:	d135      	bne.n	80066fc <_svfiprintf_r+0x188>
 8006690:	9b03      	ldr	r3, [sp, #12]
 8006692:	1d1a      	adds	r2, r3, #4
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	9203      	str	r2, [sp, #12]
 8006698:	2b00      	cmp	r3, #0
 800669a:	bfb8      	it	lt
 800669c:	f04f 33ff 	movlt.w	r3, #4294967295
 80066a0:	3402      	adds	r4, #2
 80066a2:	9305      	str	r3, [sp, #20]
 80066a4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006770 <_svfiprintf_r+0x1fc>
 80066a8:	7821      	ldrb	r1, [r4, #0]
 80066aa:	2203      	movs	r2, #3
 80066ac:	4650      	mov	r0, sl
 80066ae:	f7f9 fdc7 	bl	8000240 <memchr>
 80066b2:	b140      	cbz	r0, 80066c6 <_svfiprintf_r+0x152>
 80066b4:	2340      	movs	r3, #64	; 0x40
 80066b6:	eba0 000a 	sub.w	r0, r0, sl
 80066ba:	fa03 f000 	lsl.w	r0, r3, r0
 80066be:	9b04      	ldr	r3, [sp, #16]
 80066c0:	4303      	orrs	r3, r0
 80066c2:	3401      	adds	r4, #1
 80066c4:	9304      	str	r3, [sp, #16]
 80066c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066ca:	4826      	ldr	r0, [pc, #152]	; (8006764 <_svfiprintf_r+0x1f0>)
 80066cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80066d0:	2206      	movs	r2, #6
 80066d2:	f7f9 fdb5 	bl	8000240 <memchr>
 80066d6:	2800      	cmp	r0, #0
 80066d8:	d038      	beq.n	800674c <_svfiprintf_r+0x1d8>
 80066da:	4b23      	ldr	r3, [pc, #140]	; (8006768 <_svfiprintf_r+0x1f4>)
 80066dc:	bb1b      	cbnz	r3, 8006726 <_svfiprintf_r+0x1b2>
 80066de:	9b03      	ldr	r3, [sp, #12]
 80066e0:	3307      	adds	r3, #7
 80066e2:	f023 0307 	bic.w	r3, r3, #7
 80066e6:	3308      	adds	r3, #8
 80066e8:	9303      	str	r3, [sp, #12]
 80066ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066ec:	4433      	add	r3, r6
 80066ee:	9309      	str	r3, [sp, #36]	; 0x24
 80066f0:	e767      	b.n	80065c2 <_svfiprintf_r+0x4e>
 80066f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80066f6:	460c      	mov	r4, r1
 80066f8:	2001      	movs	r0, #1
 80066fa:	e7a5      	b.n	8006648 <_svfiprintf_r+0xd4>
 80066fc:	2300      	movs	r3, #0
 80066fe:	3401      	adds	r4, #1
 8006700:	9305      	str	r3, [sp, #20]
 8006702:	4619      	mov	r1, r3
 8006704:	f04f 0c0a 	mov.w	ip, #10
 8006708:	4620      	mov	r0, r4
 800670a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800670e:	3a30      	subs	r2, #48	; 0x30
 8006710:	2a09      	cmp	r2, #9
 8006712:	d903      	bls.n	800671c <_svfiprintf_r+0x1a8>
 8006714:	2b00      	cmp	r3, #0
 8006716:	d0c5      	beq.n	80066a4 <_svfiprintf_r+0x130>
 8006718:	9105      	str	r1, [sp, #20]
 800671a:	e7c3      	b.n	80066a4 <_svfiprintf_r+0x130>
 800671c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006720:	4604      	mov	r4, r0
 8006722:	2301      	movs	r3, #1
 8006724:	e7f0      	b.n	8006708 <_svfiprintf_r+0x194>
 8006726:	ab03      	add	r3, sp, #12
 8006728:	9300      	str	r3, [sp, #0]
 800672a:	462a      	mov	r2, r5
 800672c:	4b0f      	ldr	r3, [pc, #60]	; (800676c <_svfiprintf_r+0x1f8>)
 800672e:	a904      	add	r1, sp, #16
 8006730:	4638      	mov	r0, r7
 8006732:	f3af 8000 	nop.w
 8006736:	1c42      	adds	r2, r0, #1
 8006738:	4606      	mov	r6, r0
 800673a:	d1d6      	bne.n	80066ea <_svfiprintf_r+0x176>
 800673c:	89ab      	ldrh	r3, [r5, #12]
 800673e:	065b      	lsls	r3, r3, #25
 8006740:	f53f af2c 	bmi.w	800659c <_svfiprintf_r+0x28>
 8006744:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006746:	b01d      	add	sp, #116	; 0x74
 8006748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800674c:	ab03      	add	r3, sp, #12
 800674e:	9300      	str	r3, [sp, #0]
 8006750:	462a      	mov	r2, r5
 8006752:	4b06      	ldr	r3, [pc, #24]	; (800676c <_svfiprintf_r+0x1f8>)
 8006754:	a904      	add	r1, sp, #16
 8006756:	4638      	mov	r0, r7
 8006758:	f000 f87a 	bl	8006850 <_printf_i>
 800675c:	e7eb      	b.n	8006736 <_svfiprintf_r+0x1c2>
 800675e:	bf00      	nop
 8006760:	0800711c 	.word	0x0800711c
 8006764:	08007126 	.word	0x08007126
 8006768:	00000000 	.word	0x00000000
 800676c:	080064bd 	.word	0x080064bd
 8006770:	08007122 	.word	0x08007122

08006774 <_printf_common>:
 8006774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006778:	4616      	mov	r6, r2
 800677a:	4699      	mov	r9, r3
 800677c:	688a      	ldr	r2, [r1, #8]
 800677e:	690b      	ldr	r3, [r1, #16]
 8006780:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006784:	4293      	cmp	r3, r2
 8006786:	bfb8      	it	lt
 8006788:	4613      	movlt	r3, r2
 800678a:	6033      	str	r3, [r6, #0]
 800678c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006790:	4607      	mov	r7, r0
 8006792:	460c      	mov	r4, r1
 8006794:	b10a      	cbz	r2, 800679a <_printf_common+0x26>
 8006796:	3301      	adds	r3, #1
 8006798:	6033      	str	r3, [r6, #0]
 800679a:	6823      	ldr	r3, [r4, #0]
 800679c:	0699      	lsls	r1, r3, #26
 800679e:	bf42      	ittt	mi
 80067a0:	6833      	ldrmi	r3, [r6, #0]
 80067a2:	3302      	addmi	r3, #2
 80067a4:	6033      	strmi	r3, [r6, #0]
 80067a6:	6825      	ldr	r5, [r4, #0]
 80067a8:	f015 0506 	ands.w	r5, r5, #6
 80067ac:	d106      	bne.n	80067bc <_printf_common+0x48>
 80067ae:	f104 0a19 	add.w	sl, r4, #25
 80067b2:	68e3      	ldr	r3, [r4, #12]
 80067b4:	6832      	ldr	r2, [r6, #0]
 80067b6:	1a9b      	subs	r3, r3, r2
 80067b8:	42ab      	cmp	r3, r5
 80067ba:	dc26      	bgt.n	800680a <_printf_common+0x96>
 80067bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80067c0:	1e13      	subs	r3, r2, #0
 80067c2:	6822      	ldr	r2, [r4, #0]
 80067c4:	bf18      	it	ne
 80067c6:	2301      	movne	r3, #1
 80067c8:	0692      	lsls	r2, r2, #26
 80067ca:	d42b      	bmi.n	8006824 <_printf_common+0xb0>
 80067cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80067d0:	4649      	mov	r1, r9
 80067d2:	4638      	mov	r0, r7
 80067d4:	47c0      	blx	r8
 80067d6:	3001      	adds	r0, #1
 80067d8:	d01e      	beq.n	8006818 <_printf_common+0xa4>
 80067da:	6823      	ldr	r3, [r4, #0]
 80067dc:	68e5      	ldr	r5, [r4, #12]
 80067de:	6832      	ldr	r2, [r6, #0]
 80067e0:	f003 0306 	and.w	r3, r3, #6
 80067e4:	2b04      	cmp	r3, #4
 80067e6:	bf08      	it	eq
 80067e8:	1aad      	subeq	r5, r5, r2
 80067ea:	68a3      	ldr	r3, [r4, #8]
 80067ec:	6922      	ldr	r2, [r4, #16]
 80067ee:	bf0c      	ite	eq
 80067f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80067f4:	2500      	movne	r5, #0
 80067f6:	4293      	cmp	r3, r2
 80067f8:	bfc4      	itt	gt
 80067fa:	1a9b      	subgt	r3, r3, r2
 80067fc:	18ed      	addgt	r5, r5, r3
 80067fe:	2600      	movs	r6, #0
 8006800:	341a      	adds	r4, #26
 8006802:	42b5      	cmp	r5, r6
 8006804:	d11a      	bne.n	800683c <_printf_common+0xc8>
 8006806:	2000      	movs	r0, #0
 8006808:	e008      	b.n	800681c <_printf_common+0xa8>
 800680a:	2301      	movs	r3, #1
 800680c:	4652      	mov	r2, sl
 800680e:	4649      	mov	r1, r9
 8006810:	4638      	mov	r0, r7
 8006812:	47c0      	blx	r8
 8006814:	3001      	adds	r0, #1
 8006816:	d103      	bne.n	8006820 <_printf_common+0xac>
 8006818:	f04f 30ff 	mov.w	r0, #4294967295
 800681c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006820:	3501      	adds	r5, #1
 8006822:	e7c6      	b.n	80067b2 <_printf_common+0x3e>
 8006824:	18e1      	adds	r1, r4, r3
 8006826:	1c5a      	adds	r2, r3, #1
 8006828:	2030      	movs	r0, #48	; 0x30
 800682a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800682e:	4422      	add	r2, r4
 8006830:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006834:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006838:	3302      	adds	r3, #2
 800683a:	e7c7      	b.n	80067cc <_printf_common+0x58>
 800683c:	2301      	movs	r3, #1
 800683e:	4622      	mov	r2, r4
 8006840:	4649      	mov	r1, r9
 8006842:	4638      	mov	r0, r7
 8006844:	47c0      	blx	r8
 8006846:	3001      	adds	r0, #1
 8006848:	d0e6      	beq.n	8006818 <_printf_common+0xa4>
 800684a:	3601      	adds	r6, #1
 800684c:	e7d9      	b.n	8006802 <_printf_common+0x8e>
	...

08006850 <_printf_i>:
 8006850:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006854:	7e0f      	ldrb	r7, [r1, #24]
 8006856:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006858:	2f78      	cmp	r7, #120	; 0x78
 800685a:	4691      	mov	r9, r2
 800685c:	4680      	mov	r8, r0
 800685e:	460c      	mov	r4, r1
 8006860:	469a      	mov	sl, r3
 8006862:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006866:	d807      	bhi.n	8006878 <_printf_i+0x28>
 8006868:	2f62      	cmp	r7, #98	; 0x62
 800686a:	d80a      	bhi.n	8006882 <_printf_i+0x32>
 800686c:	2f00      	cmp	r7, #0
 800686e:	f000 80d8 	beq.w	8006a22 <_printf_i+0x1d2>
 8006872:	2f58      	cmp	r7, #88	; 0x58
 8006874:	f000 80a3 	beq.w	80069be <_printf_i+0x16e>
 8006878:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800687c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006880:	e03a      	b.n	80068f8 <_printf_i+0xa8>
 8006882:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006886:	2b15      	cmp	r3, #21
 8006888:	d8f6      	bhi.n	8006878 <_printf_i+0x28>
 800688a:	a101      	add	r1, pc, #4	; (adr r1, 8006890 <_printf_i+0x40>)
 800688c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006890:	080068e9 	.word	0x080068e9
 8006894:	080068fd 	.word	0x080068fd
 8006898:	08006879 	.word	0x08006879
 800689c:	08006879 	.word	0x08006879
 80068a0:	08006879 	.word	0x08006879
 80068a4:	08006879 	.word	0x08006879
 80068a8:	080068fd 	.word	0x080068fd
 80068ac:	08006879 	.word	0x08006879
 80068b0:	08006879 	.word	0x08006879
 80068b4:	08006879 	.word	0x08006879
 80068b8:	08006879 	.word	0x08006879
 80068bc:	08006a09 	.word	0x08006a09
 80068c0:	0800692d 	.word	0x0800692d
 80068c4:	080069eb 	.word	0x080069eb
 80068c8:	08006879 	.word	0x08006879
 80068cc:	08006879 	.word	0x08006879
 80068d0:	08006a2b 	.word	0x08006a2b
 80068d4:	08006879 	.word	0x08006879
 80068d8:	0800692d 	.word	0x0800692d
 80068dc:	08006879 	.word	0x08006879
 80068e0:	08006879 	.word	0x08006879
 80068e4:	080069f3 	.word	0x080069f3
 80068e8:	682b      	ldr	r3, [r5, #0]
 80068ea:	1d1a      	adds	r2, r3, #4
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	602a      	str	r2, [r5, #0]
 80068f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80068f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80068f8:	2301      	movs	r3, #1
 80068fa:	e0a3      	b.n	8006a44 <_printf_i+0x1f4>
 80068fc:	6820      	ldr	r0, [r4, #0]
 80068fe:	6829      	ldr	r1, [r5, #0]
 8006900:	0606      	lsls	r6, r0, #24
 8006902:	f101 0304 	add.w	r3, r1, #4
 8006906:	d50a      	bpl.n	800691e <_printf_i+0xce>
 8006908:	680e      	ldr	r6, [r1, #0]
 800690a:	602b      	str	r3, [r5, #0]
 800690c:	2e00      	cmp	r6, #0
 800690e:	da03      	bge.n	8006918 <_printf_i+0xc8>
 8006910:	232d      	movs	r3, #45	; 0x2d
 8006912:	4276      	negs	r6, r6
 8006914:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006918:	485e      	ldr	r0, [pc, #376]	; (8006a94 <_printf_i+0x244>)
 800691a:	230a      	movs	r3, #10
 800691c:	e019      	b.n	8006952 <_printf_i+0x102>
 800691e:	680e      	ldr	r6, [r1, #0]
 8006920:	602b      	str	r3, [r5, #0]
 8006922:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006926:	bf18      	it	ne
 8006928:	b236      	sxthne	r6, r6
 800692a:	e7ef      	b.n	800690c <_printf_i+0xbc>
 800692c:	682b      	ldr	r3, [r5, #0]
 800692e:	6820      	ldr	r0, [r4, #0]
 8006930:	1d19      	adds	r1, r3, #4
 8006932:	6029      	str	r1, [r5, #0]
 8006934:	0601      	lsls	r1, r0, #24
 8006936:	d501      	bpl.n	800693c <_printf_i+0xec>
 8006938:	681e      	ldr	r6, [r3, #0]
 800693a:	e002      	b.n	8006942 <_printf_i+0xf2>
 800693c:	0646      	lsls	r6, r0, #25
 800693e:	d5fb      	bpl.n	8006938 <_printf_i+0xe8>
 8006940:	881e      	ldrh	r6, [r3, #0]
 8006942:	4854      	ldr	r0, [pc, #336]	; (8006a94 <_printf_i+0x244>)
 8006944:	2f6f      	cmp	r7, #111	; 0x6f
 8006946:	bf0c      	ite	eq
 8006948:	2308      	moveq	r3, #8
 800694a:	230a      	movne	r3, #10
 800694c:	2100      	movs	r1, #0
 800694e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006952:	6865      	ldr	r5, [r4, #4]
 8006954:	60a5      	str	r5, [r4, #8]
 8006956:	2d00      	cmp	r5, #0
 8006958:	bfa2      	ittt	ge
 800695a:	6821      	ldrge	r1, [r4, #0]
 800695c:	f021 0104 	bicge.w	r1, r1, #4
 8006960:	6021      	strge	r1, [r4, #0]
 8006962:	b90e      	cbnz	r6, 8006968 <_printf_i+0x118>
 8006964:	2d00      	cmp	r5, #0
 8006966:	d04d      	beq.n	8006a04 <_printf_i+0x1b4>
 8006968:	4615      	mov	r5, r2
 800696a:	fbb6 f1f3 	udiv	r1, r6, r3
 800696e:	fb03 6711 	mls	r7, r3, r1, r6
 8006972:	5dc7      	ldrb	r7, [r0, r7]
 8006974:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006978:	4637      	mov	r7, r6
 800697a:	42bb      	cmp	r3, r7
 800697c:	460e      	mov	r6, r1
 800697e:	d9f4      	bls.n	800696a <_printf_i+0x11a>
 8006980:	2b08      	cmp	r3, #8
 8006982:	d10b      	bne.n	800699c <_printf_i+0x14c>
 8006984:	6823      	ldr	r3, [r4, #0]
 8006986:	07de      	lsls	r6, r3, #31
 8006988:	d508      	bpl.n	800699c <_printf_i+0x14c>
 800698a:	6923      	ldr	r3, [r4, #16]
 800698c:	6861      	ldr	r1, [r4, #4]
 800698e:	4299      	cmp	r1, r3
 8006990:	bfde      	ittt	le
 8006992:	2330      	movle	r3, #48	; 0x30
 8006994:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006998:	f105 35ff 	addle.w	r5, r5, #4294967295
 800699c:	1b52      	subs	r2, r2, r5
 800699e:	6122      	str	r2, [r4, #16]
 80069a0:	f8cd a000 	str.w	sl, [sp]
 80069a4:	464b      	mov	r3, r9
 80069a6:	aa03      	add	r2, sp, #12
 80069a8:	4621      	mov	r1, r4
 80069aa:	4640      	mov	r0, r8
 80069ac:	f7ff fee2 	bl	8006774 <_printf_common>
 80069b0:	3001      	adds	r0, #1
 80069b2:	d14c      	bne.n	8006a4e <_printf_i+0x1fe>
 80069b4:	f04f 30ff 	mov.w	r0, #4294967295
 80069b8:	b004      	add	sp, #16
 80069ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069be:	4835      	ldr	r0, [pc, #212]	; (8006a94 <_printf_i+0x244>)
 80069c0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80069c4:	6829      	ldr	r1, [r5, #0]
 80069c6:	6823      	ldr	r3, [r4, #0]
 80069c8:	f851 6b04 	ldr.w	r6, [r1], #4
 80069cc:	6029      	str	r1, [r5, #0]
 80069ce:	061d      	lsls	r5, r3, #24
 80069d0:	d514      	bpl.n	80069fc <_printf_i+0x1ac>
 80069d2:	07df      	lsls	r7, r3, #31
 80069d4:	bf44      	itt	mi
 80069d6:	f043 0320 	orrmi.w	r3, r3, #32
 80069da:	6023      	strmi	r3, [r4, #0]
 80069dc:	b91e      	cbnz	r6, 80069e6 <_printf_i+0x196>
 80069de:	6823      	ldr	r3, [r4, #0]
 80069e0:	f023 0320 	bic.w	r3, r3, #32
 80069e4:	6023      	str	r3, [r4, #0]
 80069e6:	2310      	movs	r3, #16
 80069e8:	e7b0      	b.n	800694c <_printf_i+0xfc>
 80069ea:	6823      	ldr	r3, [r4, #0]
 80069ec:	f043 0320 	orr.w	r3, r3, #32
 80069f0:	6023      	str	r3, [r4, #0]
 80069f2:	2378      	movs	r3, #120	; 0x78
 80069f4:	4828      	ldr	r0, [pc, #160]	; (8006a98 <_printf_i+0x248>)
 80069f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80069fa:	e7e3      	b.n	80069c4 <_printf_i+0x174>
 80069fc:	0659      	lsls	r1, r3, #25
 80069fe:	bf48      	it	mi
 8006a00:	b2b6      	uxthmi	r6, r6
 8006a02:	e7e6      	b.n	80069d2 <_printf_i+0x182>
 8006a04:	4615      	mov	r5, r2
 8006a06:	e7bb      	b.n	8006980 <_printf_i+0x130>
 8006a08:	682b      	ldr	r3, [r5, #0]
 8006a0a:	6826      	ldr	r6, [r4, #0]
 8006a0c:	6961      	ldr	r1, [r4, #20]
 8006a0e:	1d18      	adds	r0, r3, #4
 8006a10:	6028      	str	r0, [r5, #0]
 8006a12:	0635      	lsls	r5, r6, #24
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	d501      	bpl.n	8006a1c <_printf_i+0x1cc>
 8006a18:	6019      	str	r1, [r3, #0]
 8006a1a:	e002      	b.n	8006a22 <_printf_i+0x1d2>
 8006a1c:	0670      	lsls	r0, r6, #25
 8006a1e:	d5fb      	bpl.n	8006a18 <_printf_i+0x1c8>
 8006a20:	8019      	strh	r1, [r3, #0]
 8006a22:	2300      	movs	r3, #0
 8006a24:	6123      	str	r3, [r4, #16]
 8006a26:	4615      	mov	r5, r2
 8006a28:	e7ba      	b.n	80069a0 <_printf_i+0x150>
 8006a2a:	682b      	ldr	r3, [r5, #0]
 8006a2c:	1d1a      	adds	r2, r3, #4
 8006a2e:	602a      	str	r2, [r5, #0]
 8006a30:	681d      	ldr	r5, [r3, #0]
 8006a32:	6862      	ldr	r2, [r4, #4]
 8006a34:	2100      	movs	r1, #0
 8006a36:	4628      	mov	r0, r5
 8006a38:	f7f9 fc02 	bl	8000240 <memchr>
 8006a3c:	b108      	cbz	r0, 8006a42 <_printf_i+0x1f2>
 8006a3e:	1b40      	subs	r0, r0, r5
 8006a40:	6060      	str	r0, [r4, #4]
 8006a42:	6863      	ldr	r3, [r4, #4]
 8006a44:	6123      	str	r3, [r4, #16]
 8006a46:	2300      	movs	r3, #0
 8006a48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a4c:	e7a8      	b.n	80069a0 <_printf_i+0x150>
 8006a4e:	6923      	ldr	r3, [r4, #16]
 8006a50:	462a      	mov	r2, r5
 8006a52:	4649      	mov	r1, r9
 8006a54:	4640      	mov	r0, r8
 8006a56:	47d0      	blx	sl
 8006a58:	3001      	adds	r0, #1
 8006a5a:	d0ab      	beq.n	80069b4 <_printf_i+0x164>
 8006a5c:	6823      	ldr	r3, [r4, #0]
 8006a5e:	079b      	lsls	r3, r3, #30
 8006a60:	d413      	bmi.n	8006a8a <_printf_i+0x23a>
 8006a62:	68e0      	ldr	r0, [r4, #12]
 8006a64:	9b03      	ldr	r3, [sp, #12]
 8006a66:	4298      	cmp	r0, r3
 8006a68:	bfb8      	it	lt
 8006a6a:	4618      	movlt	r0, r3
 8006a6c:	e7a4      	b.n	80069b8 <_printf_i+0x168>
 8006a6e:	2301      	movs	r3, #1
 8006a70:	4632      	mov	r2, r6
 8006a72:	4649      	mov	r1, r9
 8006a74:	4640      	mov	r0, r8
 8006a76:	47d0      	blx	sl
 8006a78:	3001      	adds	r0, #1
 8006a7a:	d09b      	beq.n	80069b4 <_printf_i+0x164>
 8006a7c:	3501      	adds	r5, #1
 8006a7e:	68e3      	ldr	r3, [r4, #12]
 8006a80:	9903      	ldr	r1, [sp, #12]
 8006a82:	1a5b      	subs	r3, r3, r1
 8006a84:	42ab      	cmp	r3, r5
 8006a86:	dcf2      	bgt.n	8006a6e <_printf_i+0x21e>
 8006a88:	e7eb      	b.n	8006a62 <_printf_i+0x212>
 8006a8a:	2500      	movs	r5, #0
 8006a8c:	f104 0619 	add.w	r6, r4, #25
 8006a90:	e7f5      	b.n	8006a7e <_printf_i+0x22e>
 8006a92:	bf00      	nop
 8006a94:	0800712d 	.word	0x0800712d
 8006a98:	0800713e 	.word	0x0800713e

08006a9c <memcpy>:
 8006a9c:	440a      	add	r2, r1
 8006a9e:	4291      	cmp	r1, r2
 8006aa0:	f100 33ff 	add.w	r3, r0, #4294967295
 8006aa4:	d100      	bne.n	8006aa8 <memcpy+0xc>
 8006aa6:	4770      	bx	lr
 8006aa8:	b510      	push	{r4, lr}
 8006aaa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006aae:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ab2:	4291      	cmp	r1, r2
 8006ab4:	d1f9      	bne.n	8006aaa <memcpy+0xe>
 8006ab6:	bd10      	pop	{r4, pc}

08006ab8 <memmove>:
 8006ab8:	4288      	cmp	r0, r1
 8006aba:	b510      	push	{r4, lr}
 8006abc:	eb01 0402 	add.w	r4, r1, r2
 8006ac0:	d902      	bls.n	8006ac8 <memmove+0x10>
 8006ac2:	4284      	cmp	r4, r0
 8006ac4:	4623      	mov	r3, r4
 8006ac6:	d807      	bhi.n	8006ad8 <memmove+0x20>
 8006ac8:	1e43      	subs	r3, r0, #1
 8006aca:	42a1      	cmp	r1, r4
 8006acc:	d008      	beq.n	8006ae0 <memmove+0x28>
 8006ace:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006ad2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006ad6:	e7f8      	b.n	8006aca <memmove+0x12>
 8006ad8:	4402      	add	r2, r0
 8006ada:	4601      	mov	r1, r0
 8006adc:	428a      	cmp	r2, r1
 8006ade:	d100      	bne.n	8006ae2 <memmove+0x2a>
 8006ae0:	bd10      	pop	{r4, pc}
 8006ae2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006ae6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006aea:	e7f7      	b.n	8006adc <memmove+0x24>

08006aec <_free_r>:
 8006aec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006aee:	2900      	cmp	r1, #0
 8006af0:	d044      	beq.n	8006b7c <_free_r+0x90>
 8006af2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006af6:	9001      	str	r0, [sp, #4]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	f1a1 0404 	sub.w	r4, r1, #4
 8006afe:	bfb8      	it	lt
 8006b00:	18e4      	addlt	r4, r4, r3
 8006b02:	f000 f913 	bl	8006d2c <__malloc_lock>
 8006b06:	4a1e      	ldr	r2, [pc, #120]	; (8006b80 <_free_r+0x94>)
 8006b08:	9801      	ldr	r0, [sp, #4]
 8006b0a:	6813      	ldr	r3, [r2, #0]
 8006b0c:	b933      	cbnz	r3, 8006b1c <_free_r+0x30>
 8006b0e:	6063      	str	r3, [r4, #4]
 8006b10:	6014      	str	r4, [r2, #0]
 8006b12:	b003      	add	sp, #12
 8006b14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006b18:	f000 b90e 	b.w	8006d38 <__malloc_unlock>
 8006b1c:	42a3      	cmp	r3, r4
 8006b1e:	d908      	bls.n	8006b32 <_free_r+0x46>
 8006b20:	6825      	ldr	r5, [r4, #0]
 8006b22:	1961      	adds	r1, r4, r5
 8006b24:	428b      	cmp	r3, r1
 8006b26:	bf01      	itttt	eq
 8006b28:	6819      	ldreq	r1, [r3, #0]
 8006b2a:	685b      	ldreq	r3, [r3, #4]
 8006b2c:	1949      	addeq	r1, r1, r5
 8006b2e:	6021      	streq	r1, [r4, #0]
 8006b30:	e7ed      	b.n	8006b0e <_free_r+0x22>
 8006b32:	461a      	mov	r2, r3
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	b10b      	cbz	r3, 8006b3c <_free_r+0x50>
 8006b38:	42a3      	cmp	r3, r4
 8006b3a:	d9fa      	bls.n	8006b32 <_free_r+0x46>
 8006b3c:	6811      	ldr	r1, [r2, #0]
 8006b3e:	1855      	adds	r5, r2, r1
 8006b40:	42a5      	cmp	r5, r4
 8006b42:	d10b      	bne.n	8006b5c <_free_r+0x70>
 8006b44:	6824      	ldr	r4, [r4, #0]
 8006b46:	4421      	add	r1, r4
 8006b48:	1854      	adds	r4, r2, r1
 8006b4a:	42a3      	cmp	r3, r4
 8006b4c:	6011      	str	r1, [r2, #0]
 8006b4e:	d1e0      	bne.n	8006b12 <_free_r+0x26>
 8006b50:	681c      	ldr	r4, [r3, #0]
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	6053      	str	r3, [r2, #4]
 8006b56:	4421      	add	r1, r4
 8006b58:	6011      	str	r1, [r2, #0]
 8006b5a:	e7da      	b.n	8006b12 <_free_r+0x26>
 8006b5c:	d902      	bls.n	8006b64 <_free_r+0x78>
 8006b5e:	230c      	movs	r3, #12
 8006b60:	6003      	str	r3, [r0, #0]
 8006b62:	e7d6      	b.n	8006b12 <_free_r+0x26>
 8006b64:	6825      	ldr	r5, [r4, #0]
 8006b66:	1961      	adds	r1, r4, r5
 8006b68:	428b      	cmp	r3, r1
 8006b6a:	bf04      	itt	eq
 8006b6c:	6819      	ldreq	r1, [r3, #0]
 8006b6e:	685b      	ldreq	r3, [r3, #4]
 8006b70:	6063      	str	r3, [r4, #4]
 8006b72:	bf04      	itt	eq
 8006b74:	1949      	addeq	r1, r1, r5
 8006b76:	6021      	streq	r1, [r4, #0]
 8006b78:	6054      	str	r4, [r2, #4]
 8006b7a:	e7ca      	b.n	8006b12 <_free_r+0x26>
 8006b7c:	b003      	add	sp, #12
 8006b7e:	bd30      	pop	{r4, r5, pc}
 8006b80:	200001f0 	.word	0x200001f0

08006b84 <sbrk_aligned>:
 8006b84:	b570      	push	{r4, r5, r6, lr}
 8006b86:	4e0e      	ldr	r6, [pc, #56]	; (8006bc0 <sbrk_aligned+0x3c>)
 8006b88:	460c      	mov	r4, r1
 8006b8a:	6831      	ldr	r1, [r6, #0]
 8006b8c:	4605      	mov	r5, r0
 8006b8e:	b911      	cbnz	r1, 8006b96 <sbrk_aligned+0x12>
 8006b90:	f000 f8bc 	bl	8006d0c <_sbrk_r>
 8006b94:	6030      	str	r0, [r6, #0]
 8006b96:	4621      	mov	r1, r4
 8006b98:	4628      	mov	r0, r5
 8006b9a:	f000 f8b7 	bl	8006d0c <_sbrk_r>
 8006b9e:	1c43      	adds	r3, r0, #1
 8006ba0:	d00a      	beq.n	8006bb8 <sbrk_aligned+0x34>
 8006ba2:	1cc4      	adds	r4, r0, #3
 8006ba4:	f024 0403 	bic.w	r4, r4, #3
 8006ba8:	42a0      	cmp	r0, r4
 8006baa:	d007      	beq.n	8006bbc <sbrk_aligned+0x38>
 8006bac:	1a21      	subs	r1, r4, r0
 8006bae:	4628      	mov	r0, r5
 8006bb0:	f000 f8ac 	bl	8006d0c <_sbrk_r>
 8006bb4:	3001      	adds	r0, #1
 8006bb6:	d101      	bne.n	8006bbc <sbrk_aligned+0x38>
 8006bb8:	f04f 34ff 	mov.w	r4, #4294967295
 8006bbc:	4620      	mov	r0, r4
 8006bbe:	bd70      	pop	{r4, r5, r6, pc}
 8006bc0:	200001f4 	.word	0x200001f4

08006bc4 <_malloc_r>:
 8006bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bc8:	1ccd      	adds	r5, r1, #3
 8006bca:	f025 0503 	bic.w	r5, r5, #3
 8006bce:	3508      	adds	r5, #8
 8006bd0:	2d0c      	cmp	r5, #12
 8006bd2:	bf38      	it	cc
 8006bd4:	250c      	movcc	r5, #12
 8006bd6:	2d00      	cmp	r5, #0
 8006bd8:	4607      	mov	r7, r0
 8006bda:	db01      	blt.n	8006be0 <_malloc_r+0x1c>
 8006bdc:	42a9      	cmp	r1, r5
 8006bde:	d905      	bls.n	8006bec <_malloc_r+0x28>
 8006be0:	230c      	movs	r3, #12
 8006be2:	603b      	str	r3, [r7, #0]
 8006be4:	2600      	movs	r6, #0
 8006be6:	4630      	mov	r0, r6
 8006be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bec:	4e2e      	ldr	r6, [pc, #184]	; (8006ca8 <_malloc_r+0xe4>)
 8006bee:	f000 f89d 	bl	8006d2c <__malloc_lock>
 8006bf2:	6833      	ldr	r3, [r6, #0]
 8006bf4:	461c      	mov	r4, r3
 8006bf6:	bb34      	cbnz	r4, 8006c46 <_malloc_r+0x82>
 8006bf8:	4629      	mov	r1, r5
 8006bfa:	4638      	mov	r0, r7
 8006bfc:	f7ff ffc2 	bl	8006b84 <sbrk_aligned>
 8006c00:	1c43      	adds	r3, r0, #1
 8006c02:	4604      	mov	r4, r0
 8006c04:	d14d      	bne.n	8006ca2 <_malloc_r+0xde>
 8006c06:	6834      	ldr	r4, [r6, #0]
 8006c08:	4626      	mov	r6, r4
 8006c0a:	2e00      	cmp	r6, #0
 8006c0c:	d140      	bne.n	8006c90 <_malloc_r+0xcc>
 8006c0e:	6823      	ldr	r3, [r4, #0]
 8006c10:	4631      	mov	r1, r6
 8006c12:	4638      	mov	r0, r7
 8006c14:	eb04 0803 	add.w	r8, r4, r3
 8006c18:	f000 f878 	bl	8006d0c <_sbrk_r>
 8006c1c:	4580      	cmp	r8, r0
 8006c1e:	d13a      	bne.n	8006c96 <_malloc_r+0xd2>
 8006c20:	6821      	ldr	r1, [r4, #0]
 8006c22:	3503      	adds	r5, #3
 8006c24:	1a6d      	subs	r5, r5, r1
 8006c26:	f025 0503 	bic.w	r5, r5, #3
 8006c2a:	3508      	adds	r5, #8
 8006c2c:	2d0c      	cmp	r5, #12
 8006c2e:	bf38      	it	cc
 8006c30:	250c      	movcc	r5, #12
 8006c32:	4629      	mov	r1, r5
 8006c34:	4638      	mov	r0, r7
 8006c36:	f7ff ffa5 	bl	8006b84 <sbrk_aligned>
 8006c3a:	3001      	adds	r0, #1
 8006c3c:	d02b      	beq.n	8006c96 <_malloc_r+0xd2>
 8006c3e:	6823      	ldr	r3, [r4, #0]
 8006c40:	442b      	add	r3, r5
 8006c42:	6023      	str	r3, [r4, #0]
 8006c44:	e00e      	b.n	8006c64 <_malloc_r+0xa0>
 8006c46:	6822      	ldr	r2, [r4, #0]
 8006c48:	1b52      	subs	r2, r2, r5
 8006c4a:	d41e      	bmi.n	8006c8a <_malloc_r+0xc6>
 8006c4c:	2a0b      	cmp	r2, #11
 8006c4e:	d916      	bls.n	8006c7e <_malloc_r+0xba>
 8006c50:	1961      	adds	r1, r4, r5
 8006c52:	42a3      	cmp	r3, r4
 8006c54:	6025      	str	r5, [r4, #0]
 8006c56:	bf18      	it	ne
 8006c58:	6059      	strne	r1, [r3, #4]
 8006c5a:	6863      	ldr	r3, [r4, #4]
 8006c5c:	bf08      	it	eq
 8006c5e:	6031      	streq	r1, [r6, #0]
 8006c60:	5162      	str	r2, [r4, r5]
 8006c62:	604b      	str	r3, [r1, #4]
 8006c64:	4638      	mov	r0, r7
 8006c66:	f104 060b 	add.w	r6, r4, #11
 8006c6a:	f000 f865 	bl	8006d38 <__malloc_unlock>
 8006c6e:	f026 0607 	bic.w	r6, r6, #7
 8006c72:	1d23      	adds	r3, r4, #4
 8006c74:	1af2      	subs	r2, r6, r3
 8006c76:	d0b6      	beq.n	8006be6 <_malloc_r+0x22>
 8006c78:	1b9b      	subs	r3, r3, r6
 8006c7a:	50a3      	str	r3, [r4, r2]
 8006c7c:	e7b3      	b.n	8006be6 <_malloc_r+0x22>
 8006c7e:	6862      	ldr	r2, [r4, #4]
 8006c80:	42a3      	cmp	r3, r4
 8006c82:	bf0c      	ite	eq
 8006c84:	6032      	streq	r2, [r6, #0]
 8006c86:	605a      	strne	r2, [r3, #4]
 8006c88:	e7ec      	b.n	8006c64 <_malloc_r+0xa0>
 8006c8a:	4623      	mov	r3, r4
 8006c8c:	6864      	ldr	r4, [r4, #4]
 8006c8e:	e7b2      	b.n	8006bf6 <_malloc_r+0x32>
 8006c90:	4634      	mov	r4, r6
 8006c92:	6876      	ldr	r6, [r6, #4]
 8006c94:	e7b9      	b.n	8006c0a <_malloc_r+0x46>
 8006c96:	230c      	movs	r3, #12
 8006c98:	603b      	str	r3, [r7, #0]
 8006c9a:	4638      	mov	r0, r7
 8006c9c:	f000 f84c 	bl	8006d38 <__malloc_unlock>
 8006ca0:	e7a1      	b.n	8006be6 <_malloc_r+0x22>
 8006ca2:	6025      	str	r5, [r4, #0]
 8006ca4:	e7de      	b.n	8006c64 <_malloc_r+0xa0>
 8006ca6:	bf00      	nop
 8006ca8:	200001f0 	.word	0x200001f0

08006cac <_realloc_r>:
 8006cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cb0:	4680      	mov	r8, r0
 8006cb2:	4614      	mov	r4, r2
 8006cb4:	460e      	mov	r6, r1
 8006cb6:	b921      	cbnz	r1, 8006cc2 <_realloc_r+0x16>
 8006cb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006cbc:	4611      	mov	r1, r2
 8006cbe:	f7ff bf81 	b.w	8006bc4 <_malloc_r>
 8006cc2:	b92a      	cbnz	r2, 8006cd0 <_realloc_r+0x24>
 8006cc4:	f7ff ff12 	bl	8006aec <_free_r>
 8006cc8:	4625      	mov	r5, r4
 8006cca:	4628      	mov	r0, r5
 8006ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cd0:	f000 f838 	bl	8006d44 <_malloc_usable_size_r>
 8006cd4:	4284      	cmp	r4, r0
 8006cd6:	4607      	mov	r7, r0
 8006cd8:	d802      	bhi.n	8006ce0 <_realloc_r+0x34>
 8006cda:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006cde:	d812      	bhi.n	8006d06 <_realloc_r+0x5a>
 8006ce0:	4621      	mov	r1, r4
 8006ce2:	4640      	mov	r0, r8
 8006ce4:	f7ff ff6e 	bl	8006bc4 <_malloc_r>
 8006ce8:	4605      	mov	r5, r0
 8006cea:	2800      	cmp	r0, #0
 8006cec:	d0ed      	beq.n	8006cca <_realloc_r+0x1e>
 8006cee:	42bc      	cmp	r4, r7
 8006cf0:	4622      	mov	r2, r4
 8006cf2:	4631      	mov	r1, r6
 8006cf4:	bf28      	it	cs
 8006cf6:	463a      	movcs	r2, r7
 8006cf8:	f7ff fed0 	bl	8006a9c <memcpy>
 8006cfc:	4631      	mov	r1, r6
 8006cfe:	4640      	mov	r0, r8
 8006d00:	f7ff fef4 	bl	8006aec <_free_r>
 8006d04:	e7e1      	b.n	8006cca <_realloc_r+0x1e>
 8006d06:	4635      	mov	r5, r6
 8006d08:	e7df      	b.n	8006cca <_realloc_r+0x1e>
	...

08006d0c <_sbrk_r>:
 8006d0c:	b538      	push	{r3, r4, r5, lr}
 8006d0e:	4d06      	ldr	r5, [pc, #24]	; (8006d28 <_sbrk_r+0x1c>)
 8006d10:	2300      	movs	r3, #0
 8006d12:	4604      	mov	r4, r0
 8006d14:	4608      	mov	r0, r1
 8006d16:	602b      	str	r3, [r5, #0]
 8006d18:	f7fc f8d2 	bl	8002ec0 <_sbrk>
 8006d1c:	1c43      	adds	r3, r0, #1
 8006d1e:	d102      	bne.n	8006d26 <_sbrk_r+0x1a>
 8006d20:	682b      	ldr	r3, [r5, #0]
 8006d22:	b103      	cbz	r3, 8006d26 <_sbrk_r+0x1a>
 8006d24:	6023      	str	r3, [r4, #0]
 8006d26:	bd38      	pop	{r3, r4, r5, pc}
 8006d28:	200001f8 	.word	0x200001f8

08006d2c <__malloc_lock>:
 8006d2c:	4801      	ldr	r0, [pc, #4]	; (8006d34 <__malloc_lock+0x8>)
 8006d2e:	f000 b811 	b.w	8006d54 <__retarget_lock_acquire_recursive>
 8006d32:	bf00      	nop
 8006d34:	200001fc 	.word	0x200001fc

08006d38 <__malloc_unlock>:
 8006d38:	4801      	ldr	r0, [pc, #4]	; (8006d40 <__malloc_unlock+0x8>)
 8006d3a:	f000 b80c 	b.w	8006d56 <__retarget_lock_release_recursive>
 8006d3e:	bf00      	nop
 8006d40:	200001fc 	.word	0x200001fc

08006d44 <_malloc_usable_size_r>:
 8006d44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d48:	1f18      	subs	r0, r3, #4
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	bfbc      	itt	lt
 8006d4e:	580b      	ldrlt	r3, [r1, r0]
 8006d50:	18c0      	addlt	r0, r0, r3
 8006d52:	4770      	bx	lr

08006d54 <__retarget_lock_acquire_recursive>:
 8006d54:	4770      	bx	lr

08006d56 <__retarget_lock_release_recursive>:
 8006d56:	4770      	bx	lr

08006d58 <_init>:
 8006d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d5a:	bf00      	nop
 8006d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d5e:	bc08      	pop	{r3}
 8006d60:	469e      	mov	lr, r3
 8006d62:	4770      	bx	lr

08006d64 <_fini>:
 8006d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d66:	bf00      	nop
 8006d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d6a:	bc08      	pop	{r3}
 8006d6c:	469e      	mov	lr, r3
 8006d6e:	4770      	bx	lr
